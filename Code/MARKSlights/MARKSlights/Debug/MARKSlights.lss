
MARKSlights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000314  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000530  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000270  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000484  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000024c  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ec  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a2 30       	cpi	r26, 0x02	; 2
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	62 d0       	rcall	.+196    	; 0x176 <main>
  b2:	f4 c0       	rjmp	.+488    	; 0x29c <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <init_lights>:
int eyebrows = 0;

void init_lights(void)
{
	// Set PE4 and PE5 as outputs
	DDRE |= (1 << DDE4) | (1 << DDE5);
  b6:	8d b1       	in	r24, 0x0d	; 13
  b8:	80 63       	ori	r24, 0x30	; 48
  ba:	8d b9       	out	0x0d, r24	; 13
	
	// Set ADC0, ADC1 and ADC2 as outputs
	DDRF |= (1 << DDF0) | (1 << DDF1) | (1 << DDF2);
  bc:	80 b3       	in	r24, 0x10	; 16
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 bb       	out	0x10, r24	; 16
	
	
	// Timer/Counter 1 ..............................................
	
	// Set respective PWM ports as outputs
	PORTE &= ~(1<<DDE3);
  c2:	73 98       	cbi	0x0e, 3	; 14
	DDRE |= (1<<PE3);
  c4:	6b 9a       	sbi	0x0d, 3	; 13

	// Initialize 16 bit timer to use PWM
	TCCR3B = (1<<WGM33);
  c6:	e1 e9       	ldi	r30, 0x91	; 145
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 e1       	ldi	r24, 0x10	; 16
  cc:	80 83       	st	Z, r24
			
	// Set PWM output low on compare match for OC1A, OC1B, OC1C
	TCCR3A |= (1<<COM3A1) &~ (1<<COM3A0);
  ce:	a0 e9       	ldi	r26, 0x90	; 144
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	8c 91       	ld	r24, X
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8c 93       	st	X, r24

	// Set prescaler to clk/64
	TCCR3B |=  (1<<CS31) | (1<<CS30);
  d8:	80 81       	ld	r24, Z
  da:	83 60       	ori	r24, 0x03	; 3
  dc:	80 83       	st	Z, r24
			
	// Set counter top value to 256
	ICR3L = 0xff;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 93 96 00 	sts	0x0096, r24
	ICR3H =  0x00;
  e4:	10 92 97 00 	sts	0x0097, r1

	// Set main lights off
	OCR3AL = 0x00;
  e8:	10 92 98 00 	sts	0x0098, r1
  ec:	08 95       	ret

000000ee <set_headlights>:
}

void set_headlights(int power)
{
	if (power > 210) //limit output to 210, heat sinks are to small to handle 255
  ee:	83 3d       	cpi	r24, 0xD3	; 211
  f0:	91 05       	cpc	r25, r1
  f2:	24 f0       	brlt	.+8      	; 0xfc <set_headlights+0xe>
	{
		OCR3AL = 210;
  f4:	82 ed       	ldi	r24, 0xD2	; 210
  f6:	80 93 98 00 	sts	0x0098, r24
  fa:	08 95       	ret
	}
	else {
		OCR3AL = power;
  fc:	80 93 98 00 	sts	0x0098, r24
 100:	08 95       	ret

00000102 <set_eye_brows>:
	}
}

void set_eye_brows(int on)
{
	if (on){
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	19 f0       	breq	.+6      	; 0x10c <set_eye_brows+0xa>
		PORTF |= (1 << PF1);
 106:	89 9a       	sbi	0x11, 1	; 17
		PORTE |= (1 << PE5);
 108:	75 9a       	sbi	0x0e, 5	; 14
 10a:	02 c0       	rjmp	.+4      	; 0x110 <set_eye_brows+0xe>
	}
	else{
		PORTF &= ~(1 << PF1);
 10c:	89 98       	cbi	0x11, 1	; 17
		PORTE &= ~(1 << PE5);
 10e:	75 98       	cbi	0x0e, 5	; 14
	}

	eyebrows = on;
 110:	90 93 01 01 	sts	0x0101, r25
 114:	80 93 00 01 	sts	0x0100, r24
 118:	08 95       	ret

0000011a <set_angel_eyes>:
}

void set_angel_eyes(int on)
{

	if (on){
 11a:	89 2b       	or	r24, r25
 11c:	11 f0       	breq	.+4      	; 0x122 <set_angel_eyes+0x8>
		PORTE |= (1 << PE4);
 11e:	74 9a       	sbi	0x0e, 4	; 14
 120:	08 95       	ret
	}
	else{
		PORTE &= ~(1 << PE4);
 122:	74 98       	cbi	0x0e, 4	; 14
 124:	08 95       	ret

00000126 <set_left_turn>:
	}
}

void set_left_turn(int on)
{	
	if (on){
 126:	89 2b       	or	r24, r25
 128:	49 f0       	breq	.+18     	; 0x13c <set_left_turn+0x16>
		PORTF |= (1 << PF2);
 12a:	8a 9a       	sbi	0x11, 2	; 17
		if (!eyebrows){ //if eyebrows not on, toggle pin PF1 to complete the circuit
 12c:	80 91 00 01 	lds	r24, 0x0100
 130:	90 91 01 01 	lds	r25, 0x0101
 134:	89 2b       	or	r24, r25
 136:	51 f4       	brne	.+20     	; 0x14c <set_left_turn+0x26>
			PORTF |= (1 << PF1);
 138:	89 9a       	sbi	0x11, 1	; 17
 13a:	08 95       	ret
		}
	}
	else{
		PORTF &= ~(1 << PF2);
 13c:	8a 98       	cbi	0x11, 2	; 17
		if (!eyebrows){ //if eyebrows not on, toggle pin PF1 to complete the circuit
 13e:	80 91 00 01 	lds	r24, 0x0100
 142:	90 91 01 01 	lds	r25, 0x0101
 146:	89 2b       	or	r24, r25
 148:	09 f4       	brne	.+2      	; 0x14c <set_left_turn+0x26>
			PORTF &= ~(1 << PF1);
 14a:	89 98       	cbi	0x11, 1	; 17
 14c:	08 95       	ret

0000014e <set_right_turn>:
	}
}

void set_right_turn(int on)
{
	if (on){
 14e:	89 2b       	or	r24, r25
 150:	49 f0       	breq	.+18     	; 0x164 <set_right_turn+0x16>
		PORTF |= (1 << PF0);
 152:	88 9a       	sbi	0x11, 0	; 17
		if (!eyebrows){ //if eyebrows not on, toggle pin PE5 to complete the circuit
 154:	80 91 00 01 	lds	r24, 0x0100
 158:	90 91 01 01 	lds	r25, 0x0101
 15c:	89 2b       	or	r24, r25
 15e:	51 f4       	brne	.+20     	; 0x174 <set_right_turn+0x26>
			PORTE |= (1 << PE5);
 160:	75 9a       	sbi	0x0e, 5	; 14
 162:	08 95       	ret
		}
		
	}
	else{
		PORTF &= ~(1 << PF0);
 164:	88 98       	cbi	0x11, 0	; 17
		if (!eyebrows){ //if eyebrows not on, toggle pin PE5 to complete the circuit
 166:	80 91 00 01 	lds	r24, 0x0100
 16a:	90 91 01 01 	lds	r25, 0x0101
 16e:	89 2b       	or	r24, r25
 170:	09 f4       	brne	.+2      	; 0x174 <set_right_turn+0x26>
			PORTE &= ~(1 << PE5);
 172:	75 98       	cbi	0x0e, 5	; 14
 174:	08 95       	ret

00000176 <main>:
#include "lights.h"
#include <util/delay.h>
void init_timer(void);

int main(){
	init_lights();
 176:	9f df       	rcall	.-194    	; 0xb6 <init_lights>
	RGB_init();
 178:	50 d0       	rcall	.+160    	; 0x21a <RGB_init>
	set_angel_eyes(1);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	cd df       	rcall	.-102    	; 0x11a <set_angel_eyes>
//	RGB_led_on(LED_RED);
	int cntr = 0;
 180:	c0 e0       	ldi	r28, 0x00	; 0
 182:	d0 e0       	ldi	r29, 0x00	; 0
					set_angel_eyes(1);
					break;
		}
		RGB_toggle(LED_BLUE);
		_delay_ms(5000);		
		cntr = cntr%5;
 184:	05 e0       	ldi	r16, 0x05	; 5
 186:	10 e0       	ldi	r17, 0x00	; 0
 188:	13 c0       	rjmp	.+38     	; 0x1b0 <main+0x3a>
//	RGB_led_on(LED_RED);
	int cntr = 0;
	while(1){
		switch(cntr){
			case 1:
					set_headlights(128);
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	af df       	rcall	.-162    	; 0xee <set_headlights>
					break;
 190:	0f c0       	rjmp	.+30     	; 0x1b0 <main+0x3a>
			case 2:
					set_eye_brows(1);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	b5 df       	rcall	.-150    	; 0x102 <set_eye_brows>
					break;
 198:	0b c0       	rjmp	.+22     	; 0x1b0 <main+0x3a>
			case 3:
					set_left_turn(1);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	c3 df       	rcall	.-122    	; 0x126 <set_left_turn>
					break;
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <main+0x3a>
			case 4:
					set_right_turn(1);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	d3 df       	rcall	.-90     	; 0x14e <set_right_turn>
					break;
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <main+0x3a>
			case 5:
					set_angel_eyes(1);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	b5 df       	rcall	.-150    	; 0x11a <set_angel_eyes>
					break;
		}
		RGB_toggle(LED_BLUE);
 1b0:	87 e0       	ldi	r24, 0x07	; 7
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	39 d0       	rcall	.+114    	; 0x228 <RGB_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	81 e1       	ldi	r24, 0x11	; 17
 1ba:	9a e7       	ldi	r25, 0x7A	; 122
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x46>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x50>
 1c6:	00 00       	nop
		_delay_ms(5000);		
		cntr = cntr%5;
 1c8:	ce 01       	movw	r24, r28
 1ca:	b8 01       	movw	r22, r16
 1cc:	40 d0       	rcall	.+128    	; 0x24e <__divmodhi4>
		cntr++;
 1ce:	ec 01       	movw	r28, r24
 1d0:	21 96       	adiw	r28, 0x01	; 1
		set_headlights(0);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	8b df       	rcall	.-234    	; 0xee <set_headlights>
		set_eye_brows(0);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	92 df       	rcall	.-220    	; 0x102 <set_eye_brows>
		set_angel_eyes(0);
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	9b df       	rcall	.-202    	; 0x11a <set_angel_eyes>
		set_left_turn(0);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	9e df       	rcall	.-196    	; 0x126 <set_left_turn>
		set_right_turn(0);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	af df       	rcall	.-162    	; 0x14e <set_right_turn>
	RGB_init();
	set_angel_eyes(1);
//	RGB_led_on(LED_RED);
	int cntr = 0;
	while(1){
		switch(cntr){
 1f0:	c3 30       	cpi	r28, 0x03	; 3
 1f2:	d1 05       	cpc	r29, r1
 1f4:	91 f2       	breq	.-92     	; 0x19a <main+0x24>
 1f6:	4c f4       	brge	.+18     	; 0x20a <main+0x94>
 1f8:	c1 30       	cpi	r28, 0x01	; 1
 1fa:	d1 05       	cpc	r29, r1
 1fc:	09 f4       	brne	.+2      	; 0x200 <main+0x8a>
 1fe:	c5 cf       	rjmp	.-118    	; 0x18a <main+0x14>
 200:	c2 30       	cpi	r28, 0x02	; 2
 202:	d1 05       	cpc	r29, r1
 204:	09 f4       	brne	.+2      	; 0x208 <main+0x92>
 206:	c5 cf       	rjmp	.-118    	; 0x192 <main+0x1c>
 208:	d3 cf       	rjmp	.-90     	; 0x1b0 <main+0x3a>
 20a:	c4 30       	cpi	r28, 0x04	; 4
 20c:	d1 05       	cpc	r29, r1
 20e:	09 f4       	brne	.+2      	; 0x212 <main+0x9c>
 210:	c8 cf       	rjmp	.-112    	; 0x1a2 <main+0x2c>
 212:	c5 30       	cpi	r28, 0x05	; 5
 214:	d1 05       	cpc	r29, r1
 216:	49 f2       	breq	.-110    	; 0x1aa <main+0x34>
 218:	cb cf       	rjmp	.-106    	; 0x1b0 <main+0x3a>

0000021a <RGB_init>:
 * Turn off led.
 * 	@arg: pin number (only accepts pb5, pb6 or pb7)
 *************/
void RGB_led_on(int num){
	if(num == PB5 || num == PB6 || num == PB7){
		PORTB &= ~(1 << num); 
 21a:	84 b1       	in	r24, 0x04	; 4
 21c:	80 6e       	ori	r24, 0xE0	; 224
 21e:	84 b9       	out	0x04, r24	; 4
 220:	85 b1       	in	r24, 0x05	; 5
 222:	80 6e       	ori	r24, 0xE0	; 224
 224:	85 b9       	out	0x05, r24	; 5
 226:	08 95       	ret

00000228 <RGB_toggle>:
/*************
 * Toggle led.
 * 	@arg: pin number (only accepts pb5, pb6 or pb7)
 *************/
void RGB_toggle(int num){
	if(num == PB5 || num == PB6 || num == PB7){
 228:	9c 01       	movw	r18, r24
 22a:	25 50       	subi	r18, 0x05	; 5
 22c:	31 09       	sbc	r19, r1
 22e:	23 30       	cpi	r18, 0x03	; 3
 230:	31 05       	cpc	r19, r1
 232:	60 f4       	brcc	.+24     	; 0x24c <RGB_toggle+0x24>
		PORTB ^= (1 << num); 
 234:	45 b1       	in	r20, 0x05	; 5
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	b9 01       	movw	r22, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <RGB_toggle+0x1a>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	8a 95       	dec	r24
 244:	e2 f7       	brpl	.-8      	; 0x23e <RGB_toggle+0x16>
 246:	cb 01       	movw	r24, r22
 248:	84 27       	eor	r24, r20
 24a:	85 b9       	out	0x05, r24	; 5
 24c:	08 95       	ret

0000024e <__divmodhi4>:
 24e:	97 fb       	bst	r25, 7
 250:	07 2e       	mov	r0, r23
 252:	16 f4       	brtc	.+4      	; 0x258 <__divmodhi4+0xa>
 254:	00 94       	com	r0
 256:	06 d0       	rcall	.+12     	; 0x264 <__divmodhi4_neg1>
 258:	77 fd       	sbrc	r23, 7
 25a:	08 d0       	rcall	.+16     	; 0x26c <__divmodhi4_neg2>
 25c:	0b d0       	rcall	.+22     	; 0x274 <__udivmodhi4>
 25e:	07 fc       	sbrc	r0, 7
 260:	05 d0       	rcall	.+10     	; 0x26c <__divmodhi4_neg2>
 262:	3e f4       	brtc	.+14     	; 0x272 <__divmodhi4_exit>

00000264 <__divmodhi4_neg1>:
 264:	90 95       	com	r25
 266:	81 95       	neg	r24
 268:	9f 4f       	sbci	r25, 0xFF	; 255
 26a:	08 95       	ret

0000026c <__divmodhi4_neg2>:
 26c:	70 95       	com	r23
 26e:	61 95       	neg	r22
 270:	7f 4f       	sbci	r23, 0xFF	; 255

00000272 <__divmodhi4_exit>:
 272:	08 95       	ret

00000274 <__udivmodhi4>:
 274:	aa 1b       	sub	r26, r26
 276:	bb 1b       	sub	r27, r27
 278:	51 e1       	ldi	r21, 0x11	; 17
 27a:	07 c0       	rjmp	.+14     	; 0x28a <__udivmodhi4_ep>

0000027c <__udivmodhi4_loop>:
 27c:	aa 1f       	adc	r26, r26
 27e:	bb 1f       	adc	r27, r27
 280:	a6 17       	cp	r26, r22
 282:	b7 07       	cpc	r27, r23
 284:	10 f0       	brcs	.+4      	; 0x28a <__udivmodhi4_ep>
 286:	a6 1b       	sub	r26, r22
 288:	b7 0b       	sbc	r27, r23

0000028a <__udivmodhi4_ep>:
 28a:	88 1f       	adc	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	5a 95       	dec	r21
 290:	a9 f7       	brne	.-22     	; 0x27c <__udivmodhi4_loop>
 292:	80 95       	com	r24
 294:	90 95       	com	r25
 296:	bc 01       	movw	r22, r24
 298:	cd 01       	movw	r24, r26
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
