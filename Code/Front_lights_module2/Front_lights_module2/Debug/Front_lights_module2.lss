
Front_lights_module2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000df0  00000e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800132  00800132  00000eb6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000102b  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000890  00000000  00000000  000020ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c79  00000000  00000000  0000298f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00003608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00003980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a2b  00000000  00000000  00003e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00004831  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1f c2       	rjmp	.+1086   	; 0x47c <__vector_15>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	f4 c1       	rjmp	.+1000   	; 0x42e <__vector_17>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e0 ef       	ldi	r30, 0xF0	; 240
  a8:	fd e0       	ldi	r31, 0x0D	; 13
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 33       	cpi	r26, 0x32	; 50
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e3       	ldi	r26, 0x32	; 50
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a9 36       	cpi	r26, 0x69	; 105
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	a5 d1       	rcall	.+842    	; 0x416 <main>
  cc:	8f c6       	rjmp	.+3358   	; 0xdec <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <__vector_18>:
        CANIDT4 = 1<<RTRTAG;
		CANCDMOB|=packet->length;
		}
    CANCDMOB|=0x40; //enable TX
	return TRUE;
	}
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	cf 93       	push	r28
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
  f8:	ed ee       	ldi	r30, 0xED	; 237
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	c0 81       	ld	r28, Z
  fe:	80 91 ec 00 	lds	r24, 0x00EC
 102:	68 2f       	mov	r22, r24
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	80 83       	st	Z, r24
 10a:	72 95       	swap	r23
 10c:	62 95       	swap	r22
 10e:	6f 70       	andi	r22, 0x0F	; 15
 110:	67 27       	eor	r22, r23
 112:	7f 70       	andi	r23, 0x0F	; 15
 114:	67 27       	eor	r22, r23
 116:	80 91 ee 00 	lds	r24, 0x00EE
 11a:	8f 75       	andi	r24, 0x5F	; 95
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_18+0x50>
 11e:	98 95       	break
 120:	20 91 f2 00 	lds	r18, 0x00F2
 124:	80 91 f3 00 	lds	r24, 0x00F3
 128:	e2 e3       	ldi	r30, 0x32	; 50
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	22 95       	swap	r18
 13c:	26 95       	lsr	r18
 13e:	27 70       	andi	r18, 0x07	; 7
 140:	82 2b       	or	r24, r18
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
 146:	80 91 ef 00 	lds	r24, 0x00EF
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	59 f0       	breq	.+22     	; 0x16a <__vector_18+0x9a>
 154:	e5 e3       	ldi	r30, 0x35	; 53
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	8b 5c       	subi	r24, 0xCB	; 203
 15a:	9e 4f       	sbci	r25, 0xFE	; 254
 15c:	aa ef       	ldi	r26, 0xFA	; 250
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	2c 91       	ld	r18, X
 162:	21 93       	st	Z+, r18
 164:	e8 17       	cp	r30, r24
 166:	f9 07       	cpc	r31, r25
 168:	d9 f7       	brne	.-10     	; 0x160 <__vector_18+0x90>
 16a:	10 92 ee 00 	sts	0x00EE, r1
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 ef 00 	sts	0x00EF, r24
 174:	fb 01       	movw	r30, r22
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ef 5b       	subi	r30, 0xBF	; 191
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	01 90       	ld	r0, Z+
 180:	f0 81       	ld	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	82 e3       	ldi	r24, 0x32	; 50
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	09 95       	icall
 18a:	c0 93 ed 00 	sts	0x00ED, r28
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <prepare_rx>:

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
 1b6:	8f 30       	cpi	r24, 0x0F	; 15
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <prepare_rx+0x6>
 1ba:	6d c0       	rjmp	.+218    	; 0x296 <prepare_rx+0xe0>
		return TRUE;
	canlist[ (unsigned)mob]=callback;
 1bc:	e8 2f       	mov	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	ef 5b       	subi	r30, 0xBF	; 191
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	31 83       	std	Z+1, r19	; 0x01
 1ca:	20 83       	st	Z, r18
    CANPAGE = mob << 4;
 1cc:	98 2f       	mov	r25, r24
 1ce:	92 95       	swap	r25
 1d0:	90 7f       	andi	r25, 0xF0	; 240
 1d2:	90 93 ed 00 	sts	0x00ED, r25
	if( callback==0)			// release this MOB 
 1d6:	23 2b       	or	r18, r19
 1d8:	d9 f4       	brne	.+54     	; 0x210 <prepare_rx+0x5a>
		{
		CANSTMOB = 0x00;    	// cancel pending operation
 1da:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0x00;
 1de:	10 92 ef 00 	sts	0x00EF, r1
		unsigned mask=1<<mob;
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	a9 01       	movw	r20, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <prepare_rx+0x38>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <prepare_rx+0x34>
 1f2:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
 1f4:	ee ed       	ldi	r30, 0xDE	; 222
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	20 81       	ld	r18, Z
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
 200:	ef ed       	ldi	r30, 0xDF	; 223
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	90 95       	com	r25
 208:	89 23       	and	r24, r25
 20a:	80 83       	st	Z, r24
		return FALSE;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
 210:	90 91 ef 00 	lds	r25, 0x00EF
 214:	90 7c       	andi	r25, 0xC0	; 192
 216:	09 f0       	breq	.+2      	; 0x21a <prepare_rx+0x64>
 218:	40 c0       	rjmp	.+128    	; 0x29a <prepare_rx+0xe4>
		return TRUE;			// no vacancy ...
	CANSTMOB = 0x00;    	// cancel pending operation 
 21a:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;		
 21e:	ef ee       	ldi	r30, 0xEF	; 239
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	10 82       	st	Z, r1
	CANHPMOB = 0x00;		// enable direct mob indexing, see doc
 224:	10 92 ec 00 	sts	0x00EC, r1
	CANIDT1=id >>3;
 228:	9b 01       	movw	r18, r22
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	36 95       	lsr	r19
 234:	27 95       	ror	r18
 236:	20 93 f3 00 	sts	0x00F3, r18
	CANIDT2=id <<5;
 23a:	62 95       	swap	r22
 23c:	66 0f       	add	r22, r22
 23e:	60 7e       	andi	r22, 0xE0	; 224
 240:	60 93 f2 00 	sts	0x00F2, r22
	CANIDM1=idmask >>3;
 244:	9a 01       	movw	r18, r20
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	20 93 f7 00 	sts	0x00F7, r18
	CANIDM2=idmask <<5;
 256:	42 95       	swap	r20
 258:	44 0f       	add	r20, r20
 25a:	40 7e       	andi	r20, 0xE0	; 224
 25c:	40 93 f6 00 	sts	0x00F6, r20
	CANIDM3=0;
 260:	10 92 f5 00 	sts	0x00F5, r1
	CANIDM4=0;
 264:	10 92 f4 00 	sts	0x00F4, r1
	CANCDMOB=0x80; // enable RX
 268:	90 e8       	ldi	r25, 0x80	; 128
 26a:	90 83       	st	Z, r25
	unsigned mask=1<<mob;
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	a9 01       	movw	r20, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <prepare_rx+0xc2>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <prepare_rx+0xbe>
 27c:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
 27e:	ee ed       	ldi	r30, 0xDE	; 222
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	20 81       	ld	r18, Z
 284:	82 2b       	or	r24, r18
 286:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
 288:	ef ed       	ldi	r30, 0xDF	; 223
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	89 2b       	or	r24, r25
 290:	80 83       	st	Z, r24
	return FALSE;
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
	}

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
		return TRUE;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return FALSE;
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
		return TRUE;			// no vacancy ...
 29a:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return FALSE;
	}
 29c:	08 95       	ret

0000029e <can_init>:

void can_init( void)
	{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	unsigned mob;
//! \bug different baud rate support not implemented yet 
#if F_CPU == 8000000

	//Old implementation
	CANBT1=0x06;	// 8MHz, 100kbit/s
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2=0x0c;
 2a8:	8c e0       	ldi	r24, 0x0C	; 12
 2aa:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3=0x5a;
 2ae:	8a e5       	ldi	r24, 0x5A	; 90
 2b0:	80 93 e4 00 	sts	0x00E4, r24
 2b4:	80 e0       	ldi	r24, 0x00	; 0
	CANBT3=0x13;
#endif
	
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2b6:	cd ee       	ldi	r28, 0xED	; 237
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
 2ba:	ae ee       	ldi	r26, 0xEE	; 238
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
 2be:	ef ee       	ldi	r30, 0xEF	; 239
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT3=0x13;
#endif
	
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2c2:	98 2f       	mov	r25, r24
 2c4:	92 95       	swap	r25
 2c6:	90 7f       	andi	r25, 0xF0	; 240
 2c8:	98 83       	st	Y, r25
		CANSTMOB = 0;
 2ca:	1c 92       	st	X, r1
		CANCDMOB = 0;
 2cc:	10 82       	st	Z, r1
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
	CANBT1=0x26;	// 16 MHz, 100kbit/s
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	
	for (mob = 0; mob < NO_MOBS; mob++)
 2d0:	8f 30       	cpi	r24, 0x0F	; 15
 2d2:	b9 f7       	brne	.-18     	; 0x2c2 <can_init+0x24>
		{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
		}
	CANGCON |= 0x02;
 2d4:	e8 ed       	ldi	r30, 0xD8	; 216
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX);
 2de:	80 ea       	ldi	r24, 0xA0	; 160
 2e0:	80 93 db 00 	sts	0x00DB, r24
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <front_lights_init>:
void front_ind_left( BOOL on) {
	IND_LEFT = on;
}

void front_ind_right( BOOL on) {
	IND_RIGHT = on;
 2ea:	6c 9a       	sbi	0x0d, 4	; 13
 2ec:	6d 9a       	sbi	0x0d, 5	; 13
 2ee:	80 9a       	sbi	0x10, 0	; 16
 2f0:	81 9a       	sbi	0x10, 1	; 16
 2f2:	82 9a       	sbi	0x10, 2	; 16
 2f4:	73 98       	cbi	0x0e, 3	; 14
 2f6:	6b 9a       	sbi	0x0d, 3	; 13
 2f8:	e1 e9       	ldi	r30, 0x91	; 145
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 e1       	ldi	r24, 0x10	; 16
 2fe:	80 83       	st	Z, r24
 300:	a0 e9       	ldi	r26, 0x90	; 144
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	8c 91       	ld	r24, X
 306:	80 68       	ori	r24, 0x80	; 128
 308:	8c 93       	st	X, r24
 30a:	80 81       	ld	r24, Z
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	80 83       	st	Z, r24
 310:	80 81       	ld	r24, Z
 312:	81 60       	ori	r24, 0x01	; 1
 314:	80 83       	st	Z, r24
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	80 93 96 00 	sts	0x0096, r24
 31c:	10 92 97 00 	sts	0x0097, r1
 320:	10 92 98 00 	sts	0x0098, r1
 324:	08 95       	ret

00000326 <front_lights_eyebrows>:
 326:	48 2f       	mov	r20, r24
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	80 91 3e 01 	lds	r24, 0x013E
 330:	81 11       	cpse	r24, r1
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	80 91 3f 01 	lds	r24, 0x013F
 33a:	81 11       	cpse	r24, r1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	92 23       	and	r25, r18
 340:	29 2f       	mov	r18, r25
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	ca 01       	movw	r24, r20
 346:	82 23       	and	r24, r18
 348:	93 23       	and	r25, r19
 34a:	89 2b       	or	r24, r25
 34c:	19 f0       	breq	.+6      	; 0x354 <front_lights_eyebrows+0x2e>
 34e:	89 9a       	sbi	0x11, 1	; 17
 350:	75 9a       	sbi	0x0e, 5	; 14
 352:	08 95       	ret
 354:	89 98       	cbi	0x11, 1	; 17
 356:	75 98       	cbi	0x0e, 5	; 14
 358:	08 95       	ret

0000035a <front_lights_angel_eyes>:
 35a:	88 23       	and	r24, r24
 35c:	11 f0       	breq	.+4      	; 0x362 <front_lights_angel_eyes+0x8>
 35e:	74 9a       	sbi	0x0e, 4	; 14
 360:	08 95       	ret
 362:	74 98       	cbi	0x0e, 4	; 14
 364:	08 95       	ret

00000366 <front_lights_turn_left>:
 366:	88 23       	and	r24, r24
 368:	39 f0       	breq	.+14     	; 0x378 <front_lights_turn_left+0x12>
 36a:	8a 9a       	sbi	0x11, 2	; 17
 36c:	80 91 3d 01 	lds	r24, 0x013D
 370:	81 11       	cpse	r24, r1
 372:	08 c0       	rjmp	.+16     	; 0x384 <front_lights_turn_left+0x1e>
 374:	89 9a       	sbi	0x11, 1	; 17
 376:	08 95       	ret
 378:	8a 98       	cbi	0x11, 2	; 17
 37a:	80 91 3d 01 	lds	r24, 0x013D
 37e:	81 11       	cpse	r24, r1
 380:	01 c0       	rjmp	.+2      	; 0x384 <front_lights_turn_left+0x1e>
 382:	89 98       	cbi	0x11, 1	; 17
 384:	08 95       	ret

00000386 <front_lights_turn_right>:
 386:	88 23       	and	r24, r24
 388:	39 f0       	breq	.+14     	; 0x398 <front_lights_turn_right+0x12>
 38a:	88 9a       	sbi	0x11, 0	; 17
 38c:	80 91 3d 01 	lds	r24, 0x013D
 390:	81 11       	cpse	r24, r1
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <front_lights_turn_right+0x1e>
 394:	75 9a       	sbi	0x0e, 5	; 14
 396:	08 95       	ret
 398:	88 98       	cbi	0x11, 0	; 17
 39a:	80 91 3d 01 	lds	r24, 0x013D
 39e:	81 11       	cpse	r24, r1
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <front_lights_turn_right+0x1e>
 3a2:	75 98       	cbi	0x0e, 5	; 14
 3a4:	08 95       	ret

000003a6 <front_light_handler>:
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	ec 01       	movw	r28, r24
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	80 ff       	sbrs	r24, 0
 3b0:	04 c0       	rjmp	.+8      	; 0x3ba <front_light_handler+0x14>
 3b2:	89 e6       	ldi	r24, 0x69	; 105
 3b4:	80 93 98 00 	sts	0x0098, r24
 3b8:	08 c0       	rjmp	.+16     	; 0x3ca <front_light_handler+0x24>
 3ba:	81 ff       	sbrs	r24, 1
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <front_light_handler+0x20>
 3be:	82 ed       	ldi	r24, 0xD2	; 210
 3c0:	80 93 98 00 	sts	0x0098, r24
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <front_light_handler+0x24>
 3c6:	10 92 98 00 	sts	0x0098, r1
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	80 72       	andi	r24, 0x20	; 32
 3ce:	ab df       	rcall	.-170    	; 0x326 <front_lights_eyebrows>
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	98 2f       	mov	r25, r24
 3d4:	94 70       	andi	r25, 0x04	; 4
 3d6:	90 93 3e 01 	sts	0x013E, r25
 3da:	98 2f       	mov	r25, r24
 3dc:	98 70       	andi	r25, 0x08	; 8
 3de:	90 93 3f 01 	sts	0x013F, r25
 3e2:	80 71       	andi	r24, 0x10	; 16
 3e4:	ba df       	rcall	.-140    	; 0x35a <front_lights_angel_eyes>
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <get_ind_left>:
}

BOOL get_ind_left( void) {
	return test_bit(PORTF, PF2);
 3ec:	81 b3       	in	r24, 0x11	; 17
}
 3ee:	84 70       	andi	r24, 0x04	; 4
 3f0:	08 95       	ret

000003f2 <get_ind_right>:

BOOL get_ind_right( void) {
	return test_bit(PORTF, PF0);
 3f2:	81 b3       	in	r24, 0x11	; 17
}
 3f4:	81 70       	andi	r24, 0x01	; 1
 3f6:	08 95       	ret

000003f8 <inits>:
#include <stdio.h>
#include "front_lights_module.h"
#include "timer1.h"

void inits(void) {
	can_init();
 3f8:	52 df       	rcall	.-348    	; 0x29e <can_init>
	USART_init(MYUBRR, true);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	83 e3       	ldi	r24, 0x33	; 51
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	99 d0       	rcall	.+306    	; 0x534 <USART_init>
	front_lights_init();
 402:	73 df       	rcall	.-282    	; 0x2ea <front_lights_init>
	timer1_init();
 404:	1e d0       	rcall	.+60     	; 0x442 <timer1_init>
	
	printf("\r\nInitialization complete");
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	9f 93       	push	r25
 40c:	8f 93       	push	r24
 40e:	f3 d0       	rcall	.+486    	; 0x5f6 <printf>
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	08 95       	ret

00000416 <main>:

int main(void)
{
	BOOL ret;
	BOOL ret2;
	inits();
 416:	f0 df       	rcall	.-32     	; 0x3f8 <inits>
	//ret = prepare_rx(14, ID_lightShow, 0xff, light_show);
	ret2 = prepare_rx(0, ID_lightsFront, 0xff, front_light_handler);
 418:	23 ed       	ldi	r18, 0xD3	; 211
 41a:	31 e0       	ldi	r19, 0x01	; 1
 41c:	4f ef       	ldi	r20, 0xFF	; 255
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	61 e5       	ldi	r22, 0x51	; 81
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	c7 de       	rcall	.-626    	; 0x1b6 <prepare_rx>
	
	/* Set global interrupts */
	sei();
 428:	78 94       	sei
	
	for(;;)
		asm("sleep");;
 42a:	88 95       	sleep
 42c:	fe cf       	rjmp	.-4      	; 0x42a <main+0x14>

0000042e <__vector_17>:
	set_bit(TCCR0A, CS00);
	/* Enable timer overflow */
	set_bit(TIMSK0, TOIE0);
}

ISR(TIMER0_OVF_vect) {
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
	
	
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <timer1_init>:
	/* DIsable interrupts */
	cli(); // same as cli()?
	/* Set TCNT1 to i */
	TCNT1 = i;
	/* Restore global interrupt flag */
	SREG = sreg;
 442:	e1 e8       	ldi	r30, 0x81	; 129
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	82 60       	ori	r24, 0x02	; 2
 44a:	80 83       	st	Z, r24
 44c:	80 81       	ld	r24, Z
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	80 83       	st	Z, r24
 452:	10 92 85 00 	sts	0x0085, r1
 456:	10 92 84 00 	sts	0x0084, r1
 45a:	ef e6       	ldi	r30, 0x6F	; 111
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	81 60       	ori	r24, 0x01	; 1
 462:	80 83       	st	Z, r24
 464:	78 94       	sei
 466:	10 92 40 01 	sts	0x0140, r1
 46a:	e0 e8       	ldi	r30, 0x80	; 128
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	80 68       	ori	r24, 0x80	; 128
 472:	80 83       	st	Z, r24
 474:	80 81       	ld	r24, Z
 476:	8f 7b       	andi	r24, 0xBF	; 191
 478:	80 83       	st	Z, r24
 47a:	08 95       	ret

0000047c <__vector_15>:
}


ISR(TIMER1_OVF_vect) {
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
 486:	0b b6       	in	r0, 0x3b	; 59
 488:	0f 92       	push	r0
 48a:	2f 93       	push	r18
 48c:	3f 93       	push	r19
 48e:	4f 93       	push	r20
 490:	5f 93       	push	r21
 492:	6f 93       	push	r22
 494:	7f 93       	push	r23
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
	printf(("\r\nTimer1 overflow"));
 4a2:	80 e2       	ldi	r24, 0x20	; 32
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	9f 93       	push	r25
 4a8:	8f 93       	push	r24
 4aa:	a5 d0       	rcall	.+330    	; 0x5f6 <printf>
	if (IND_LEFT) {
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	80 91 3f 01 	lds	r24, 0x013F
 4b4:	88 23       	and	r24, r24
 4b6:	49 f0       	breq	.+18     	; 0x4ca <__vector_15+0x4e>
		// toggle the left indicator
		if (get_ind_left())
 4b8:	99 df       	rcall	.-206    	; 0x3ec <get_ind_left>
 4ba:	89 2b       	or	r24, r25
 4bc:	19 f0       	breq	.+6      	; 0x4c4 <__vector_15+0x48>
		front_lights_turn_left(FALSE);
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	52 df       	rcall	.-348    	; 0x366 <front_lights_turn_left>
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__vector_15+0x52>
		else
		front_lights_turn_left(TRUE);
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	4f df       	rcall	.-354    	; 0x366 <front_lights_turn_left>
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__vector_15+0x52>
	} else
	front_lights_turn_left(FALSE);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	4c df       	rcall	.-360    	; 0x366 <front_lights_turn_left>
	if (IND_RIGHT) {
 4ce:	80 91 3e 01 	lds	r24, 0x013E
 4d2:	88 23       	and	r24, r24
 4d4:	49 f0       	breq	.+18     	; 0x4e8 <__vector_15+0x6c>
		// toggle the right indicator
		if (get_ind_right())
 4d6:	8d df       	rcall	.-230    	; 0x3f2 <get_ind_right>
 4d8:	89 2b       	or	r24, r25
 4da:	19 f0       	breq	.+6      	; 0x4e2 <__vector_15+0x66>
		front_lights_turn_right(FALSE);
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	53 df       	rcall	.-346    	; 0x386 <front_lights_turn_right>
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <__vector_15+0x70>
		else
		front_lights_turn_right(TRUE);
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	50 df       	rcall	.-352    	; 0x386 <front_lights_turn_right>
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__vector_15+0x70>
	} else
	front_lights_turn_right(FALSE);
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	4d df       	rcall	.-358    	; 0x386 <front_lights_turn_right>
 4ec:	ff 91       	pop	r31
 4ee:	ef 91       	pop	r30
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	7f 91       	pop	r23
 4fa:	6f 91       	pop	r22
 4fc:	5f 91       	pop	r21
 4fe:	4f 91       	pop	r20
 500:	3f 91       	pop	r19
 502:	2f 91       	pop	r18
 504:	0f 90       	pop	r0
 506:	0b be       	out	0x3b, r0	; 59
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 512:	e0 ec       	ldi	r30, 0xC0	; 192
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	90 81       	ld	r25, Z
 518:	95 ff       	sbrs	r25, 5
 51a:	fd cf       	rjmp	.-6      	; 0x516 <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 51c:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	08 95       	ret

00000524 <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 524:	e0 ec       	ldi	r30, 0xC0	; 192
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	88 23       	and	r24, r24
 52c:	ec f7       	brge	.-6      	; 0x528 <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 52e:	80 91 c6 00 	lds	r24, 0x00C6
}
 532:	08 95       	ret

00000534 <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 534:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 538:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 53c:	86 e0       	ldi	r24, 0x06	; 6
 53e:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 542:	66 23       	and	r22, r22
 544:	41 f0       	breq	.+16     	; 0x556 <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 546:	e1 ec       	ldi	r30, 0xC1	; 193
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	80 61       	ori	r24, 0x10	; 16
 54e:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 550:	80 81       	ld	r24, Z
 552:	88 60       	ori	r24, 0x08	; 8
 554:	80 83       	st	Z, r24
	}
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 556:	62 e9       	ldi	r22, 0x92	; 146
 558:	72 e0       	ldi	r23, 0x02	; 2
 55a:	89 e8       	ldi	r24, 0x89	; 137
 55c:	92 e0       	ldi	r25, 0x02	; 2
 55e:	01 c0       	rjmp	.+2      	; 0x562 <fdevopen>
 560:	08 95       	ret

00000562 <fdevopen>:
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	00 97       	sbiw	r24, 0x00	; 0
 56c:	31 f4       	brne	.+12     	; 0x57a <fdevopen+0x18>
 56e:	61 15       	cp	r22, r1
 570:	71 05       	cpc	r23, r1
 572:	19 f4       	brne	.+6      	; 0x57a <fdevopen+0x18>
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	39 c0       	rjmp	.+114    	; 0x5ec <fdevopen+0x8a>
 57a:	8b 01       	movw	r16, r22
 57c:	ec 01       	movw	r28, r24
 57e:	6e e0       	ldi	r22, 0x0E	; 14
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	38 d2       	rcall	.+1136   	; 0x9f8 <calloc>
 588:	fc 01       	movw	r30, r24
 58a:	89 2b       	or	r24, r25
 58c:	99 f3       	breq	.-26     	; 0x574 <fdevopen+0x12>
 58e:	80 e8       	ldi	r24, 0x80	; 128
 590:	83 83       	std	Z+3, r24	; 0x03
 592:	01 15       	cp	r16, r1
 594:	11 05       	cpc	r17, r1
 596:	71 f0       	breq	.+28     	; 0x5b4 <fdevopen+0x52>
 598:	13 87       	std	Z+11, r17	; 0x0b
 59a:	02 87       	std	Z+10, r16	; 0x0a
 59c:	81 e8       	ldi	r24, 0x81	; 129
 59e:	83 83       	std	Z+3, r24	; 0x03
 5a0:	80 91 5f 01 	lds	r24, 0x015F
 5a4:	90 91 60 01 	lds	r25, 0x0160
 5a8:	89 2b       	or	r24, r25
 5aa:	21 f4       	brne	.+8      	; 0x5b4 <fdevopen+0x52>
 5ac:	f0 93 60 01 	sts	0x0160, r31
 5b0:	e0 93 5f 01 	sts	0x015F, r30
 5b4:	20 97       	sbiw	r28, 0x00	; 0
 5b6:	c9 f0       	breq	.+50     	; 0x5ea <fdevopen+0x88>
 5b8:	d1 87       	std	Z+9, r29	; 0x09
 5ba:	c0 87       	std	Z+8, r28	; 0x08
 5bc:	83 81       	ldd	r24, Z+3	; 0x03
 5be:	82 60       	ori	r24, 0x02	; 2
 5c0:	83 83       	std	Z+3, r24	; 0x03
 5c2:	80 91 61 01 	lds	r24, 0x0161
 5c6:	90 91 62 01 	lds	r25, 0x0162
 5ca:	89 2b       	or	r24, r25
 5cc:	71 f4       	brne	.+28     	; 0x5ea <fdevopen+0x88>
 5ce:	f0 93 62 01 	sts	0x0162, r31
 5d2:	e0 93 61 01 	sts	0x0161, r30
 5d6:	80 91 63 01 	lds	r24, 0x0163
 5da:	90 91 64 01 	lds	r25, 0x0164
 5de:	89 2b       	or	r24, r25
 5e0:	21 f4       	brne	.+8      	; 0x5ea <fdevopen+0x88>
 5e2:	f0 93 64 01 	sts	0x0164, r31
 5e6:	e0 93 63 01 	sts	0x0163, r30
 5ea:	cf 01       	movw	r24, r30
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	08 95       	ret

000005f6 <printf>:
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	ae 01       	movw	r20, r28
 600:	4b 5f       	subi	r20, 0xFB	; 251
 602:	5f 4f       	sbci	r21, 0xFF	; 255
 604:	fa 01       	movw	r30, r20
 606:	61 91       	ld	r22, Z+
 608:	71 91       	ld	r23, Z+
 60a:	af 01       	movw	r20, r30
 60c:	80 91 61 01 	lds	r24, 0x0161
 610:	90 91 62 01 	lds	r25, 0x0162
 614:	03 d0       	rcall	.+6      	; 0x61c <vfprintf>
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <vfprintf>:
 61c:	2f 92       	push	r2
 61e:	3f 92       	push	r3
 620:	4f 92       	push	r4
 622:	5f 92       	push	r5
 624:	6f 92       	push	r6
 626:	7f 92       	push	r7
 628:	8f 92       	push	r8
 62a:	9f 92       	push	r9
 62c:	af 92       	push	r10
 62e:	bf 92       	push	r11
 630:	cf 92       	push	r12
 632:	df 92       	push	r13
 634:	ef 92       	push	r14
 636:	ff 92       	push	r15
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	2c 97       	sbiw	r28, 0x0c	; 12
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
 650:	7c 01       	movw	r14, r24
 652:	6b 01       	movw	r12, r22
 654:	8a 01       	movw	r16, r20
 656:	fc 01       	movw	r30, r24
 658:	17 82       	std	Z+7, r1	; 0x07
 65a:	16 82       	std	Z+6, r1	; 0x06
 65c:	83 81       	ldd	r24, Z+3	; 0x03
 65e:	81 ff       	sbrs	r24, 1
 660:	b0 c1       	rjmp	.+864    	; 0x9c2 <vfprintf+0x3a6>
 662:	ce 01       	movw	r24, r28
 664:	01 96       	adiw	r24, 0x01	; 1
 666:	4c 01       	movw	r8, r24
 668:	f7 01       	movw	r30, r14
 66a:	93 81       	ldd	r25, Z+3	; 0x03
 66c:	f6 01       	movw	r30, r12
 66e:	93 fd       	sbrc	r25, 3
 670:	85 91       	lpm	r24, Z+
 672:	93 ff       	sbrs	r25, 3
 674:	81 91       	ld	r24, Z+
 676:	6f 01       	movw	r12, r30
 678:	88 23       	and	r24, r24
 67a:	09 f4       	brne	.+2      	; 0x67e <vfprintf+0x62>
 67c:	9e c1       	rjmp	.+828    	; 0x9ba <vfprintf+0x39e>
 67e:	85 32       	cpi	r24, 0x25	; 37
 680:	39 f4       	brne	.+14     	; 0x690 <vfprintf+0x74>
 682:	93 fd       	sbrc	r25, 3
 684:	85 91       	lpm	r24, Z+
 686:	93 ff       	sbrs	r25, 3
 688:	81 91       	ld	r24, Z+
 68a:	6f 01       	movw	r12, r30
 68c:	85 32       	cpi	r24, 0x25	; 37
 68e:	21 f4       	brne	.+8      	; 0x698 <vfprintf+0x7c>
 690:	b7 01       	movw	r22, r14
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	15 d3       	rcall	.+1578   	; 0xcc0 <fputc>
 696:	e8 cf       	rjmp	.-48     	; 0x668 <vfprintf+0x4c>
 698:	51 2c       	mov	r5, r1
 69a:	31 2c       	mov	r3, r1
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	20 32       	cpi	r18, 0x20	; 32
 6a0:	a0 f4       	brcc	.+40     	; 0x6ca <vfprintf+0xae>
 6a2:	8b 32       	cpi	r24, 0x2B	; 43
 6a4:	69 f0       	breq	.+26     	; 0x6c0 <vfprintf+0xa4>
 6a6:	30 f4       	brcc	.+12     	; 0x6b4 <vfprintf+0x98>
 6a8:	80 32       	cpi	r24, 0x20	; 32
 6aa:	59 f0       	breq	.+22     	; 0x6c2 <vfprintf+0xa6>
 6ac:	83 32       	cpi	r24, 0x23	; 35
 6ae:	69 f4       	brne	.+26     	; 0x6ca <vfprintf+0xae>
 6b0:	20 61       	ori	r18, 0x10	; 16
 6b2:	2c c0       	rjmp	.+88     	; 0x70c <vfprintf+0xf0>
 6b4:	8d 32       	cpi	r24, 0x2D	; 45
 6b6:	39 f0       	breq	.+14     	; 0x6c6 <vfprintf+0xaa>
 6b8:	80 33       	cpi	r24, 0x30	; 48
 6ba:	39 f4       	brne	.+14     	; 0x6ca <vfprintf+0xae>
 6bc:	21 60       	ori	r18, 0x01	; 1
 6be:	26 c0       	rjmp	.+76     	; 0x70c <vfprintf+0xf0>
 6c0:	22 60       	ori	r18, 0x02	; 2
 6c2:	24 60       	ori	r18, 0x04	; 4
 6c4:	23 c0       	rjmp	.+70     	; 0x70c <vfprintf+0xf0>
 6c6:	28 60       	ori	r18, 0x08	; 8
 6c8:	21 c0       	rjmp	.+66     	; 0x70c <vfprintf+0xf0>
 6ca:	27 fd       	sbrc	r18, 7
 6cc:	27 c0       	rjmp	.+78     	; 0x71c <vfprintf+0x100>
 6ce:	30 ed       	ldi	r19, 0xD0	; 208
 6d0:	38 0f       	add	r19, r24
 6d2:	3a 30       	cpi	r19, 0x0A	; 10
 6d4:	78 f4       	brcc	.+30     	; 0x6f4 <vfprintf+0xd8>
 6d6:	26 ff       	sbrs	r18, 6
 6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <vfprintf+0xca>
 6da:	fa e0       	ldi	r31, 0x0A	; 10
 6dc:	5f 9e       	mul	r5, r31
 6de:	30 0d       	add	r19, r0
 6e0:	11 24       	eor	r1, r1
 6e2:	53 2e       	mov	r5, r19
 6e4:	13 c0       	rjmp	.+38     	; 0x70c <vfprintf+0xf0>
 6e6:	8a e0       	ldi	r24, 0x0A	; 10
 6e8:	38 9e       	mul	r3, r24
 6ea:	30 0d       	add	r19, r0
 6ec:	11 24       	eor	r1, r1
 6ee:	33 2e       	mov	r3, r19
 6f0:	20 62       	ori	r18, 0x20	; 32
 6f2:	0c c0       	rjmp	.+24     	; 0x70c <vfprintf+0xf0>
 6f4:	8e 32       	cpi	r24, 0x2E	; 46
 6f6:	21 f4       	brne	.+8      	; 0x700 <vfprintf+0xe4>
 6f8:	26 fd       	sbrc	r18, 6
 6fa:	5f c1       	rjmp	.+702    	; 0x9ba <vfprintf+0x39e>
 6fc:	20 64       	ori	r18, 0x40	; 64
 6fe:	06 c0       	rjmp	.+12     	; 0x70c <vfprintf+0xf0>
 700:	8c 36       	cpi	r24, 0x6C	; 108
 702:	11 f4       	brne	.+4      	; 0x708 <vfprintf+0xec>
 704:	20 68       	ori	r18, 0x80	; 128
 706:	02 c0       	rjmp	.+4      	; 0x70c <vfprintf+0xf0>
 708:	88 36       	cpi	r24, 0x68	; 104
 70a:	41 f4       	brne	.+16     	; 0x71c <vfprintf+0x100>
 70c:	f6 01       	movw	r30, r12
 70e:	93 fd       	sbrc	r25, 3
 710:	85 91       	lpm	r24, Z+
 712:	93 ff       	sbrs	r25, 3
 714:	81 91       	ld	r24, Z+
 716:	6f 01       	movw	r12, r30
 718:	81 11       	cpse	r24, r1
 71a:	c1 cf       	rjmp	.-126    	; 0x69e <vfprintf+0x82>
 71c:	98 2f       	mov	r25, r24
 71e:	9f 7d       	andi	r25, 0xDF	; 223
 720:	95 54       	subi	r25, 0x45	; 69
 722:	93 30       	cpi	r25, 0x03	; 3
 724:	28 f4       	brcc	.+10     	; 0x730 <vfprintf+0x114>
 726:	0c 5f       	subi	r16, 0xFC	; 252
 728:	1f 4f       	sbci	r17, 0xFF	; 255
 72a:	ff e3       	ldi	r31, 0x3F	; 63
 72c:	f9 83       	std	Y+1, r31	; 0x01
 72e:	0d c0       	rjmp	.+26     	; 0x74a <vfprintf+0x12e>
 730:	83 36       	cpi	r24, 0x63	; 99
 732:	31 f0       	breq	.+12     	; 0x740 <vfprintf+0x124>
 734:	83 37       	cpi	r24, 0x73	; 115
 736:	71 f0       	breq	.+28     	; 0x754 <vfprintf+0x138>
 738:	83 35       	cpi	r24, 0x53	; 83
 73a:	09 f0       	breq	.+2      	; 0x73e <vfprintf+0x122>
 73c:	57 c0       	rjmp	.+174    	; 0x7ec <vfprintf+0x1d0>
 73e:	21 c0       	rjmp	.+66     	; 0x782 <vfprintf+0x166>
 740:	f8 01       	movw	r30, r16
 742:	80 81       	ld	r24, Z
 744:	89 83       	std	Y+1, r24	; 0x01
 746:	0e 5f       	subi	r16, 0xFE	; 254
 748:	1f 4f       	sbci	r17, 0xFF	; 255
 74a:	44 24       	eor	r4, r4
 74c:	43 94       	inc	r4
 74e:	51 2c       	mov	r5, r1
 750:	54 01       	movw	r10, r8
 752:	14 c0       	rjmp	.+40     	; 0x77c <vfprintf+0x160>
 754:	38 01       	movw	r6, r16
 756:	f2 e0       	ldi	r31, 0x02	; 2
 758:	6f 0e       	add	r6, r31
 75a:	71 1c       	adc	r7, r1
 75c:	f8 01       	movw	r30, r16
 75e:	a0 80       	ld	r10, Z
 760:	b1 80       	ldd	r11, Z+1	; 0x01
 762:	26 ff       	sbrs	r18, 6
 764:	03 c0       	rjmp	.+6      	; 0x76c <vfprintf+0x150>
 766:	65 2d       	mov	r22, r5
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <vfprintf+0x154>
 76c:	6f ef       	ldi	r22, 0xFF	; 255
 76e:	7f ef       	ldi	r23, 0xFF	; 255
 770:	c5 01       	movw	r24, r10
 772:	2c 87       	std	Y+12, r18	; 0x0c
 774:	9a d2       	rcall	.+1332   	; 0xcaa <strnlen>
 776:	2c 01       	movw	r4, r24
 778:	83 01       	movw	r16, r6
 77a:	2c 85       	ldd	r18, Y+12	; 0x0c
 77c:	2f 77       	andi	r18, 0x7F	; 127
 77e:	22 2e       	mov	r2, r18
 780:	16 c0       	rjmp	.+44     	; 0x7ae <vfprintf+0x192>
 782:	38 01       	movw	r6, r16
 784:	f2 e0       	ldi	r31, 0x02	; 2
 786:	6f 0e       	add	r6, r31
 788:	71 1c       	adc	r7, r1
 78a:	f8 01       	movw	r30, r16
 78c:	a0 80       	ld	r10, Z
 78e:	b1 80       	ldd	r11, Z+1	; 0x01
 790:	26 ff       	sbrs	r18, 6
 792:	03 c0       	rjmp	.+6      	; 0x79a <vfprintf+0x17e>
 794:	65 2d       	mov	r22, r5
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <vfprintf+0x182>
 79a:	6f ef       	ldi	r22, 0xFF	; 255
 79c:	7f ef       	ldi	r23, 0xFF	; 255
 79e:	c5 01       	movw	r24, r10
 7a0:	2c 87       	std	Y+12, r18	; 0x0c
 7a2:	71 d2       	rcall	.+1250   	; 0xc86 <strnlen_P>
 7a4:	2c 01       	movw	r4, r24
 7a6:	2c 85       	ldd	r18, Y+12	; 0x0c
 7a8:	20 68       	ori	r18, 0x80	; 128
 7aa:	22 2e       	mov	r2, r18
 7ac:	83 01       	movw	r16, r6
 7ae:	23 fc       	sbrc	r2, 3
 7b0:	19 c0       	rjmp	.+50     	; 0x7e4 <vfprintf+0x1c8>
 7b2:	83 2d       	mov	r24, r3
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	48 16       	cp	r4, r24
 7b8:	59 06       	cpc	r5, r25
 7ba:	a0 f4       	brcc	.+40     	; 0x7e4 <vfprintf+0x1c8>
 7bc:	b7 01       	movw	r22, r14
 7be:	80 e2       	ldi	r24, 0x20	; 32
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	7e d2       	rcall	.+1276   	; 0xcc0 <fputc>
 7c4:	3a 94       	dec	r3
 7c6:	f5 cf       	rjmp	.-22     	; 0x7b2 <vfprintf+0x196>
 7c8:	f5 01       	movw	r30, r10
 7ca:	27 fc       	sbrc	r2, 7
 7cc:	85 91       	lpm	r24, Z+
 7ce:	27 fe       	sbrs	r2, 7
 7d0:	81 91       	ld	r24, Z+
 7d2:	5f 01       	movw	r10, r30
 7d4:	b7 01       	movw	r22, r14
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	73 d2       	rcall	.+1254   	; 0xcc0 <fputc>
 7da:	31 10       	cpse	r3, r1
 7dc:	3a 94       	dec	r3
 7de:	f1 e0       	ldi	r31, 0x01	; 1
 7e0:	4f 1a       	sub	r4, r31
 7e2:	51 08       	sbc	r5, r1
 7e4:	41 14       	cp	r4, r1
 7e6:	51 04       	cpc	r5, r1
 7e8:	79 f7       	brne	.-34     	; 0x7c8 <vfprintf+0x1ac>
 7ea:	de c0       	rjmp	.+444    	; 0x9a8 <vfprintf+0x38c>
 7ec:	84 36       	cpi	r24, 0x64	; 100
 7ee:	11 f0       	breq	.+4      	; 0x7f4 <vfprintf+0x1d8>
 7f0:	89 36       	cpi	r24, 0x69	; 105
 7f2:	31 f5       	brne	.+76     	; 0x840 <vfprintf+0x224>
 7f4:	f8 01       	movw	r30, r16
 7f6:	27 ff       	sbrs	r18, 7
 7f8:	07 c0       	rjmp	.+14     	; 0x808 <vfprintf+0x1ec>
 7fa:	60 81       	ld	r22, Z
 7fc:	71 81       	ldd	r23, Z+1	; 0x01
 7fe:	82 81       	ldd	r24, Z+2	; 0x02
 800:	93 81       	ldd	r25, Z+3	; 0x03
 802:	0c 5f       	subi	r16, 0xFC	; 252
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	08 c0       	rjmp	.+16     	; 0x818 <vfprintf+0x1fc>
 808:	60 81       	ld	r22, Z
 80a:	71 81       	ldd	r23, Z+1	; 0x01
 80c:	07 2e       	mov	r0, r23
 80e:	00 0c       	add	r0, r0
 810:	88 0b       	sbc	r24, r24
 812:	99 0b       	sbc	r25, r25
 814:	0e 5f       	subi	r16, 0xFE	; 254
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	2f 76       	andi	r18, 0x6F	; 111
 81a:	72 2e       	mov	r7, r18
 81c:	97 ff       	sbrs	r25, 7
 81e:	09 c0       	rjmp	.+18     	; 0x832 <vfprintf+0x216>
 820:	90 95       	com	r25
 822:	80 95       	com	r24
 824:	70 95       	com	r23
 826:	61 95       	neg	r22
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	20 68       	ori	r18, 0x80	; 128
 830:	72 2e       	mov	r7, r18
 832:	2a e0       	ldi	r18, 0x0A	; 10
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	a4 01       	movw	r20, r8
 838:	7b d2       	rcall	.+1270   	; 0xd30 <__ultoa_invert>
 83a:	a8 2e       	mov	r10, r24
 83c:	a8 18       	sub	r10, r8
 83e:	43 c0       	rjmp	.+134    	; 0x8c6 <vfprintf+0x2aa>
 840:	85 37       	cpi	r24, 0x75	; 117
 842:	29 f4       	brne	.+10     	; 0x84e <vfprintf+0x232>
 844:	2f 7e       	andi	r18, 0xEF	; 239
 846:	b2 2e       	mov	r11, r18
 848:	2a e0       	ldi	r18, 0x0A	; 10
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	25 c0       	rjmp	.+74     	; 0x898 <vfprintf+0x27c>
 84e:	f2 2f       	mov	r31, r18
 850:	f9 7f       	andi	r31, 0xF9	; 249
 852:	bf 2e       	mov	r11, r31
 854:	8f 36       	cpi	r24, 0x6F	; 111
 856:	c1 f0       	breq	.+48     	; 0x888 <vfprintf+0x26c>
 858:	18 f4       	brcc	.+6      	; 0x860 <vfprintf+0x244>
 85a:	88 35       	cpi	r24, 0x58	; 88
 85c:	79 f0       	breq	.+30     	; 0x87c <vfprintf+0x260>
 85e:	ad c0       	rjmp	.+346    	; 0x9ba <vfprintf+0x39e>
 860:	80 37       	cpi	r24, 0x70	; 112
 862:	19 f0       	breq	.+6      	; 0x86a <vfprintf+0x24e>
 864:	88 37       	cpi	r24, 0x78	; 120
 866:	21 f0       	breq	.+8      	; 0x870 <vfprintf+0x254>
 868:	a8 c0       	rjmp	.+336    	; 0x9ba <vfprintf+0x39e>
 86a:	2f 2f       	mov	r18, r31
 86c:	20 61       	ori	r18, 0x10	; 16
 86e:	b2 2e       	mov	r11, r18
 870:	b4 fe       	sbrs	r11, 4
 872:	0d c0       	rjmp	.+26     	; 0x88e <vfprintf+0x272>
 874:	8b 2d       	mov	r24, r11
 876:	84 60       	ori	r24, 0x04	; 4
 878:	b8 2e       	mov	r11, r24
 87a:	09 c0       	rjmp	.+18     	; 0x88e <vfprintf+0x272>
 87c:	24 ff       	sbrs	r18, 4
 87e:	0a c0       	rjmp	.+20     	; 0x894 <vfprintf+0x278>
 880:	9f 2f       	mov	r25, r31
 882:	96 60       	ori	r25, 0x06	; 6
 884:	b9 2e       	mov	r11, r25
 886:	06 c0       	rjmp	.+12     	; 0x894 <vfprintf+0x278>
 888:	28 e0       	ldi	r18, 0x08	; 8
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	05 c0       	rjmp	.+10     	; 0x898 <vfprintf+0x27c>
 88e:	20 e1       	ldi	r18, 0x10	; 16
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	02 c0       	rjmp	.+4      	; 0x898 <vfprintf+0x27c>
 894:	20 e1       	ldi	r18, 0x10	; 16
 896:	32 e0       	ldi	r19, 0x02	; 2
 898:	f8 01       	movw	r30, r16
 89a:	b7 fe       	sbrs	r11, 7
 89c:	07 c0       	rjmp	.+14     	; 0x8ac <vfprintf+0x290>
 89e:	60 81       	ld	r22, Z
 8a0:	71 81       	ldd	r23, Z+1	; 0x01
 8a2:	82 81       	ldd	r24, Z+2	; 0x02
 8a4:	93 81       	ldd	r25, Z+3	; 0x03
 8a6:	0c 5f       	subi	r16, 0xFC	; 252
 8a8:	1f 4f       	sbci	r17, 0xFF	; 255
 8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <vfprintf+0x29c>
 8ac:	60 81       	ld	r22, Z
 8ae:	71 81       	ldd	r23, Z+1	; 0x01
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 5f       	subi	r16, 0xFE	; 254
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	a4 01       	movw	r20, r8
 8ba:	3a d2       	rcall	.+1140   	; 0xd30 <__ultoa_invert>
 8bc:	a8 2e       	mov	r10, r24
 8be:	a8 18       	sub	r10, r8
 8c0:	fb 2d       	mov	r31, r11
 8c2:	ff 77       	andi	r31, 0x7F	; 127
 8c4:	7f 2e       	mov	r7, r31
 8c6:	76 fe       	sbrs	r7, 6
 8c8:	0b c0       	rjmp	.+22     	; 0x8e0 <vfprintf+0x2c4>
 8ca:	37 2d       	mov	r19, r7
 8cc:	3e 7f       	andi	r19, 0xFE	; 254
 8ce:	a5 14       	cp	r10, r5
 8d0:	50 f4       	brcc	.+20     	; 0x8e6 <vfprintf+0x2ca>
 8d2:	74 fe       	sbrs	r7, 4
 8d4:	0a c0       	rjmp	.+20     	; 0x8ea <vfprintf+0x2ce>
 8d6:	72 fc       	sbrc	r7, 2
 8d8:	08 c0       	rjmp	.+16     	; 0x8ea <vfprintf+0x2ce>
 8da:	37 2d       	mov	r19, r7
 8dc:	3e 7e       	andi	r19, 0xEE	; 238
 8de:	05 c0       	rjmp	.+10     	; 0x8ea <vfprintf+0x2ce>
 8e0:	ba 2c       	mov	r11, r10
 8e2:	37 2d       	mov	r19, r7
 8e4:	03 c0       	rjmp	.+6      	; 0x8ec <vfprintf+0x2d0>
 8e6:	ba 2c       	mov	r11, r10
 8e8:	01 c0       	rjmp	.+2      	; 0x8ec <vfprintf+0x2d0>
 8ea:	b5 2c       	mov	r11, r5
 8ec:	34 ff       	sbrs	r19, 4
 8ee:	0d c0       	rjmp	.+26     	; 0x90a <vfprintf+0x2ee>
 8f0:	fe 01       	movw	r30, r28
 8f2:	ea 0d       	add	r30, r10
 8f4:	f1 1d       	adc	r31, r1
 8f6:	80 81       	ld	r24, Z
 8f8:	80 33       	cpi	r24, 0x30	; 48
 8fa:	11 f4       	brne	.+4      	; 0x900 <vfprintf+0x2e4>
 8fc:	39 7e       	andi	r19, 0xE9	; 233
 8fe:	09 c0       	rjmp	.+18     	; 0x912 <vfprintf+0x2f6>
 900:	32 ff       	sbrs	r19, 2
 902:	06 c0       	rjmp	.+12     	; 0x910 <vfprintf+0x2f4>
 904:	b3 94       	inc	r11
 906:	b3 94       	inc	r11
 908:	04 c0       	rjmp	.+8      	; 0x912 <vfprintf+0x2f6>
 90a:	83 2f       	mov	r24, r19
 90c:	86 78       	andi	r24, 0x86	; 134
 90e:	09 f0       	breq	.+2      	; 0x912 <vfprintf+0x2f6>
 910:	b3 94       	inc	r11
 912:	33 fd       	sbrc	r19, 3
 914:	12 c0       	rjmp	.+36     	; 0x93a <vfprintf+0x31e>
 916:	30 ff       	sbrs	r19, 0
 918:	06 c0       	rjmp	.+12     	; 0x926 <vfprintf+0x30a>
 91a:	5a 2c       	mov	r5, r10
 91c:	b3 14       	cp	r11, r3
 91e:	18 f4       	brcc	.+6      	; 0x926 <vfprintf+0x30a>
 920:	53 0c       	add	r5, r3
 922:	5b 18       	sub	r5, r11
 924:	b3 2c       	mov	r11, r3
 926:	b3 14       	cp	r11, r3
 928:	60 f4       	brcc	.+24     	; 0x942 <vfprintf+0x326>
 92a:	b7 01       	movw	r22, r14
 92c:	80 e2       	ldi	r24, 0x20	; 32
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	3c 87       	std	Y+12, r19	; 0x0c
 932:	c6 d1       	rcall	.+908    	; 0xcc0 <fputc>
 934:	b3 94       	inc	r11
 936:	3c 85       	ldd	r19, Y+12	; 0x0c
 938:	f6 cf       	rjmp	.-20     	; 0x926 <vfprintf+0x30a>
 93a:	b3 14       	cp	r11, r3
 93c:	10 f4       	brcc	.+4      	; 0x942 <vfprintf+0x326>
 93e:	3b 18       	sub	r3, r11
 940:	01 c0       	rjmp	.+2      	; 0x944 <vfprintf+0x328>
 942:	31 2c       	mov	r3, r1
 944:	34 ff       	sbrs	r19, 4
 946:	11 c0       	rjmp	.+34     	; 0x96a <vfprintf+0x34e>
 948:	b7 01       	movw	r22, r14
 94a:	80 e3       	ldi	r24, 0x30	; 48
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	3c 87       	std	Y+12, r19	; 0x0c
 950:	b7 d1       	rcall	.+878    	; 0xcc0 <fputc>
 952:	3c 85       	ldd	r19, Y+12	; 0x0c
 954:	32 ff       	sbrs	r19, 2
 956:	16 c0       	rjmp	.+44     	; 0x984 <vfprintf+0x368>
 958:	31 fd       	sbrc	r19, 1
 95a:	03 c0       	rjmp	.+6      	; 0x962 <vfprintf+0x346>
 95c:	88 e7       	ldi	r24, 0x78	; 120
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	02 c0       	rjmp	.+4      	; 0x966 <vfprintf+0x34a>
 962:	88 e5       	ldi	r24, 0x58	; 88
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	b7 01       	movw	r22, r14
 968:	0c c0       	rjmp	.+24     	; 0x982 <vfprintf+0x366>
 96a:	83 2f       	mov	r24, r19
 96c:	86 78       	andi	r24, 0x86	; 134
 96e:	51 f0       	breq	.+20     	; 0x984 <vfprintf+0x368>
 970:	31 ff       	sbrs	r19, 1
 972:	02 c0       	rjmp	.+4      	; 0x978 <vfprintf+0x35c>
 974:	8b e2       	ldi	r24, 0x2B	; 43
 976:	01 c0       	rjmp	.+2      	; 0x97a <vfprintf+0x35e>
 978:	80 e2       	ldi	r24, 0x20	; 32
 97a:	37 fd       	sbrc	r19, 7
 97c:	8d e2       	ldi	r24, 0x2D	; 45
 97e:	b7 01       	movw	r22, r14
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	9e d1       	rcall	.+828    	; 0xcc0 <fputc>
 984:	a5 14       	cp	r10, r5
 986:	30 f4       	brcc	.+12     	; 0x994 <vfprintf+0x378>
 988:	b7 01       	movw	r22, r14
 98a:	80 e3       	ldi	r24, 0x30	; 48
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	98 d1       	rcall	.+816    	; 0xcc0 <fputc>
 990:	5a 94       	dec	r5
 992:	f8 cf       	rjmp	.-16     	; 0x984 <vfprintf+0x368>
 994:	aa 94       	dec	r10
 996:	f4 01       	movw	r30, r8
 998:	ea 0d       	add	r30, r10
 99a:	f1 1d       	adc	r31, r1
 99c:	80 81       	ld	r24, Z
 99e:	b7 01       	movw	r22, r14
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	8e d1       	rcall	.+796    	; 0xcc0 <fputc>
 9a4:	a1 10       	cpse	r10, r1
 9a6:	f6 cf       	rjmp	.-20     	; 0x994 <vfprintf+0x378>
 9a8:	33 20       	and	r3, r3
 9aa:	09 f4       	brne	.+2      	; 0x9ae <vfprintf+0x392>
 9ac:	5d ce       	rjmp	.-838    	; 0x668 <vfprintf+0x4c>
 9ae:	b7 01       	movw	r22, r14
 9b0:	80 e2       	ldi	r24, 0x20	; 32
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	85 d1       	rcall	.+778    	; 0xcc0 <fputc>
 9b6:	3a 94       	dec	r3
 9b8:	f7 cf       	rjmp	.-18     	; 0x9a8 <vfprintf+0x38c>
 9ba:	f7 01       	movw	r30, r14
 9bc:	86 81       	ldd	r24, Z+6	; 0x06
 9be:	97 81       	ldd	r25, Z+7	; 0x07
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <vfprintf+0x3aa>
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	9f ef       	ldi	r25, 0xFF	; 255
 9c6:	2c 96       	adiw	r28, 0x0c	; 12
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	1f 91       	pop	r17
 9d8:	0f 91       	pop	r16
 9da:	ff 90       	pop	r15
 9dc:	ef 90       	pop	r14
 9de:	df 90       	pop	r13
 9e0:	cf 90       	pop	r12
 9e2:	bf 90       	pop	r11
 9e4:	af 90       	pop	r10
 9e6:	9f 90       	pop	r9
 9e8:	8f 90       	pop	r8
 9ea:	7f 90       	pop	r7
 9ec:	6f 90       	pop	r6
 9ee:	5f 90       	pop	r5
 9f0:	4f 90       	pop	r4
 9f2:	3f 90       	pop	r3
 9f4:	2f 90       	pop	r2
 9f6:	08 95       	ret

000009f8 <calloc>:
 9f8:	0f 93       	push	r16
 9fa:	1f 93       	push	r17
 9fc:	cf 93       	push	r28
 9fe:	df 93       	push	r29
 a00:	86 9f       	mul	r24, r22
 a02:	80 01       	movw	r16, r0
 a04:	87 9f       	mul	r24, r23
 a06:	10 0d       	add	r17, r0
 a08:	96 9f       	mul	r25, r22
 a0a:	10 0d       	add	r17, r0
 a0c:	11 24       	eor	r1, r1
 a0e:	c8 01       	movw	r24, r16
 a10:	0d d0       	rcall	.+26     	; 0xa2c <malloc>
 a12:	ec 01       	movw	r28, r24
 a14:	00 97       	sbiw	r24, 0x00	; 0
 a16:	21 f0       	breq	.+8      	; 0xa20 <calloc+0x28>
 a18:	a8 01       	movw	r20, r16
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	3e d1       	rcall	.+636    	; 0xc9c <memset>
 a20:	ce 01       	movw	r24, r28
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	1f 91       	pop	r17
 a28:	0f 91       	pop	r16
 a2a:	08 95       	ret

00000a2c <malloc>:
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	82 30       	cpi	r24, 0x02	; 2
 a32:	91 05       	cpc	r25, r1
 a34:	10 f4       	brcc	.+4      	; 0xa3a <malloc+0xe>
 a36:	82 e0       	ldi	r24, 0x02	; 2
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	e0 91 67 01 	lds	r30, 0x0167
 a3e:	f0 91 68 01 	lds	r31, 0x0168
 a42:	20 e0       	ldi	r18, 0x00	; 0
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	c0 e0       	ldi	r28, 0x00	; 0
 a48:	d0 e0       	ldi	r29, 0x00	; 0
 a4a:	30 97       	sbiw	r30, 0x00	; 0
 a4c:	11 f1       	breq	.+68     	; 0xa92 <malloc+0x66>
 a4e:	40 81       	ld	r20, Z
 a50:	51 81       	ldd	r21, Z+1	; 0x01
 a52:	48 17       	cp	r20, r24
 a54:	59 07       	cpc	r21, r25
 a56:	c0 f0       	brcs	.+48     	; 0xa88 <malloc+0x5c>
 a58:	48 17       	cp	r20, r24
 a5a:	59 07       	cpc	r21, r25
 a5c:	61 f4       	brne	.+24     	; 0xa76 <malloc+0x4a>
 a5e:	82 81       	ldd	r24, Z+2	; 0x02
 a60:	93 81       	ldd	r25, Z+3	; 0x03
 a62:	20 97       	sbiw	r28, 0x00	; 0
 a64:	19 f0       	breq	.+6      	; 0xa6c <malloc+0x40>
 a66:	9b 83       	std	Y+3, r25	; 0x03
 a68:	8a 83       	std	Y+2, r24	; 0x02
 a6a:	2b c0       	rjmp	.+86     	; 0xac2 <malloc+0x96>
 a6c:	90 93 68 01 	sts	0x0168, r25
 a70:	80 93 67 01 	sts	0x0167, r24
 a74:	26 c0       	rjmp	.+76     	; 0xac2 <malloc+0x96>
 a76:	21 15       	cp	r18, r1
 a78:	31 05       	cpc	r19, r1
 a7a:	19 f0       	breq	.+6      	; 0xa82 <malloc+0x56>
 a7c:	42 17       	cp	r20, r18
 a7e:	53 07       	cpc	r21, r19
 a80:	18 f4       	brcc	.+6      	; 0xa88 <malloc+0x5c>
 a82:	9a 01       	movw	r18, r20
 a84:	be 01       	movw	r22, r28
 a86:	df 01       	movw	r26, r30
 a88:	ef 01       	movw	r28, r30
 a8a:	02 80       	ldd	r0, Z+2	; 0x02
 a8c:	f3 81       	ldd	r31, Z+3	; 0x03
 a8e:	e0 2d       	mov	r30, r0
 a90:	dc cf       	rjmp	.-72     	; 0xa4a <malloc+0x1e>
 a92:	21 15       	cp	r18, r1
 a94:	31 05       	cpc	r19, r1
 a96:	09 f1       	breq	.+66     	; 0xada <malloc+0xae>
 a98:	28 1b       	sub	r18, r24
 a9a:	39 0b       	sbc	r19, r25
 a9c:	24 30       	cpi	r18, 0x04	; 4
 a9e:	31 05       	cpc	r19, r1
 aa0:	90 f4       	brcc	.+36     	; 0xac6 <malloc+0x9a>
 aa2:	12 96       	adiw	r26, 0x02	; 2
 aa4:	8d 91       	ld	r24, X+
 aa6:	9c 91       	ld	r25, X
 aa8:	13 97       	sbiw	r26, 0x03	; 3
 aaa:	61 15       	cp	r22, r1
 aac:	71 05       	cpc	r23, r1
 aae:	21 f0       	breq	.+8      	; 0xab8 <malloc+0x8c>
 ab0:	fb 01       	movw	r30, r22
 ab2:	93 83       	std	Z+3, r25	; 0x03
 ab4:	82 83       	std	Z+2, r24	; 0x02
 ab6:	04 c0       	rjmp	.+8      	; 0xac0 <malloc+0x94>
 ab8:	90 93 68 01 	sts	0x0168, r25
 abc:	80 93 67 01 	sts	0x0167, r24
 ac0:	fd 01       	movw	r30, r26
 ac2:	32 96       	adiw	r30, 0x02	; 2
 ac4:	44 c0       	rjmp	.+136    	; 0xb4e <malloc+0x122>
 ac6:	fd 01       	movw	r30, r26
 ac8:	e2 0f       	add	r30, r18
 aca:	f3 1f       	adc	r31, r19
 acc:	81 93       	st	Z+, r24
 ace:	91 93       	st	Z+, r25
 ad0:	22 50       	subi	r18, 0x02	; 2
 ad2:	31 09       	sbc	r19, r1
 ad4:	2d 93       	st	X+, r18
 ad6:	3c 93       	st	X, r19
 ad8:	3a c0       	rjmp	.+116    	; 0xb4e <malloc+0x122>
 ada:	20 91 65 01 	lds	r18, 0x0165
 ade:	30 91 66 01 	lds	r19, 0x0166
 ae2:	23 2b       	or	r18, r19
 ae4:	41 f4       	brne	.+16     	; 0xaf6 <malloc+0xca>
 ae6:	20 91 02 01 	lds	r18, 0x0102
 aea:	30 91 03 01 	lds	r19, 0x0103
 aee:	30 93 66 01 	sts	0x0166, r19
 af2:	20 93 65 01 	sts	0x0165, r18
 af6:	20 91 00 01 	lds	r18, 0x0100
 afa:	30 91 01 01 	lds	r19, 0x0101
 afe:	21 15       	cp	r18, r1
 b00:	31 05       	cpc	r19, r1
 b02:	41 f4       	brne	.+16     	; 0xb14 <malloc+0xe8>
 b04:	2d b7       	in	r18, 0x3d	; 61
 b06:	3e b7       	in	r19, 0x3e	; 62
 b08:	40 91 04 01 	lds	r20, 0x0104
 b0c:	50 91 05 01 	lds	r21, 0x0105
 b10:	24 1b       	sub	r18, r20
 b12:	35 0b       	sbc	r19, r21
 b14:	e0 91 65 01 	lds	r30, 0x0165
 b18:	f0 91 66 01 	lds	r31, 0x0166
 b1c:	e2 17       	cp	r30, r18
 b1e:	f3 07       	cpc	r31, r19
 b20:	a0 f4       	brcc	.+40     	; 0xb4a <malloc+0x11e>
 b22:	2e 1b       	sub	r18, r30
 b24:	3f 0b       	sbc	r19, r31
 b26:	28 17       	cp	r18, r24
 b28:	39 07       	cpc	r19, r25
 b2a:	78 f0       	brcs	.+30     	; 0xb4a <malloc+0x11e>
 b2c:	ac 01       	movw	r20, r24
 b2e:	4e 5f       	subi	r20, 0xFE	; 254
 b30:	5f 4f       	sbci	r21, 0xFF	; 255
 b32:	24 17       	cp	r18, r20
 b34:	35 07       	cpc	r19, r21
 b36:	48 f0       	brcs	.+18     	; 0xb4a <malloc+0x11e>
 b38:	4e 0f       	add	r20, r30
 b3a:	5f 1f       	adc	r21, r31
 b3c:	50 93 66 01 	sts	0x0166, r21
 b40:	40 93 65 01 	sts	0x0165, r20
 b44:	81 93       	st	Z+, r24
 b46:	91 93       	st	Z+, r25
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <malloc+0x122>
 b4a:	e0 e0       	ldi	r30, 0x00	; 0
 b4c:	f0 e0       	ldi	r31, 0x00	; 0
 b4e:	cf 01       	movw	r24, r30
 b50:	df 91       	pop	r29
 b52:	cf 91       	pop	r28
 b54:	08 95       	ret

00000b56 <free>:
 b56:	0f 93       	push	r16
 b58:	1f 93       	push	r17
 b5a:	cf 93       	push	r28
 b5c:	df 93       	push	r29
 b5e:	00 97       	sbiw	r24, 0x00	; 0
 b60:	09 f4       	brne	.+2      	; 0xb64 <free+0xe>
 b62:	8c c0       	rjmp	.+280    	; 0xc7c <free+0x126>
 b64:	fc 01       	movw	r30, r24
 b66:	32 97       	sbiw	r30, 0x02	; 2
 b68:	13 82       	std	Z+3, r1	; 0x03
 b6a:	12 82       	std	Z+2, r1	; 0x02
 b6c:	00 91 67 01 	lds	r16, 0x0167
 b70:	10 91 68 01 	lds	r17, 0x0168
 b74:	01 15       	cp	r16, r1
 b76:	11 05       	cpc	r17, r1
 b78:	81 f4       	brne	.+32     	; 0xb9a <free+0x44>
 b7a:	20 81       	ld	r18, Z
 b7c:	31 81       	ldd	r19, Z+1	; 0x01
 b7e:	82 0f       	add	r24, r18
 b80:	93 1f       	adc	r25, r19
 b82:	20 91 65 01 	lds	r18, 0x0165
 b86:	30 91 66 01 	lds	r19, 0x0166
 b8a:	28 17       	cp	r18, r24
 b8c:	39 07       	cpc	r19, r25
 b8e:	79 f5       	brne	.+94     	; 0xbee <free+0x98>
 b90:	f0 93 66 01 	sts	0x0166, r31
 b94:	e0 93 65 01 	sts	0x0165, r30
 b98:	71 c0       	rjmp	.+226    	; 0xc7c <free+0x126>
 b9a:	d8 01       	movw	r26, r16
 b9c:	40 e0       	ldi	r20, 0x00	; 0
 b9e:	50 e0       	ldi	r21, 0x00	; 0
 ba0:	ae 17       	cp	r26, r30
 ba2:	bf 07       	cpc	r27, r31
 ba4:	50 f4       	brcc	.+20     	; 0xbba <free+0x64>
 ba6:	12 96       	adiw	r26, 0x02	; 2
 ba8:	2d 91       	ld	r18, X+
 baa:	3c 91       	ld	r19, X
 bac:	13 97       	sbiw	r26, 0x03	; 3
 bae:	ad 01       	movw	r20, r26
 bb0:	21 15       	cp	r18, r1
 bb2:	31 05       	cpc	r19, r1
 bb4:	09 f1       	breq	.+66     	; 0xbf8 <free+0xa2>
 bb6:	d9 01       	movw	r26, r18
 bb8:	f3 cf       	rjmp	.-26     	; 0xba0 <free+0x4a>
 bba:	9d 01       	movw	r18, r26
 bbc:	da 01       	movw	r26, r20
 bbe:	33 83       	std	Z+3, r19	; 0x03
 bc0:	22 83       	std	Z+2, r18	; 0x02
 bc2:	60 81       	ld	r22, Z
 bc4:	71 81       	ldd	r23, Z+1	; 0x01
 bc6:	86 0f       	add	r24, r22
 bc8:	97 1f       	adc	r25, r23
 bca:	82 17       	cp	r24, r18
 bcc:	93 07       	cpc	r25, r19
 bce:	69 f4       	brne	.+26     	; 0xbea <free+0x94>
 bd0:	ec 01       	movw	r28, r24
 bd2:	28 81       	ld	r18, Y
 bd4:	39 81       	ldd	r19, Y+1	; 0x01
 bd6:	26 0f       	add	r18, r22
 bd8:	37 1f       	adc	r19, r23
 bda:	2e 5f       	subi	r18, 0xFE	; 254
 bdc:	3f 4f       	sbci	r19, 0xFF	; 255
 bde:	31 83       	std	Z+1, r19	; 0x01
 be0:	20 83       	st	Z, r18
 be2:	8a 81       	ldd	r24, Y+2	; 0x02
 be4:	9b 81       	ldd	r25, Y+3	; 0x03
 be6:	93 83       	std	Z+3, r25	; 0x03
 be8:	82 83       	std	Z+2, r24	; 0x02
 bea:	45 2b       	or	r20, r21
 bec:	29 f4       	brne	.+10     	; 0xbf8 <free+0xa2>
 bee:	f0 93 68 01 	sts	0x0168, r31
 bf2:	e0 93 67 01 	sts	0x0167, r30
 bf6:	42 c0       	rjmp	.+132    	; 0xc7c <free+0x126>
 bf8:	13 96       	adiw	r26, 0x03	; 3
 bfa:	fc 93       	st	X, r31
 bfc:	ee 93       	st	-X, r30
 bfe:	12 97       	sbiw	r26, 0x02	; 2
 c00:	ed 01       	movw	r28, r26
 c02:	49 91       	ld	r20, Y+
 c04:	59 91       	ld	r21, Y+
 c06:	9e 01       	movw	r18, r28
 c08:	24 0f       	add	r18, r20
 c0a:	35 1f       	adc	r19, r21
 c0c:	e2 17       	cp	r30, r18
 c0e:	f3 07       	cpc	r31, r19
 c10:	71 f4       	brne	.+28     	; 0xc2e <free+0xd8>
 c12:	80 81       	ld	r24, Z
 c14:	91 81       	ldd	r25, Z+1	; 0x01
 c16:	84 0f       	add	r24, r20
 c18:	95 1f       	adc	r25, r21
 c1a:	02 96       	adiw	r24, 0x02	; 2
 c1c:	11 96       	adiw	r26, 0x01	; 1
 c1e:	9c 93       	st	X, r25
 c20:	8e 93       	st	-X, r24
 c22:	82 81       	ldd	r24, Z+2	; 0x02
 c24:	93 81       	ldd	r25, Z+3	; 0x03
 c26:	13 96       	adiw	r26, 0x03	; 3
 c28:	9c 93       	st	X, r25
 c2a:	8e 93       	st	-X, r24
 c2c:	12 97       	sbiw	r26, 0x02	; 2
 c2e:	e0 e0       	ldi	r30, 0x00	; 0
 c30:	f0 e0       	ldi	r31, 0x00	; 0
 c32:	d8 01       	movw	r26, r16
 c34:	12 96       	adiw	r26, 0x02	; 2
 c36:	8d 91       	ld	r24, X+
 c38:	9c 91       	ld	r25, X
 c3a:	13 97       	sbiw	r26, 0x03	; 3
 c3c:	00 97       	sbiw	r24, 0x00	; 0
 c3e:	19 f0       	breq	.+6      	; 0xc46 <free+0xf0>
 c40:	f8 01       	movw	r30, r16
 c42:	8c 01       	movw	r16, r24
 c44:	f6 cf       	rjmp	.-20     	; 0xc32 <free+0xdc>
 c46:	8d 91       	ld	r24, X+
 c48:	9c 91       	ld	r25, X
 c4a:	98 01       	movw	r18, r16
 c4c:	2e 5f       	subi	r18, 0xFE	; 254
 c4e:	3f 4f       	sbci	r19, 0xFF	; 255
 c50:	82 0f       	add	r24, r18
 c52:	93 1f       	adc	r25, r19
 c54:	20 91 65 01 	lds	r18, 0x0165
 c58:	30 91 66 01 	lds	r19, 0x0166
 c5c:	28 17       	cp	r18, r24
 c5e:	39 07       	cpc	r19, r25
 c60:	69 f4       	brne	.+26     	; 0xc7c <free+0x126>
 c62:	30 97       	sbiw	r30, 0x00	; 0
 c64:	29 f4       	brne	.+10     	; 0xc70 <free+0x11a>
 c66:	10 92 68 01 	sts	0x0168, r1
 c6a:	10 92 67 01 	sts	0x0167, r1
 c6e:	02 c0       	rjmp	.+4      	; 0xc74 <free+0x11e>
 c70:	13 82       	std	Z+3, r1	; 0x03
 c72:	12 82       	std	Z+2, r1	; 0x02
 c74:	10 93 66 01 	sts	0x0166, r17
 c78:	00 93 65 01 	sts	0x0165, r16
 c7c:	df 91       	pop	r29
 c7e:	cf 91       	pop	r28
 c80:	1f 91       	pop	r17
 c82:	0f 91       	pop	r16
 c84:	08 95       	ret

00000c86 <strnlen_P>:
 c86:	fc 01       	movw	r30, r24
 c88:	05 90       	lpm	r0, Z+
 c8a:	61 50       	subi	r22, 0x01	; 1
 c8c:	70 40       	sbci	r23, 0x00	; 0
 c8e:	01 10       	cpse	r0, r1
 c90:	d8 f7       	brcc	.-10     	; 0xc88 <strnlen_P+0x2>
 c92:	80 95       	com	r24
 c94:	90 95       	com	r25
 c96:	8e 0f       	add	r24, r30
 c98:	9f 1f       	adc	r25, r31
 c9a:	08 95       	ret

00000c9c <memset>:
 c9c:	dc 01       	movw	r26, r24
 c9e:	01 c0       	rjmp	.+2      	; 0xca2 <memset+0x6>
 ca0:	6d 93       	st	X+, r22
 ca2:	41 50       	subi	r20, 0x01	; 1
 ca4:	50 40       	sbci	r21, 0x00	; 0
 ca6:	e0 f7       	brcc	.-8      	; 0xca0 <memset+0x4>
 ca8:	08 95       	ret

00000caa <strnlen>:
 caa:	fc 01       	movw	r30, r24
 cac:	61 50       	subi	r22, 0x01	; 1
 cae:	70 40       	sbci	r23, 0x00	; 0
 cb0:	01 90       	ld	r0, Z+
 cb2:	01 10       	cpse	r0, r1
 cb4:	d8 f7       	brcc	.-10     	; 0xcac <strnlen+0x2>
 cb6:	80 95       	com	r24
 cb8:	90 95       	com	r25
 cba:	8e 0f       	add	r24, r30
 cbc:	9f 1f       	adc	r25, r31
 cbe:	08 95       	ret

00000cc0 <fputc>:
 cc0:	0f 93       	push	r16
 cc2:	1f 93       	push	r17
 cc4:	cf 93       	push	r28
 cc6:	df 93       	push	r29
 cc8:	fb 01       	movw	r30, r22
 cca:	23 81       	ldd	r18, Z+3	; 0x03
 ccc:	21 fd       	sbrc	r18, 1
 cce:	03 c0       	rjmp	.+6      	; 0xcd6 <fputc+0x16>
 cd0:	8f ef       	ldi	r24, 0xFF	; 255
 cd2:	9f ef       	ldi	r25, 0xFF	; 255
 cd4:	28 c0       	rjmp	.+80     	; 0xd26 <fputc+0x66>
 cd6:	22 ff       	sbrs	r18, 2
 cd8:	16 c0       	rjmp	.+44     	; 0xd06 <fputc+0x46>
 cda:	46 81       	ldd	r20, Z+6	; 0x06
 cdc:	57 81       	ldd	r21, Z+7	; 0x07
 cde:	24 81       	ldd	r18, Z+4	; 0x04
 ce0:	35 81       	ldd	r19, Z+5	; 0x05
 ce2:	42 17       	cp	r20, r18
 ce4:	53 07       	cpc	r21, r19
 ce6:	44 f4       	brge	.+16     	; 0xcf8 <fputc+0x38>
 ce8:	a0 81       	ld	r26, Z
 cea:	b1 81       	ldd	r27, Z+1	; 0x01
 cec:	9d 01       	movw	r18, r26
 cee:	2f 5f       	subi	r18, 0xFF	; 255
 cf0:	3f 4f       	sbci	r19, 0xFF	; 255
 cf2:	31 83       	std	Z+1, r19	; 0x01
 cf4:	20 83       	st	Z, r18
 cf6:	8c 93       	st	X, r24
 cf8:	26 81       	ldd	r18, Z+6	; 0x06
 cfa:	37 81       	ldd	r19, Z+7	; 0x07
 cfc:	2f 5f       	subi	r18, 0xFF	; 255
 cfe:	3f 4f       	sbci	r19, 0xFF	; 255
 d00:	37 83       	std	Z+7, r19	; 0x07
 d02:	26 83       	std	Z+6, r18	; 0x06
 d04:	10 c0       	rjmp	.+32     	; 0xd26 <fputc+0x66>
 d06:	eb 01       	movw	r28, r22
 d08:	09 2f       	mov	r16, r25
 d0a:	18 2f       	mov	r17, r24
 d0c:	00 84       	ldd	r0, Z+8	; 0x08
 d0e:	f1 85       	ldd	r31, Z+9	; 0x09
 d10:	e0 2d       	mov	r30, r0
 d12:	09 95       	icall
 d14:	89 2b       	or	r24, r25
 d16:	e1 f6       	brne	.-72     	; 0xcd0 <fputc+0x10>
 d18:	8e 81       	ldd	r24, Y+6	; 0x06
 d1a:	9f 81       	ldd	r25, Y+7	; 0x07
 d1c:	01 96       	adiw	r24, 0x01	; 1
 d1e:	9f 83       	std	Y+7, r25	; 0x07
 d20:	8e 83       	std	Y+6, r24	; 0x06
 d22:	81 2f       	mov	r24, r17
 d24:	90 2f       	mov	r25, r16
 d26:	df 91       	pop	r29
 d28:	cf 91       	pop	r28
 d2a:	1f 91       	pop	r17
 d2c:	0f 91       	pop	r16
 d2e:	08 95       	ret

00000d30 <__ultoa_invert>:
 d30:	fa 01       	movw	r30, r20
 d32:	aa 27       	eor	r26, r26
 d34:	28 30       	cpi	r18, 0x08	; 8
 d36:	51 f1       	breq	.+84     	; 0xd8c <__ultoa_invert+0x5c>
 d38:	20 31       	cpi	r18, 0x10	; 16
 d3a:	81 f1       	breq	.+96     	; 0xd9c <__ultoa_invert+0x6c>
 d3c:	e8 94       	clt
 d3e:	6f 93       	push	r22
 d40:	6e 7f       	andi	r22, 0xFE	; 254
 d42:	6e 5f       	subi	r22, 0xFE	; 254
 d44:	7f 4f       	sbci	r23, 0xFF	; 255
 d46:	8f 4f       	sbci	r24, 0xFF	; 255
 d48:	9f 4f       	sbci	r25, 0xFF	; 255
 d4a:	af 4f       	sbci	r26, 0xFF	; 255
 d4c:	b1 e0       	ldi	r27, 0x01	; 1
 d4e:	3e d0       	rcall	.+124    	; 0xdcc <__ultoa_invert+0x9c>
 d50:	b4 e0       	ldi	r27, 0x04	; 4
 d52:	3c d0       	rcall	.+120    	; 0xdcc <__ultoa_invert+0x9c>
 d54:	67 0f       	add	r22, r23
 d56:	78 1f       	adc	r23, r24
 d58:	89 1f       	adc	r24, r25
 d5a:	9a 1f       	adc	r25, r26
 d5c:	a1 1d       	adc	r26, r1
 d5e:	68 0f       	add	r22, r24
 d60:	79 1f       	adc	r23, r25
 d62:	8a 1f       	adc	r24, r26
 d64:	91 1d       	adc	r25, r1
 d66:	a1 1d       	adc	r26, r1
 d68:	6a 0f       	add	r22, r26
 d6a:	71 1d       	adc	r23, r1
 d6c:	81 1d       	adc	r24, r1
 d6e:	91 1d       	adc	r25, r1
 d70:	a1 1d       	adc	r26, r1
 d72:	20 d0       	rcall	.+64     	; 0xdb4 <__ultoa_invert+0x84>
 d74:	09 f4       	brne	.+2      	; 0xd78 <__ultoa_invert+0x48>
 d76:	68 94       	set
 d78:	3f 91       	pop	r19
 d7a:	2a e0       	ldi	r18, 0x0A	; 10
 d7c:	26 9f       	mul	r18, r22
 d7e:	11 24       	eor	r1, r1
 d80:	30 19       	sub	r19, r0
 d82:	30 5d       	subi	r19, 0xD0	; 208
 d84:	31 93       	st	Z+, r19
 d86:	de f6       	brtc	.-74     	; 0xd3e <__ultoa_invert+0xe>
 d88:	cf 01       	movw	r24, r30
 d8a:	08 95       	ret
 d8c:	46 2f       	mov	r20, r22
 d8e:	47 70       	andi	r20, 0x07	; 7
 d90:	40 5d       	subi	r20, 0xD0	; 208
 d92:	41 93       	st	Z+, r20
 d94:	b3 e0       	ldi	r27, 0x03	; 3
 d96:	0f d0       	rcall	.+30     	; 0xdb6 <__ultoa_invert+0x86>
 d98:	c9 f7       	brne	.-14     	; 0xd8c <__ultoa_invert+0x5c>
 d9a:	f6 cf       	rjmp	.-20     	; 0xd88 <__ultoa_invert+0x58>
 d9c:	46 2f       	mov	r20, r22
 d9e:	4f 70       	andi	r20, 0x0F	; 15
 da0:	40 5d       	subi	r20, 0xD0	; 208
 da2:	4a 33       	cpi	r20, 0x3A	; 58
 da4:	18 f0       	brcs	.+6      	; 0xdac <__ultoa_invert+0x7c>
 da6:	49 5d       	subi	r20, 0xD9	; 217
 da8:	31 fd       	sbrc	r19, 1
 daa:	40 52       	subi	r20, 0x20	; 32
 dac:	41 93       	st	Z+, r20
 dae:	02 d0       	rcall	.+4      	; 0xdb4 <__ultoa_invert+0x84>
 db0:	a9 f7       	brne	.-22     	; 0xd9c <__ultoa_invert+0x6c>
 db2:	ea cf       	rjmp	.-44     	; 0xd88 <__ultoa_invert+0x58>
 db4:	b4 e0       	ldi	r27, 0x04	; 4
 db6:	a6 95       	lsr	r26
 db8:	97 95       	ror	r25
 dba:	87 95       	ror	r24
 dbc:	77 95       	ror	r23
 dbe:	67 95       	ror	r22
 dc0:	ba 95       	dec	r27
 dc2:	c9 f7       	brne	.-14     	; 0xdb6 <__ultoa_invert+0x86>
 dc4:	00 97       	sbiw	r24, 0x00	; 0
 dc6:	61 05       	cpc	r22, r1
 dc8:	71 05       	cpc	r23, r1
 dca:	08 95       	ret
 dcc:	9b 01       	movw	r18, r22
 dce:	ac 01       	movw	r20, r24
 dd0:	0a 2e       	mov	r0, r26
 dd2:	06 94       	lsr	r0
 dd4:	57 95       	ror	r21
 dd6:	47 95       	ror	r20
 dd8:	37 95       	ror	r19
 dda:	27 95       	ror	r18
 ddc:	ba 95       	dec	r27
 dde:	c9 f7       	brne	.-14     	; 0xdd2 <__ultoa_invert+0xa2>
 de0:	62 0f       	add	r22, r18
 de2:	73 1f       	adc	r23, r19
 de4:	84 1f       	adc	r24, r20
 de6:	95 1f       	adc	r25, r21
 de8:	a0 1d       	adc	r26, r0
 dea:	08 95       	ret

00000dec <_exit>:
 dec:	f8 94       	cli

00000dee <__stop_program>:
 dee:	ff cf       	rjmp	.-2      	; 0xdee <__stop_program>
