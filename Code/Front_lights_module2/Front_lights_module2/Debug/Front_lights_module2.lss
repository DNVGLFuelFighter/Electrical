
Front_lights_module2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000e46  00000eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  0080014a  0080014a  00000f24  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000102c  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000862  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3f  00000000  00000000  000029e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00003728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  00003ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a27  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000049b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c2       	rjmp	.+1182   	; 0x4dc <__vector_15>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	26 c2       	rjmp	.+1100   	; 0x492 <__vector_17>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 e4       	ldi	r30, 0x46	; 70
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	aa 34       	cpi	r26, 0x4A	; 74
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	aa e4       	ldi	r26, 0x4A	; 74
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a1 38       	cpi	r26, 0x81	; 129
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	d7 d1       	rcall	.+942    	; 0x47a <main>
  cc:	ba c6       	rjmp	.+3444   	; 0xe42 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <__vector_18>:
        CANIDT4 = 1<<RTRTAG;
		CANCDMOB|=packet->length;
		}
    CANCDMOB|=0x40; //enable TX
	return TRUE;
	}
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	cf 93       	push	r28
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
  f8:	ed ee       	ldi	r30, 0xED	; 237
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	c0 81       	ld	r28, Z
  fe:	80 91 ec 00 	lds	r24, 0x00EC
 102:	68 2f       	mov	r22, r24
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	80 83       	st	Z, r24
 10a:	72 95       	swap	r23
 10c:	62 95       	swap	r22
 10e:	6f 70       	andi	r22, 0x0F	; 15
 110:	67 27       	eor	r22, r23
 112:	7f 70       	andi	r23, 0x0F	; 15
 114:	67 27       	eor	r22, r23
 116:	80 91 ee 00 	lds	r24, 0x00EE
 11a:	8f 75       	andi	r24, 0x5F	; 95
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_18+0x50>
 11e:	98 95       	break
 120:	20 91 f2 00 	lds	r18, 0x00F2
 124:	80 91 f3 00 	lds	r24, 0x00F3
 128:	ea e4       	ldi	r30, 0x4A	; 74
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	22 95       	swap	r18
 13c:	26 95       	lsr	r18
 13e:	27 70       	andi	r18, 0x07	; 7
 140:	82 2b       	or	r24, r18
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
 146:	80 91 ef 00 	lds	r24, 0x00EF
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	59 f0       	breq	.+22     	; 0x16a <__vector_18+0x9a>
 154:	ed e4       	ldi	r30, 0x4D	; 77
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	83 5b       	subi	r24, 0xB3	; 179
 15a:	9e 4f       	sbci	r25, 0xFE	; 254
 15c:	aa ef       	ldi	r26, 0xFA	; 250
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	2c 91       	ld	r18, X
 162:	21 93       	st	Z+, r18
 164:	e8 17       	cp	r30, r24
 166:	f9 07       	cpc	r31, r25
 168:	d9 f7       	brne	.-10     	; 0x160 <__vector_18+0x90>
 16a:	10 92 ee 00 	sts	0x00EE, r1
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 ef 00 	sts	0x00EF, r24
 174:	fb 01       	movw	r30, r22
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e7 5a       	subi	r30, 0xA7	; 167
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	01 90       	ld	r0, Z+
 180:	f0 81       	ld	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	8a e4       	ldi	r24, 0x4A	; 74
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	09 95       	icall
 18a:	c0 93 ed 00 	sts	0x00ED, r28
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <prepare_rx>:

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
 1b6:	8f 30       	cpi	r24, 0x0F	; 15
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <prepare_rx+0x6>
 1ba:	6d c0       	rjmp	.+218    	; 0x296 <prepare_rx+0xe0>
		return TRUE;
	canlist[ (unsigned)mob]=callback;
 1bc:	e8 2f       	mov	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e7 5a       	subi	r30, 0xA7	; 167
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	31 83       	std	Z+1, r19	; 0x01
 1ca:	20 83       	st	Z, r18
    CANPAGE = mob << 4;
 1cc:	98 2f       	mov	r25, r24
 1ce:	92 95       	swap	r25
 1d0:	90 7f       	andi	r25, 0xF0	; 240
 1d2:	90 93 ed 00 	sts	0x00ED, r25
	if( callback==0)			// release this MOB 
 1d6:	23 2b       	or	r18, r19
 1d8:	d9 f4       	brne	.+54     	; 0x210 <prepare_rx+0x5a>
		{
		CANSTMOB = 0x00;    	// cancel pending operation
 1da:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0x00;
 1de:	10 92 ef 00 	sts	0x00EF, r1
		unsigned mask=1<<mob;
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	a9 01       	movw	r20, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <prepare_rx+0x38>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <prepare_rx+0x34>
 1f2:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
 1f4:	ee ed       	ldi	r30, 0xDE	; 222
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	20 81       	ld	r18, Z
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
 200:	ef ed       	ldi	r30, 0xDF	; 223
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	90 95       	com	r25
 208:	89 23       	and	r24, r25
 20a:	80 83       	st	Z, r24
		return FALSE;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
 210:	90 91 ef 00 	lds	r25, 0x00EF
 214:	90 7c       	andi	r25, 0xC0	; 192
 216:	09 f0       	breq	.+2      	; 0x21a <prepare_rx+0x64>
 218:	40 c0       	rjmp	.+128    	; 0x29a <prepare_rx+0xe4>
		return TRUE;			// no vacancy ...
	CANSTMOB = 0x00;    	// cancel pending operation 
 21a:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;		
 21e:	ef ee       	ldi	r30, 0xEF	; 239
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	10 82       	st	Z, r1
	CANHPMOB = 0x00;		// enable direct mob indexing, see doc
 224:	10 92 ec 00 	sts	0x00EC, r1
	CANIDT1=id >>3;
 228:	9b 01       	movw	r18, r22
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	36 95       	lsr	r19
 234:	27 95       	ror	r18
 236:	20 93 f3 00 	sts	0x00F3, r18
	CANIDT2=id <<5;
 23a:	62 95       	swap	r22
 23c:	66 0f       	add	r22, r22
 23e:	60 7e       	andi	r22, 0xE0	; 224
 240:	60 93 f2 00 	sts	0x00F2, r22
	CANIDM1=idmask >>3;
 244:	9a 01       	movw	r18, r20
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	20 93 f7 00 	sts	0x00F7, r18
	CANIDM2=idmask <<5;
 256:	42 95       	swap	r20
 258:	44 0f       	add	r20, r20
 25a:	40 7e       	andi	r20, 0xE0	; 224
 25c:	40 93 f6 00 	sts	0x00F6, r20
	CANIDM3=0;
 260:	10 92 f5 00 	sts	0x00F5, r1
	CANIDM4=0;
 264:	10 92 f4 00 	sts	0x00F4, r1
	CANCDMOB=0x80; // enable RX
 268:	90 e8       	ldi	r25, 0x80	; 128
 26a:	90 83       	st	Z, r25
	unsigned mask=1<<mob;
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	a9 01       	movw	r20, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <prepare_rx+0xc2>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <prepare_rx+0xbe>
 27c:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
 27e:	ee ed       	ldi	r30, 0xDE	; 222
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	20 81       	ld	r18, Z
 284:	82 2b       	or	r24, r18
 286:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
 288:	ef ed       	ldi	r30, 0xDF	; 223
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	89 2b       	or	r24, r25
 290:	80 83       	st	Z, r24
	return FALSE;
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
	}

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
		return TRUE;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return FALSE;
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
		return TRUE;			// no vacancy ...
 29a:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return FALSE;
	}
 29c:	08 95       	ret

0000029e <can_init>:

void can_init( void)
	{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	unsigned mob;
//! \bug different baud rate support not implemented yet 
#if F_CPU == 8000000
	//Old implementation
	CANBT1=0x06;	// 8MHz, 100kbit/s
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2=0x0c;
 2a8:	8c e0       	ldi	r24, 0x0C	; 12
 2aa:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3=0x5a;
 2ae:	8a e5       	ldi	r24, 0x5A	; 90
 2b0:	80 93 e4 00 	sts	0x00E4, r24
 2b4:	80 e0       	ldi	r24, 0x00	; 0
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2b6:	cd ee       	ldi	r28, 0xED	; 237
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
 2ba:	ae ee       	ldi	r26, 0xEE	; 238
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
 2be:	ef ee       	ldi	r30, 0xEF	; 239
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2c2:	98 2f       	mov	r25, r24
 2c4:	92 95       	swap	r25
 2c6:	90 7f       	andi	r25, 0xF0	; 240
 2c8:	98 83       	st	Y, r25
		CANSTMOB = 0;
 2ca:	1c 92       	st	X, r1
		CANCDMOB = 0;
 2cc:	10 82       	st	Z, r1
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
#else
	CANBT1=0x26;	// 16 MHz, 100kbit/s
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
 2d0:	8f 30       	cpi	r24, 0x0F	; 15
 2d2:	b9 f7       	brne	.-18     	; 0x2c2 <can_init+0x24>
		{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
		}
	CANGCON |= 0x02;
 2d4:	e8 ed       	ldi	r30, 0xD8	; 216
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX);
 2de:	80 ea       	ldi	r24, 0xA0	; 160
 2e0:	80 93 db 00 	sts	0x00DB, r24
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <front_lights_init>:
	else
		front_lights_turn_right(TRUE);
}

void front_emergency( BOOL on) {
	EMERG = on;
 2ea:	6c 9a       	sbi	0x0d, 4	; 13
 2ec:	6d 9a       	sbi	0x0d, 5	; 13
 2ee:	80 9a       	sbi	0x10, 0	; 16
 2f0:	81 9a       	sbi	0x10, 1	; 16
 2f2:	82 9a       	sbi	0x10, 2	; 16
 2f4:	73 98       	cbi	0x0e, 3	; 14
 2f6:	6b 9a       	sbi	0x0d, 3	; 13
 2f8:	e1 e9       	ldi	r30, 0x91	; 145
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 e1       	ldi	r24, 0x10	; 16
 2fe:	80 83       	st	Z, r24
 300:	a0 e9       	ldi	r26, 0x90	; 144
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	8c 91       	ld	r24, X
 306:	80 68       	ori	r24, 0x80	; 128
 308:	8c 93       	st	X, r24
 30a:	80 81       	ld	r24, Z
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	80 83       	st	Z, r24
 310:	80 81       	ld	r24, Z
 312:	81 60       	ori	r24, 0x01	; 1
 314:	80 83       	st	Z, r24
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	80 93 96 00 	sts	0x0096, r24
 31c:	10 92 97 00 	sts	0x0097, r1
 320:	10 92 98 00 	sts	0x0098, r1
 324:	08 95       	ret

00000326 <front_lights_eyebrows>:
 326:	88 23       	and	r24, r24
 328:	a9 f0       	breq	.+42     	; 0x354 <front_lights_eyebrows+0x2e>
 32a:	80 91 57 01 	lds	r24, 0x0157
 32e:	81 11       	cpse	r24, r1
 330:	11 c0       	rjmp	.+34     	; 0x354 <front_lights_eyebrows+0x2e>
 332:	80 91 56 01 	lds	r24, 0x0156
 336:	81 11       	cpse	r24, r1
 338:	0d c0       	rjmp	.+26     	; 0x354 <front_lights_eyebrows+0x2e>
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	9f 93       	push	r25
 340:	8f 93       	push	r24
 342:	84 d1       	rcall	.+776    	; 0x64c <printf>
 344:	89 9a       	sbi	0x11, 1	; 17
 346:	75 9a       	sbi	0x0e, 5	; 14
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 55 01 	sts	0x0155, r24
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	08 95       	ret
 354:	89 98       	cbi	0x11, 1	; 17
 356:	75 98       	cbi	0x0e, 5	; 14
 358:	10 92 55 01 	sts	0x0155, r1
 35c:	08 95       	ret

0000035e <front_lights_angel_eyes>:
 35e:	88 23       	and	r24, r24
 360:	11 f0       	breq	.+4      	; 0x366 <front_lights_angel_eyes+0x8>
 362:	74 9a       	sbi	0x0e, 4	; 14
 364:	08 95       	ret
 366:	74 98       	cbi	0x0e, 4	; 14
 368:	08 95       	ret

0000036a <front_lights_turn_left>:
 36a:	88 23       	and	r24, r24
 36c:	39 f0       	breq	.+14     	; 0x37c <front_lights_turn_left+0x12>
 36e:	8a 9a       	sbi	0x11, 2	; 17
 370:	80 91 55 01 	lds	r24, 0x0155
 374:	81 11       	cpse	r24, r1
 376:	08 c0       	rjmp	.+16     	; 0x388 <front_lights_turn_left+0x1e>
 378:	89 9a       	sbi	0x11, 1	; 17
 37a:	08 95       	ret
 37c:	8a 98       	cbi	0x11, 2	; 17
 37e:	80 91 55 01 	lds	r24, 0x0155
 382:	81 11       	cpse	r24, r1
 384:	01 c0       	rjmp	.+2      	; 0x388 <front_lights_turn_left+0x1e>
 386:	89 98       	cbi	0x11, 1	; 17
 388:	08 95       	ret

0000038a <front_lights_turn_right>:
 38a:	88 23       	and	r24, r24
 38c:	39 f0       	breq	.+14     	; 0x39c <front_lights_turn_right+0x12>
 38e:	88 9a       	sbi	0x11, 0	; 17
 390:	80 91 55 01 	lds	r24, 0x0155
 394:	81 11       	cpse	r24, r1
 396:	08 c0       	rjmp	.+16     	; 0x3a8 <front_lights_turn_right+0x1e>
 398:	75 9a       	sbi	0x0e, 5	; 14
 39a:	08 95       	ret
 39c:	88 98       	cbi	0x11, 0	; 17
 39e:	80 91 55 01 	lds	r24, 0x0155
 3a2:	81 11       	cpse	r24, r1
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <front_lights_turn_right+0x1e>
 3a6:	75 98       	cbi	0x0e, 5	; 14
 3a8:	08 95       	ret

000003aa <front_toggle_ind_left>:
 3aa:	8a 9b       	sbis	0x11, 2	; 17
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <front_toggle_ind_left+0xa>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	dc cf       	rjmp	.-72     	; 0x36a <front_lights_turn_left>
 3b2:	08 95       	ret
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	d9 cf       	rjmp	.-78     	; 0x36a <front_lights_turn_left>
 3b8:	08 95       	ret

000003ba <front_toggle_ind_right>:
 3ba:	88 9b       	sbis	0x11, 0	; 17
 3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <front_toggle_ind_right+0xa>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	e4 cf       	rjmp	.-56     	; 0x38a <front_lights_turn_right>
 3c2:	08 95       	ret
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	e1 cf       	rjmp	.-62     	; 0x38a <front_lights_turn_right>
 3c8:	08 95       	ret

000003ca <front_ind_left>:
}

void front_ind_left( BOOL on) {
	if(on)
 3ca:	88 23       	and	r24, r24
 3cc:	51 f0       	breq	.+20     	; 0x3e2 <front_ind_left+0x18>
		if(!IND_LEFT)
 3ce:	80 91 57 01 	lds	r24, 0x0157
 3d2:	81 11       	cpse	r24, r1
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <front_ind_left+0x14>
			IND_LEFT = TRUE;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 57 01 	sts	0x0157, r24
 3dc:	08 95       	ret
	else
		if(IND_LEFT)
			IND_LEFT = FALSE;
 3de:	10 92 57 01 	sts	0x0157, r1
 3e2:	08 95       	ret

000003e4 <front_ind_right>:
}

void front_ind_right( BOOL on) {
	if(on)
 3e4:	88 23       	and	r24, r24
 3e6:	51 f0       	breq	.+20     	; 0x3fc <front_ind_right+0x18>
		if(!IND_RIGHT)
 3e8:	80 91 56 01 	lds	r24, 0x0156
 3ec:	81 11       	cpse	r24, r1
 3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <front_ind_right+0x14>
			IND_RIGHT = TRUE;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 56 01 	sts	0x0156, r24
 3f6:	08 95       	ret
	else
		if(IND_RIGHT)
			IND_RIGHT = FALSE;
 3f8:	10 92 56 01 	sts	0x0156, r1
 3fc:	08 95       	ret

000003fe <front_light_handler>:
	clear_bit(PORTF, PF0);
	if(!EYEBROWS_ON)
		clear_bit(PORTE, PE5);	
}

void front_light_handler(CAN_packet *p, unsigned char mob) {
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	ec 01       	movw	r28, r24
	(void)mob;
	
	if (p->id == ID_dashboard) {
 404:	88 81       	ld	r24, Y
 406:	99 81       	ldd	r25, Y+1	; 0x01
 408:	86 30       	cpi	r24, 0x06	; 6
 40a:	91 05       	cpc	r25, r1
 40c:	d1 f4       	brne	.+52     	; 0x442 <front_light_handler+0x44>
		/* Headlights near and far */
		if (p->data[0] & HEADLIGHTS_NEAR)
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	80 ff       	sbrs	r24, 0
 412:	04 c0       	rjmp	.+8      	; 0x41c <front_light_handler+0x1e>
void front_lights_headlights( int power) {
	if (power > HEADLIGHT_POWER_LIMIT) {
		OCR3AL = HEADLIGHT_POWER_LIMIT;
		return;
	}
	OCR3AL = power;
 414:	8e e1       	ldi	r24, 0x1E	; 30
 416:	80 93 98 00 	sts	0x0098, r24
 41a:	08 c0       	rjmp	.+16     	; 0x42c <front_light_handler+0x2e>
	
	if (p->id == ID_dashboard) {
		/* Headlights near and far */
		if (p->data[0] & HEADLIGHTS_NEAR)
			front_lights_headlights(30);
		else if (p->data[0] & HEADLIGHTS_FAR)
 41c:	81 ff       	sbrs	r24, 1
 41e:	04 c0       	rjmp	.+8      	; 0x428 <front_light_handler+0x2a>
void front_lights_headlights( int power) {
	if (power > HEADLIGHT_POWER_LIMIT) {
		OCR3AL = HEADLIGHT_POWER_LIMIT;
		return;
	}
	OCR3AL = power;
 420:	86 e9       	ldi	r24, 0x96	; 150
 422:	80 93 98 00 	sts	0x0098, r24
 426:	02 c0       	rjmp	.+4      	; 0x42c <front_light_handler+0x2e>
 428:	10 92 98 00 	sts	0x0098, r1
			front_lights_headlights(30);
		else if (p->data[0] & HEADLIGHTS_FAR)
			front_lights_headlights(150);
		else front_lights_headlights(0);
		/* Eyebrows */
		front_lights_eyebrows(p->data[0] & EYEBROWS);
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	88 70       	andi	r24, 0x08	; 8
 430:	7a df       	rcall	.-268    	; 0x326 <front_lights_eyebrows>
		/* Angel eyes */
		front_lights_angel_eyes(p->data[0] & ANGEL_EYES);
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	84 70       	andi	r24, 0x04	; 4
 436:	93 df       	rcall	.-218    	; 0x35e <front_lights_angel_eyes>
		/* Emergency lights */
		front_emergency(p->data[0] & EMERGENCY);
 438:	8b 81       	ldd	r24, Y+3	; 0x03
 43a:	80 71       	andi	r24, 0x10	; 16
	else
		front_lights_turn_right(TRUE);
}

void front_emergency( BOOL on) {
	EMERG = on;
 43c:	80 93 58 01 	sts	0x0158, r24
 440:	08 c0       	rjmp	.+16     	; 0x452 <front_light_handler+0x54>
		front_lights_eyebrows(p->data[0] & EYEBROWS);
		/* Angel eyes */
		front_lights_angel_eyes(p->data[0] & ANGEL_EYES);
		/* Emergency lights */
		front_emergency(p->data[0] & EMERGENCY);
	} else if (p->id == ID_steeringWheel) {
 442:	05 97       	sbiw	r24, 0x05	; 5
 444:	31 f4       	brne	.+12     	; 0x452 <front_light_handler+0x54>
		/* Right turn signal */
		front_ind_right(p->data[0] & INDICATOR_RIGHT);
 446:	8b 81       	ldd	r24, Y+3	; 0x03
 448:	81 70       	andi	r24, 0x01	; 1
 44a:	cc df       	rcall	.-104    	; 0x3e4 <front_ind_right>
	
		/* Left turn signal */
		front_ind_left(p->data[0] & INDICATOR_LEFT);
 44c:	8b 81       	ldd	r24, Y+3	; 0x03
 44e:	82 70       	andi	r24, 0x02	; 2
 450:	bc df       	rcall	.-136    	; 0x3ca <front_ind_left>
	}
}
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <inits>:
#include <stdio.h>
#include "front_lights_module.h"
#include "timer1.h"

void inits(void) {
	can_init();
 458:	22 df       	rcall	.-444    	; 0x29e <can_init>
	USART_init(MYUBRR, true);
 45a:	61 e0       	ldi	r22, 0x01	; 1
 45c:	83 e3       	ldi	r24, 0x33	; 51
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	94 d0       	rcall	.+296    	; 0x58a <USART_init>
	front_lights_init();
 462:	43 df       	rcall	.-378    	; 0x2ea <front_lights_init>
	timer1_init();
 464:	20 d0       	rcall	.+64     	; 0x4a6 <timer1_init>
	
	printf("\r\nInitialization complete");
 466:	8f e2       	ldi	r24, 0x2F	; 47
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	9f 93       	push	r25
 46c:	8f 93       	push	r24
 46e:	ee d0       	rcall	.+476    	; 0x64c <printf>
	set_bit(DDRB, DDB6);
 470:	26 9a       	sbi	0x04, 6	; 4
	clear_bit(PORTB, PB6);
 472:	2e 98       	cbi	0x05, 6	; 5
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	08 95       	ret

0000047a <main>:

int main(void)
{
	BOOL ret;

	inits();
 47a:	ee df       	rcall	.-36     	; 0x458 <inits>
	
	ret = prepare_rx(0, ID_steeringWheel, MASK_FRONT_LIGHTS, front_light_handler);
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	31 e0       	ldi	r19, 0x01	; 1
 480:	44 e0       	ldi	r20, 0x04	; 4
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	65 e0       	ldi	r22, 0x05	; 5
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	95 de       	rcall	.-726    	; 0x1b6 <prepare_rx>
	/* Set global interrupts */
	sei();
 48c:	78 94       	sei
	
	for(;;)
		asm("sleep");;
 48e:	88 95       	sleep
 490:	fe cf       	rjmp	.-4      	; 0x48e <main+0x14>

00000492 <__vector_17>:
	set_bit(TCCR0A, CS00);
	/* Enable timer overflow */
	set_bit(TIMSK0, TOIE0);
}

ISR(TIMER0_OVF_vect) {
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
	
	
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <timer1_init>:
	/* DIsable interrupts */
	cli(); // same as cli()?
	/* Set TCNT1 to i */
	TCNT1 = i;
	/* Restore global interrupt flag */
	SREG = sreg;
 4a6:	e1 e8       	ldi	r30, 0x81	; 129
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	82 60       	ori	r24, 0x02	; 2
 4ae:	80 83       	st	Z, r24
 4b0:	80 81       	ld	r24, Z
 4b2:	81 60       	ori	r24, 0x01	; 1
 4b4:	80 83       	st	Z, r24
 4b6:	10 92 85 00 	sts	0x0085, r1
 4ba:	10 92 84 00 	sts	0x0084, r1
 4be:	ef e6       	ldi	r30, 0x6F	; 111
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	81 60       	ori	r24, 0x01	; 1
 4c6:	80 83       	st	Z, r24
 4c8:	78 94       	sei
 4ca:	e0 e8       	ldi	r30, 0x80	; 128
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	80 68       	ori	r24, 0x80	; 128
 4d2:	80 83       	st	Z, r24
 4d4:	80 81       	ld	r24, Z
 4d6:	8f 7b       	andi	r24, 0xBF	; 191
 4d8:	80 83       	st	Z, r24
 4da:	08 95       	ret

000004dc <__vector_15>:
}


ISR(TIMER1_OVF_vect) {
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	0b b6       	in	r0, 0x3b	; 59
 4e8:	0f 92       	push	r0
 4ea:	2f 93       	push	r18
 4ec:	3f 93       	push	r19
 4ee:	4f 93       	push	r20
 4f0:	5f 93       	push	r21
 4f2:	6f 93       	push	r22
 4f4:	7f 93       	push	r23
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
 4fa:	af 93       	push	r26
 4fc:	bf 93       	push	r27
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
	if ((!EMERG) && IND_LEFT) {
 502:	80 91 58 01 	lds	r24, 0x0158
 506:	81 11       	cpse	r24, r1
 508:	06 c0       	rjmp	.+12     	; 0x516 <__vector_15+0x3a>
 50a:	80 91 57 01 	lds	r24, 0x0157
 50e:	88 23       	and	r24, r24
 510:	11 f0       	breq	.+4      	; 0x516 <__vector_15+0x3a>
		// toggle the left indicator
		front_toggle_ind_left();
 512:	4b df       	rcall	.-362    	; 0x3aa <front_toggle_ind_left>
 514:	02 c0       	rjmp	.+4      	; 0x51a <__vector_15+0x3e>
	} else 
		front_lights_turn_left(FALSE);
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	28 df       	rcall	.-432    	; 0x36a <front_lights_turn_left>
	if ((!EMERG) && IND_RIGHT) {
 51a:	80 91 58 01 	lds	r24, 0x0158
 51e:	81 11       	cpse	r24, r1
 520:	06 c0       	rjmp	.+12     	; 0x52e <__vector_15+0x52>
 522:	80 91 56 01 	lds	r24, 0x0156
 526:	88 23       	and	r24, r24
 528:	11 f0       	breq	.+4      	; 0x52e <__vector_15+0x52>
		// toggle the right indicator
		front_toggle_ind_right();
 52a:	47 df       	rcall	.-370    	; 0x3ba <front_toggle_ind_right>
 52c:	02 c0       	rjmp	.+4      	; 0x532 <__vector_15+0x56>
	} else
		front_lights_turn_right(FALSE);
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	2c df       	rcall	.-424    	; 0x38a <front_lights_turn_right>
	
	if (EMERG) {
 532:	80 91 58 01 	lds	r24, 0x0158
 536:	88 23       	and	r24, r24
 538:	21 f0       	breq	.+8      	; 0x542 <__vector_15+0x66>
		front_ind_left(EMERG);
 53a:	47 df       	rcall	.-370    	; 0x3ca <front_ind_left>
		front_ind_right(EMERG);	
 53c:	80 91 58 01 	lds	r24, 0x0158
 540:	51 df       	rcall	.-350    	; 0x3e4 <front_ind_right>
	}
 542:	ff 91       	pop	r31
 544:	ef 91       	pop	r30
 546:	bf 91       	pop	r27
 548:	af 91       	pop	r26
 54a:	9f 91       	pop	r25
 54c:	8f 91       	pop	r24
 54e:	7f 91       	pop	r23
 550:	6f 91       	pop	r22
 552:	5f 91       	pop	r21
 554:	4f 91       	pop	r20
 556:	3f 91       	pop	r19
 558:	2f 91       	pop	r18
 55a:	0f 90       	pop	r0
 55c:	0b be       	out	0x3b, r0	; 59
 55e:	0f 90       	pop	r0
 560:	0f be       	out	0x3f, r0	; 63
 562:	0f 90       	pop	r0
 564:	1f 90       	pop	r1
 566:	18 95       	reti

00000568 <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 568:	e0 ec       	ldi	r30, 0xC0	; 192
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	90 81       	ld	r25, Z
 56e:	95 ff       	sbrs	r25, 5
 570:	fd cf       	rjmp	.-6      	; 0x56c <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 572:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	08 95       	ret

0000057a <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 57a:	e0 ec       	ldi	r30, 0xC0	; 192
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	88 23       	and	r24, r24
 582:	ec f7       	brge	.-6      	; 0x57e <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 584:	80 91 c6 00 	lds	r24, 0x00C6
}
 588:	08 95       	ret

0000058a <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 58a:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 58e:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 592:	86 e0       	ldi	r24, 0x06	; 6
 594:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 598:	66 23       	and	r22, r22
 59a:	41 f0       	breq	.+16     	; 0x5ac <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 59c:	e1 ec       	ldi	r30, 0xC1	; 193
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	80 61       	ori	r24, 0x10	; 16
 5a4:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 5a6:	80 81       	ld	r24, Z
 5a8:	88 60       	ori	r24, 0x08	; 8
 5aa:	80 83       	st	Z, r24
	}
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 5ac:	6d eb       	ldi	r22, 0xBD	; 189
 5ae:	72 e0       	ldi	r23, 0x02	; 2
 5b0:	84 eb       	ldi	r24, 0xB4	; 180
 5b2:	92 e0       	ldi	r25, 0x02	; 2
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <fdevopen>
 5b6:	08 95       	ret

000005b8 <fdevopen>:
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	00 97       	sbiw	r24, 0x00	; 0
 5c2:	31 f4       	brne	.+12     	; 0x5d0 <fdevopen+0x18>
 5c4:	61 15       	cp	r22, r1
 5c6:	71 05       	cpc	r23, r1
 5c8:	19 f4       	brne	.+6      	; 0x5d0 <fdevopen+0x18>
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	39 c0       	rjmp	.+114    	; 0x642 <fdevopen+0x8a>
 5d0:	8b 01       	movw	r16, r22
 5d2:	ec 01       	movw	r28, r24
 5d4:	6e e0       	ldi	r22, 0x0E	; 14
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	38 d2       	rcall	.+1136   	; 0xa4e <calloc>
 5de:	fc 01       	movw	r30, r24
 5e0:	89 2b       	or	r24, r25
 5e2:	99 f3       	breq	.-26     	; 0x5ca <fdevopen+0x12>
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	83 83       	std	Z+3, r24	; 0x03
 5e8:	01 15       	cp	r16, r1
 5ea:	11 05       	cpc	r17, r1
 5ec:	71 f0       	breq	.+28     	; 0x60a <fdevopen+0x52>
 5ee:	13 87       	std	Z+11, r17	; 0x0b
 5f0:	02 87       	std	Z+10, r16	; 0x0a
 5f2:	81 e8       	ldi	r24, 0x81	; 129
 5f4:	83 83       	std	Z+3, r24	; 0x03
 5f6:	80 91 77 01 	lds	r24, 0x0177
 5fa:	90 91 78 01 	lds	r25, 0x0178
 5fe:	89 2b       	or	r24, r25
 600:	21 f4       	brne	.+8      	; 0x60a <fdevopen+0x52>
 602:	f0 93 78 01 	sts	0x0178, r31
 606:	e0 93 77 01 	sts	0x0177, r30
 60a:	20 97       	sbiw	r28, 0x00	; 0
 60c:	c9 f0       	breq	.+50     	; 0x640 <fdevopen+0x88>
 60e:	d1 87       	std	Z+9, r29	; 0x09
 610:	c0 87       	std	Z+8, r28	; 0x08
 612:	83 81       	ldd	r24, Z+3	; 0x03
 614:	82 60       	ori	r24, 0x02	; 2
 616:	83 83       	std	Z+3, r24	; 0x03
 618:	80 91 79 01 	lds	r24, 0x0179
 61c:	90 91 7a 01 	lds	r25, 0x017A
 620:	89 2b       	or	r24, r25
 622:	71 f4       	brne	.+28     	; 0x640 <fdevopen+0x88>
 624:	f0 93 7a 01 	sts	0x017A, r31
 628:	e0 93 79 01 	sts	0x0179, r30
 62c:	80 91 7b 01 	lds	r24, 0x017B
 630:	90 91 7c 01 	lds	r25, 0x017C
 634:	89 2b       	or	r24, r25
 636:	21 f4       	brne	.+8      	; 0x640 <fdevopen+0x88>
 638:	f0 93 7c 01 	sts	0x017C, r31
 63c:	e0 93 7b 01 	sts	0x017B, r30
 640:	cf 01       	movw	r24, r30
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	08 95       	ret

0000064c <printf>:
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
 654:	ae 01       	movw	r20, r28
 656:	4b 5f       	subi	r20, 0xFB	; 251
 658:	5f 4f       	sbci	r21, 0xFF	; 255
 65a:	fa 01       	movw	r30, r20
 65c:	61 91       	ld	r22, Z+
 65e:	71 91       	ld	r23, Z+
 660:	af 01       	movw	r20, r30
 662:	80 91 79 01 	lds	r24, 0x0179
 666:	90 91 7a 01 	lds	r25, 0x017A
 66a:	03 d0       	rcall	.+6      	; 0x672 <vfprintf>
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <vfprintf>:
 672:	2f 92       	push	r2
 674:	3f 92       	push	r3
 676:	4f 92       	push	r4
 678:	5f 92       	push	r5
 67a:	6f 92       	push	r6
 67c:	7f 92       	push	r7
 67e:	8f 92       	push	r8
 680:	9f 92       	push	r9
 682:	af 92       	push	r10
 684:	bf 92       	push	r11
 686:	cf 92       	push	r12
 688:	df 92       	push	r13
 68a:	ef 92       	push	r14
 68c:	ff 92       	push	r15
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	2c 97       	sbiw	r28, 0x0c	; 12
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	f8 94       	cli
 6a0:	de bf       	out	0x3e, r29	; 62
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	cd bf       	out	0x3d, r28	; 61
 6a6:	7c 01       	movw	r14, r24
 6a8:	6b 01       	movw	r12, r22
 6aa:	8a 01       	movw	r16, r20
 6ac:	fc 01       	movw	r30, r24
 6ae:	17 82       	std	Z+7, r1	; 0x07
 6b0:	16 82       	std	Z+6, r1	; 0x06
 6b2:	83 81       	ldd	r24, Z+3	; 0x03
 6b4:	81 ff       	sbrs	r24, 1
 6b6:	b0 c1       	rjmp	.+864    	; 0xa18 <vfprintf+0x3a6>
 6b8:	ce 01       	movw	r24, r28
 6ba:	01 96       	adiw	r24, 0x01	; 1
 6bc:	4c 01       	movw	r8, r24
 6be:	f7 01       	movw	r30, r14
 6c0:	93 81       	ldd	r25, Z+3	; 0x03
 6c2:	f6 01       	movw	r30, r12
 6c4:	93 fd       	sbrc	r25, 3
 6c6:	85 91       	lpm	r24, Z+
 6c8:	93 ff       	sbrs	r25, 3
 6ca:	81 91       	ld	r24, Z+
 6cc:	6f 01       	movw	r12, r30
 6ce:	88 23       	and	r24, r24
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <vfprintf+0x62>
 6d2:	9e c1       	rjmp	.+828    	; 0xa10 <vfprintf+0x39e>
 6d4:	85 32       	cpi	r24, 0x25	; 37
 6d6:	39 f4       	brne	.+14     	; 0x6e6 <vfprintf+0x74>
 6d8:	93 fd       	sbrc	r25, 3
 6da:	85 91       	lpm	r24, Z+
 6dc:	93 ff       	sbrs	r25, 3
 6de:	81 91       	ld	r24, Z+
 6e0:	6f 01       	movw	r12, r30
 6e2:	85 32       	cpi	r24, 0x25	; 37
 6e4:	21 f4       	brne	.+8      	; 0x6ee <vfprintf+0x7c>
 6e6:	b7 01       	movw	r22, r14
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	15 d3       	rcall	.+1578   	; 0xd16 <fputc>
 6ec:	e8 cf       	rjmp	.-48     	; 0x6be <vfprintf+0x4c>
 6ee:	51 2c       	mov	r5, r1
 6f0:	31 2c       	mov	r3, r1
 6f2:	20 e0       	ldi	r18, 0x00	; 0
 6f4:	20 32       	cpi	r18, 0x20	; 32
 6f6:	a0 f4       	brcc	.+40     	; 0x720 <vfprintf+0xae>
 6f8:	8b 32       	cpi	r24, 0x2B	; 43
 6fa:	69 f0       	breq	.+26     	; 0x716 <vfprintf+0xa4>
 6fc:	30 f4       	brcc	.+12     	; 0x70a <vfprintf+0x98>
 6fe:	80 32       	cpi	r24, 0x20	; 32
 700:	59 f0       	breq	.+22     	; 0x718 <vfprintf+0xa6>
 702:	83 32       	cpi	r24, 0x23	; 35
 704:	69 f4       	brne	.+26     	; 0x720 <vfprintf+0xae>
 706:	20 61       	ori	r18, 0x10	; 16
 708:	2c c0       	rjmp	.+88     	; 0x762 <vfprintf+0xf0>
 70a:	8d 32       	cpi	r24, 0x2D	; 45
 70c:	39 f0       	breq	.+14     	; 0x71c <vfprintf+0xaa>
 70e:	80 33       	cpi	r24, 0x30	; 48
 710:	39 f4       	brne	.+14     	; 0x720 <vfprintf+0xae>
 712:	21 60       	ori	r18, 0x01	; 1
 714:	26 c0       	rjmp	.+76     	; 0x762 <vfprintf+0xf0>
 716:	22 60       	ori	r18, 0x02	; 2
 718:	24 60       	ori	r18, 0x04	; 4
 71a:	23 c0       	rjmp	.+70     	; 0x762 <vfprintf+0xf0>
 71c:	28 60       	ori	r18, 0x08	; 8
 71e:	21 c0       	rjmp	.+66     	; 0x762 <vfprintf+0xf0>
 720:	27 fd       	sbrc	r18, 7
 722:	27 c0       	rjmp	.+78     	; 0x772 <vfprintf+0x100>
 724:	30 ed       	ldi	r19, 0xD0	; 208
 726:	38 0f       	add	r19, r24
 728:	3a 30       	cpi	r19, 0x0A	; 10
 72a:	78 f4       	brcc	.+30     	; 0x74a <vfprintf+0xd8>
 72c:	26 ff       	sbrs	r18, 6
 72e:	06 c0       	rjmp	.+12     	; 0x73c <vfprintf+0xca>
 730:	fa e0       	ldi	r31, 0x0A	; 10
 732:	5f 9e       	mul	r5, r31
 734:	30 0d       	add	r19, r0
 736:	11 24       	eor	r1, r1
 738:	53 2e       	mov	r5, r19
 73a:	13 c0       	rjmp	.+38     	; 0x762 <vfprintf+0xf0>
 73c:	8a e0       	ldi	r24, 0x0A	; 10
 73e:	38 9e       	mul	r3, r24
 740:	30 0d       	add	r19, r0
 742:	11 24       	eor	r1, r1
 744:	33 2e       	mov	r3, r19
 746:	20 62       	ori	r18, 0x20	; 32
 748:	0c c0       	rjmp	.+24     	; 0x762 <vfprintf+0xf0>
 74a:	8e 32       	cpi	r24, 0x2E	; 46
 74c:	21 f4       	brne	.+8      	; 0x756 <vfprintf+0xe4>
 74e:	26 fd       	sbrc	r18, 6
 750:	5f c1       	rjmp	.+702    	; 0xa10 <vfprintf+0x39e>
 752:	20 64       	ori	r18, 0x40	; 64
 754:	06 c0       	rjmp	.+12     	; 0x762 <vfprintf+0xf0>
 756:	8c 36       	cpi	r24, 0x6C	; 108
 758:	11 f4       	brne	.+4      	; 0x75e <vfprintf+0xec>
 75a:	20 68       	ori	r18, 0x80	; 128
 75c:	02 c0       	rjmp	.+4      	; 0x762 <vfprintf+0xf0>
 75e:	88 36       	cpi	r24, 0x68	; 104
 760:	41 f4       	brne	.+16     	; 0x772 <vfprintf+0x100>
 762:	f6 01       	movw	r30, r12
 764:	93 fd       	sbrc	r25, 3
 766:	85 91       	lpm	r24, Z+
 768:	93 ff       	sbrs	r25, 3
 76a:	81 91       	ld	r24, Z+
 76c:	6f 01       	movw	r12, r30
 76e:	81 11       	cpse	r24, r1
 770:	c1 cf       	rjmp	.-126    	; 0x6f4 <vfprintf+0x82>
 772:	98 2f       	mov	r25, r24
 774:	9f 7d       	andi	r25, 0xDF	; 223
 776:	95 54       	subi	r25, 0x45	; 69
 778:	93 30       	cpi	r25, 0x03	; 3
 77a:	28 f4       	brcc	.+10     	; 0x786 <vfprintf+0x114>
 77c:	0c 5f       	subi	r16, 0xFC	; 252
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	ff e3       	ldi	r31, 0x3F	; 63
 782:	f9 83       	std	Y+1, r31	; 0x01
 784:	0d c0       	rjmp	.+26     	; 0x7a0 <vfprintf+0x12e>
 786:	83 36       	cpi	r24, 0x63	; 99
 788:	31 f0       	breq	.+12     	; 0x796 <vfprintf+0x124>
 78a:	83 37       	cpi	r24, 0x73	; 115
 78c:	71 f0       	breq	.+28     	; 0x7aa <vfprintf+0x138>
 78e:	83 35       	cpi	r24, 0x53	; 83
 790:	09 f0       	breq	.+2      	; 0x794 <vfprintf+0x122>
 792:	57 c0       	rjmp	.+174    	; 0x842 <vfprintf+0x1d0>
 794:	21 c0       	rjmp	.+66     	; 0x7d8 <vfprintf+0x166>
 796:	f8 01       	movw	r30, r16
 798:	80 81       	ld	r24, Z
 79a:	89 83       	std	Y+1, r24	; 0x01
 79c:	0e 5f       	subi	r16, 0xFE	; 254
 79e:	1f 4f       	sbci	r17, 0xFF	; 255
 7a0:	44 24       	eor	r4, r4
 7a2:	43 94       	inc	r4
 7a4:	51 2c       	mov	r5, r1
 7a6:	54 01       	movw	r10, r8
 7a8:	14 c0       	rjmp	.+40     	; 0x7d2 <vfprintf+0x160>
 7aa:	38 01       	movw	r6, r16
 7ac:	f2 e0       	ldi	r31, 0x02	; 2
 7ae:	6f 0e       	add	r6, r31
 7b0:	71 1c       	adc	r7, r1
 7b2:	f8 01       	movw	r30, r16
 7b4:	a0 80       	ld	r10, Z
 7b6:	b1 80       	ldd	r11, Z+1	; 0x01
 7b8:	26 ff       	sbrs	r18, 6
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <vfprintf+0x150>
 7bc:	65 2d       	mov	r22, r5
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <vfprintf+0x154>
 7c2:	6f ef       	ldi	r22, 0xFF	; 255
 7c4:	7f ef       	ldi	r23, 0xFF	; 255
 7c6:	c5 01       	movw	r24, r10
 7c8:	2c 87       	std	Y+12, r18	; 0x0c
 7ca:	9a d2       	rcall	.+1332   	; 0xd00 <strnlen>
 7cc:	2c 01       	movw	r4, r24
 7ce:	83 01       	movw	r16, r6
 7d0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7d2:	2f 77       	andi	r18, 0x7F	; 127
 7d4:	22 2e       	mov	r2, r18
 7d6:	16 c0       	rjmp	.+44     	; 0x804 <vfprintf+0x192>
 7d8:	38 01       	movw	r6, r16
 7da:	f2 e0       	ldi	r31, 0x02	; 2
 7dc:	6f 0e       	add	r6, r31
 7de:	71 1c       	adc	r7, r1
 7e0:	f8 01       	movw	r30, r16
 7e2:	a0 80       	ld	r10, Z
 7e4:	b1 80       	ldd	r11, Z+1	; 0x01
 7e6:	26 ff       	sbrs	r18, 6
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <vfprintf+0x17e>
 7ea:	65 2d       	mov	r22, r5
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x182>
 7f0:	6f ef       	ldi	r22, 0xFF	; 255
 7f2:	7f ef       	ldi	r23, 0xFF	; 255
 7f4:	c5 01       	movw	r24, r10
 7f6:	2c 87       	std	Y+12, r18	; 0x0c
 7f8:	71 d2       	rcall	.+1250   	; 0xcdc <strnlen_P>
 7fa:	2c 01       	movw	r4, r24
 7fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 7fe:	20 68       	ori	r18, 0x80	; 128
 800:	22 2e       	mov	r2, r18
 802:	83 01       	movw	r16, r6
 804:	23 fc       	sbrc	r2, 3
 806:	19 c0       	rjmp	.+50     	; 0x83a <vfprintf+0x1c8>
 808:	83 2d       	mov	r24, r3
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	48 16       	cp	r4, r24
 80e:	59 06       	cpc	r5, r25
 810:	a0 f4       	brcc	.+40     	; 0x83a <vfprintf+0x1c8>
 812:	b7 01       	movw	r22, r14
 814:	80 e2       	ldi	r24, 0x20	; 32
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	7e d2       	rcall	.+1276   	; 0xd16 <fputc>
 81a:	3a 94       	dec	r3
 81c:	f5 cf       	rjmp	.-22     	; 0x808 <vfprintf+0x196>
 81e:	f5 01       	movw	r30, r10
 820:	27 fc       	sbrc	r2, 7
 822:	85 91       	lpm	r24, Z+
 824:	27 fe       	sbrs	r2, 7
 826:	81 91       	ld	r24, Z+
 828:	5f 01       	movw	r10, r30
 82a:	b7 01       	movw	r22, r14
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	73 d2       	rcall	.+1254   	; 0xd16 <fputc>
 830:	31 10       	cpse	r3, r1
 832:	3a 94       	dec	r3
 834:	f1 e0       	ldi	r31, 0x01	; 1
 836:	4f 1a       	sub	r4, r31
 838:	51 08       	sbc	r5, r1
 83a:	41 14       	cp	r4, r1
 83c:	51 04       	cpc	r5, r1
 83e:	79 f7       	brne	.-34     	; 0x81e <vfprintf+0x1ac>
 840:	de c0       	rjmp	.+444    	; 0x9fe <vfprintf+0x38c>
 842:	84 36       	cpi	r24, 0x64	; 100
 844:	11 f0       	breq	.+4      	; 0x84a <vfprintf+0x1d8>
 846:	89 36       	cpi	r24, 0x69	; 105
 848:	31 f5       	brne	.+76     	; 0x896 <vfprintf+0x224>
 84a:	f8 01       	movw	r30, r16
 84c:	27 ff       	sbrs	r18, 7
 84e:	07 c0       	rjmp	.+14     	; 0x85e <vfprintf+0x1ec>
 850:	60 81       	ld	r22, Z
 852:	71 81       	ldd	r23, Z+1	; 0x01
 854:	82 81       	ldd	r24, Z+2	; 0x02
 856:	93 81       	ldd	r25, Z+3	; 0x03
 858:	0c 5f       	subi	r16, 0xFC	; 252
 85a:	1f 4f       	sbci	r17, 0xFF	; 255
 85c:	08 c0       	rjmp	.+16     	; 0x86e <vfprintf+0x1fc>
 85e:	60 81       	ld	r22, Z
 860:	71 81       	ldd	r23, Z+1	; 0x01
 862:	07 2e       	mov	r0, r23
 864:	00 0c       	add	r0, r0
 866:	88 0b       	sbc	r24, r24
 868:	99 0b       	sbc	r25, r25
 86a:	0e 5f       	subi	r16, 0xFE	; 254
 86c:	1f 4f       	sbci	r17, 0xFF	; 255
 86e:	2f 76       	andi	r18, 0x6F	; 111
 870:	72 2e       	mov	r7, r18
 872:	97 ff       	sbrs	r25, 7
 874:	09 c0       	rjmp	.+18     	; 0x888 <vfprintf+0x216>
 876:	90 95       	com	r25
 878:	80 95       	com	r24
 87a:	70 95       	com	r23
 87c:	61 95       	neg	r22
 87e:	7f 4f       	sbci	r23, 0xFF	; 255
 880:	8f 4f       	sbci	r24, 0xFF	; 255
 882:	9f 4f       	sbci	r25, 0xFF	; 255
 884:	20 68       	ori	r18, 0x80	; 128
 886:	72 2e       	mov	r7, r18
 888:	2a e0       	ldi	r18, 0x0A	; 10
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	a4 01       	movw	r20, r8
 88e:	7b d2       	rcall	.+1270   	; 0xd86 <__ultoa_invert>
 890:	a8 2e       	mov	r10, r24
 892:	a8 18       	sub	r10, r8
 894:	43 c0       	rjmp	.+134    	; 0x91c <vfprintf+0x2aa>
 896:	85 37       	cpi	r24, 0x75	; 117
 898:	29 f4       	brne	.+10     	; 0x8a4 <vfprintf+0x232>
 89a:	2f 7e       	andi	r18, 0xEF	; 239
 89c:	b2 2e       	mov	r11, r18
 89e:	2a e0       	ldi	r18, 0x0A	; 10
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	25 c0       	rjmp	.+74     	; 0x8ee <vfprintf+0x27c>
 8a4:	f2 2f       	mov	r31, r18
 8a6:	f9 7f       	andi	r31, 0xF9	; 249
 8a8:	bf 2e       	mov	r11, r31
 8aa:	8f 36       	cpi	r24, 0x6F	; 111
 8ac:	c1 f0       	breq	.+48     	; 0x8de <vfprintf+0x26c>
 8ae:	18 f4       	brcc	.+6      	; 0x8b6 <vfprintf+0x244>
 8b0:	88 35       	cpi	r24, 0x58	; 88
 8b2:	79 f0       	breq	.+30     	; 0x8d2 <vfprintf+0x260>
 8b4:	ad c0       	rjmp	.+346    	; 0xa10 <vfprintf+0x39e>
 8b6:	80 37       	cpi	r24, 0x70	; 112
 8b8:	19 f0       	breq	.+6      	; 0x8c0 <vfprintf+0x24e>
 8ba:	88 37       	cpi	r24, 0x78	; 120
 8bc:	21 f0       	breq	.+8      	; 0x8c6 <vfprintf+0x254>
 8be:	a8 c0       	rjmp	.+336    	; 0xa10 <vfprintf+0x39e>
 8c0:	2f 2f       	mov	r18, r31
 8c2:	20 61       	ori	r18, 0x10	; 16
 8c4:	b2 2e       	mov	r11, r18
 8c6:	b4 fe       	sbrs	r11, 4
 8c8:	0d c0       	rjmp	.+26     	; 0x8e4 <vfprintf+0x272>
 8ca:	8b 2d       	mov	r24, r11
 8cc:	84 60       	ori	r24, 0x04	; 4
 8ce:	b8 2e       	mov	r11, r24
 8d0:	09 c0       	rjmp	.+18     	; 0x8e4 <vfprintf+0x272>
 8d2:	24 ff       	sbrs	r18, 4
 8d4:	0a c0       	rjmp	.+20     	; 0x8ea <vfprintf+0x278>
 8d6:	9f 2f       	mov	r25, r31
 8d8:	96 60       	ori	r25, 0x06	; 6
 8da:	b9 2e       	mov	r11, r25
 8dc:	06 c0       	rjmp	.+12     	; 0x8ea <vfprintf+0x278>
 8de:	28 e0       	ldi	r18, 0x08	; 8
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	05 c0       	rjmp	.+10     	; 0x8ee <vfprintf+0x27c>
 8e4:	20 e1       	ldi	r18, 0x10	; 16
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x27c>
 8ea:	20 e1       	ldi	r18, 0x10	; 16
 8ec:	32 e0       	ldi	r19, 0x02	; 2
 8ee:	f8 01       	movw	r30, r16
 8f0:	b7 fe       	sbrs	r11, 7
 8f2:	07 c0       	rjmp	.+14     	; 0x902 <vfprintf+0x290>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	82 81       	ldd	r24, Z+2	; 0x02
 8fa:	93 81       	ldd	r25, Z+3	; 0x03
 8fc:	0c 5f       	subi	r16, 0xFC	; 252
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	06 c0       	rjmp	.+12     	; 0x90e <vfprintf+0x29c>
 902:	60 81       	ld	r22, Z
 904:	71 81       	ldd	r23, Z+1	; 0x01
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 5f       	subi	r16, 0xFE	; 254
 90c:	1f 4f       	sbci	r17, 0xFF	; 255
 90e:	a4 01       	movw	r20, r8
 910:	3a d2       	rcall	.+1140   	; 0xd86 <__ultoa_invert>
 912:	a8 2e       	mov	r10, r24
 914:	a8 18       	sub	r10, r8
 916:	fb 2d       	mov	r31, r11
 918:	ff 77       	andi	r31, 0x7F	; 127
 91a:	7f 2e       	mov	r7, r31
 91c:	76 fe       	sbrs	r7, 6
 91e:	0b c0       	rjmp	.+22     	; 0x936 <vfprintf+0x2c4>
 920:	37 2d       	mov	r19, r7
 922:	3e 7f       	andi	r19, 0xFE	; 254
 924:	a5 14       	cp	r10, r5
 926:	50 f4       	brcc	.+20     	; 0x93c <vfprintf+0x2ca>
 928:	74 fe       	sbrs	r7, 4
 92a:	0a c0       	rjmp	.+20     	; 0x940 <vfprintf+0x2ce>
 92c:	72 fc       	sbrc	r7, 2
 92e:	08 c0       	rjmp	.+16     	; 0x940 <vfprintf+0x2ce>
 930:	37 2d       	mov	r19, r7
 932:	3e 7e       	andi	r19, 0xEE	; 238
 934:	05 c0       	rjmp	.+10     	; 0x940 <vfprintf+0x2ce>
 936:	ba 2c       	mov	r11, r10
 938:	37 2d       	mov	r19, r7
 93a:	03 c0       	rjmp	.+6      	; 0x942 <vfprintf+0x2d0>
 93c:	ba 2c       	mov	r11, r10
 93e:	01 c0       	rjmp	.+2      	; 0x942 <vfprintf+0x2d0>
 940:	b5 2c       	mov	r11, r5
 942:	34 ff       	sbrs	r19, 4
 944:	0d c0       	rjmp	.+26     	; 0x960 <vfprintf+0x2ee>
 946:	fe 01       	movw	r30, r28
 948:	ea 0d       	add	r30, r10
 94a:	f1 1d       	adc	r31, r1
 94c:	80 81       	ld	r24, Z
 94e:	80 33       	cpi	r24, 0x30	; 48
 950:	11 f4       	brne	.+4      	; 0x956 <vfprintf+0x2e4>
 952:	39 7e       	andi	r19, 0xE9	; 233
 954:	09 c0       	rjmp	.+18     	; 0x968 <vfprintf+0x2f6>
 956:	32 ff       	sbrs	r19, 2
 958:	06 c0       	rjmp	.+12     	; 0x966 <vfprintf+0x2f4>
 95a:	b3 94       	inc	r11
 95c:	b3 94       	inc	r11
 95e:	04 c0       	rjmp	.+8      	; 0x968 <vfprintf+0x2f6>
 960:	83 2f       	mov	r24, r19
 962:	86 78       	andi	r24, 0x86	; 134
 964:	09 f0       	breq	.+2      	; 0x968 <vfprintf+0x2f6>
 966:	b3 94       	inc	r11
 968:	33 fd       	sbrc	r19, 3
 96a:	12 c0       	rjmp	.+36     	; 0x990 <vfprintf+0x31e>
 96c:	30 ff       	sbrs	r19, 0
 96e:	06 c0       	rjmp	.+12     	; 0x97c <vfprintf+0x30a>
 970:	5a 2c       	mov	r5, r10
 972:	b3 14       	cp	r11, r3
 974:	18 f4       	brcc	.+6      	; 0x97c <vfprintf+0x30a>
 976:	53 0c       	add	r5, r3
 978:	5b 18       	sub	r5, r11
 97a:	b3 2c       	mov	r11, r3
 97c:	b3 14       	cp	r11, r3
 97e:	60 f4       	brcc	.+24     	; 0x998 <vfprintf+0x326>
 980:	b7 01       	movw	r22, r14
 982:	80 e2       	ldi	r24, 0x20	; 32
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	3c 87       	std	Y+12, r19	; 0x0c
 988:	c6 d1       	rcall	.+908    	; 0xd16 <fputc>
 98a:	b3 94       	inc	r11
 98c:	3c 85       	ldd	r19, Y+12	; 0x0c
 98e:	f6 cf       	rjmp	.-20     	; 0x97c <vfprintf+0x30a>
 990:	b3 14       	cp	r11, r3
 992:	10 f4       	brcc	.+4      	; 0x998 <vfprintf+0x326>
 994:	3b 18       	sub	r3, r11
 996:	01 c0       	rjmp	.+2      	; 0x99a <vfprintf+0x328>
 998:	31 2c       	mov	r3, r1
 99a:	34 ff       	sbrs	r19, 4
 99c:	11 c0       	rjmp	.+34     	; 0x9c0 <vfprintf+0x34e>
 99e:	b7 01       	movw	r22, r14
 9a0:	80 e3       	ldi	r24, 0x30	; 48
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	3c 87       	std	Y+12, r19	; 0x0c
 9a6:	b7 d1       	rcall	.+878    	; 0xd16 <fputc>
 9a8:	3c 85       	ldd	r19, Y+12	; 0x0c
 9aa:	32 ff       	sbrs	r19, 2
 9ac:	16 c0       	rjmp	.+44     	; 0x9da <vfprintf+0x368>
 9ae:	31 fd       	sbrc	r19, 1
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <vfprintf+0x346>
 9b2:	88 e7       	ldi	r24, 0x78	; 120
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0x34a>
 9b8:	88 e5       	ldi	r24, 0x58	; 88
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	b7 01       	movw	r22, r14
 9be:	0c c0       	rjmp	.+24     	; 0x9d8 <vfprintf+0x366>
 9c0:	83 2f       	mov	r24, r19
 9c2:	86 78       	andi	r24, 0x86	; 134
 9c4:	51 f0       	breq	.+20     	; 0x9da <vfprintf+0x368>
 9c6:	31 ff       	sbrs	r19, 1
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <vfprintf+0x35c>
 9ca:	8b e2       	ldi	r24, 0x2B	; 43
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <vfprintf+0x35e>
 9ce:	80 e2       	ldi	r24, 0x20	; 32
 9d0:	37 fd       	sbrc	r19, 7
 9d2:	8d e2       	ldi	r24, 0x2D	; 45
 9d4:	b7 01       	movw	r22, r14
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	9e d1       	rcall	.+828    	; 0xd16 <fputc>
 9da:	a5 14       	cp	r10, r5
 9dc:	30 f4       	brcc	.+12     	; 0x9ea <vfprintf+0x378>
 9de:	b7 01       	movw	r22, r14
 9e0:	80 e3       	ldi	r24, 0x30	; 48
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	98 d1       	rcall	.+816    	; 0xd16 <fputc>
 9e6:	5a 94       	dec	r5
 9e8:	f8 cf       	rjmp	.-16     	; 0x9da <vfprintf+0x368>
 9ea:	aa 94       	dec	r10
 9ec:	f4 01       	movw	r30, r8
 9ee:	ea 0d       	add	r30, r10
 9f0:	f1 1d       	adc	r31, r1
 9f2:	80 81       	ld	r24, Z
 9f4:	b7 01       	movw	r22, r14
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	8e d1       	rcall	.+796    	; 0xd16 <fputc>
 9fa:	a1 10       	cpse	r10, r1
 9fc:	f6 cf       	rjmp	.-20     	; 0x9ea <vfprintf+0x378>
 9fe:	33 20       	and	r3, r3
 a00:	09 f4       	brne	.+2      	; 0xa04 <vfprintf+0x392>
 a02:	5d ce       	rjmp	.-838    	; 0x6be <vfprintf+0x4c>
 a04:	b7 01       	movw	r22, r14
 a06:	80 e2       	ldi	r24, 0x20	; 32
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	85 d1       	rcall	.+778    	; 0xd16 <fputc>
 a0c:	3a 94       	dec	r3
 a0e:	f7 cf       	rjmp	.-18     	; 0x9fe <vfprintf+0x38c>
 a10:	f7 01       	movw	r30, r14
 a12:	86 81       	ldd	r24, Z+6	; 0x06
 a14:	97 81       	ldd	r25, Z+7	; 0x07
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <vfprintf+0x3aa>
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	2c 96       	adiw	r28, 0x0c	; 12
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	f8 94       	cli
 a22:	de bf       	out	0x3e, r29	; 62
 a24:	0f be       	out	0x3f, r0	; 63
 a26:	cd bf       	out	0x3d, r28	; 61
 a28:	df 91       	pop	r29
 a2a:	cf 91       	pop	r28
 a2c:	1f 91       	pop	r17
 a2e:	0f 91       	pop	r16
 a30:	ff 90       	pop	r15
 a32:	ef 90       	pop	r14
 a34:	df 90       	pop	r13
 a36:	cf 90       	pop	r12
 a38:	bf 90       	pop	r11
 a3a:	af 90       	pop	r10
 a3c:	9f 90       	pop	r9
 a3e:	8f 90       	pop	r8
 a40:	7f 90       	pop	r7
 a42:	6f 90       	pop	r6
 a44:	5f 90       	pop	r5
 a46:	4f 90       	pop	r4
 a48:	3f 90       	pop	r3
 a4a:	2f 90       	pop	r2
 a4c:	08 95       	ret

00000a4e <calloc>:
 a4e:	0f 93       	push	r16
 a50:	1f 93       	push	r17
 a52:	cf 93       	push	r28
 a54:	df 93       	push	r29
 a56:	86 9f       	mul	r24, r22
 a58:	80 01       	movw	r16, r0
 a5a:	87 9f       	mul	r24, r23
 a5c:	10 0d       	add	r17, r0
 a5e:	96 9f       	mul	r25, r22
 a60:	10 0d       	add	r17, r0
 a62:	11 24       	eor	r1, r1
 a64:	c8 01       	movw	r24, r16
 a66:	0d d0       	rcall	.+26     	; 0xa82 <malloc>
 a68:	ec 01       	movw	r28, r24
 a6a:	00 97       	sbiw	r24, 0x00	; 0
 a6c:	21 f0       	breq	.+8      	; 0xa76 <calloc+0x28>
 a6e:	a8 01       	movw	r20, r16
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	3e d1       	rcall	.+636    	; 0xcf2 <memset>
 a76:	ce 01       	movw	r24, r28
 a78:	df 91       	pop	r29
 a7a:	cf 91       	pop	r28
 a7c:	1f 91       	pop	r17
 a7e:	0f 91       	pop	r16
 a80:	08 95       	ret

00000a82 <malloc>:
 a82:	cf 93       	push	r28
 a84:	df 93       	push	r29
 a86:	82 30       	cpi	r24, 0x02	; 2
 a88:	91 05       	cpc	r25, r1
 a8a:	10 f4       	brcc	.+4      	; 0xa90 <malloc+0xe>
 a8c:	82 e0       	ldi	r24, 0x02	; 2
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	e0 91 7f 01 	lds	r30, 0x017F
 a94:	f0 91 80 01 	lds	r31, 0x0180
 a98:	20 e0       	ldi	r18, 0x00	; 0
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	c0 e0       	ldi	r28, 0x00	; 0
 a9e:	d0 e0       	ldi	r29, 0x00	; 0
 aa0:	30 97       	sbiw	r30, 0x00	; 0
 aa2:	11 f1       	breq	.+68     	; 0xae8 <malloc+0x66>
 aa4:	40 81       	ld	r20, Z
 aa6:	51 81       	ldd	r21, Z+1	; 0x01
 aa8:	48 17       	cp	r20, r24
 aaa:	59 07       	cpc	r21, r25
 aac:	c0 f0       	brcs	.+48     	; 0xade <malloc+0x5c>
 aae:	48 17       	cp	r20, r24
 ab0:	59 07       	cpc	r21, r25
 ab2:	61 f4       	brne	.+24     	; 0xacc <malloc+0x4a>
 ab4:	82 81       	ldd	r24, Z+2	; 0x02
 ab6:	93 81       	ldd	r25, Z+3	; 0x03
 ab8:	20 97       	sbiw	r28, 0x00	; 0
 aba:	19 f0       	breq	.+6      	; 0xac2 <malloc+0x40>
 abc:	9b 83       	std	Y+3, r25	; 0x03
 abe:	8a 83       	std	Y+2, r24	; 0x02
 ac0:	2b c0       	rjmp	.+86     	; 0xb18 <malloc+0x96>
 ac2:	90 93 80 01 	sts	0x0180, r25
 ac6:	80 93 7f 01 	sts	0x017F, r24
 aca:	26 c0       	rjmp	.+76     	; 0xb18 <malloc+0x96>
 acc:	21 15       	cp	r18, r1
 ace:	31 05       	cpc	r19, r1
 ad0:	19 f0       	breq	.+6      	; 0xad8 <malloc+0x56>
 ad2:	42 17       	cp	r20, r18
 ad4:	53 07       	cpc	r21, r19
 ad6:	18 f4       	brcc	.+6      	; 0xade <malloc+0x5c>
 ad8:	9a 01       	movw	r18, r20
 ada:	be 01       	movw	r22, r28
 adc:	df 01       	movw	r26, r30
 ade:	ef 01       	movw	r28, r30
 ae0:	02 80       	ldd	r0, Z+2	; 0x02
 ae2:	f3 81       	ldd	r31, Z+3	; 0x03
 ae4:	e0 2d       	mov	r30, r0
 ae6:	dc cf       	rjmp	.-72     	; 0xaa0 <malloc+0x1e>
 ae8:	21 15       	cp	r18, r1
 aea:	31 05       	cpc	r19, r1
 aec:	09 f1       	breq	.+66     	; 0xb30 <malloc+0xae>
 aee:	28 1b       	sub	r18, r24
 af0:	39 0b       	sbc	r19, r25
 af2:	24 30       	cpi	r18, 0x04	; 4
 af4:	31 05       	cpc	r19, r1
 af6:	90 f4       	brcc	.+36     	; 0xb1c <malloc+0x9a>
 af8:	12 96       	adiw	r26, 0x02	; 2
 afa:	8d 91       	ld	r24, X+
 afc:	9c 91       	ld	r25, X
 afe:	13 97       	sbiw	r26, 0x03	; 3
 b00:	61 15       	cp	r22, r1
 b02:	71 05       	cpc	r23, r1
 b04:	21 f0       	breq	.+8      	; 0xb0e <malloc+0x8c>
 b06:	fb 01       	movw	r30, r22
 b08:	93 83       	std	Z+3, r25	; 0x03
 b0a:	82 83       	std	Z+2, r24	; 0x02
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <malloc+0x94>
 b0e:	90 93 80 01 	sts	0x0180, r25
 b12:	80 93 7f 01 	sts	0x017F, r24
 b16:	fd 01       	movw	r30, r26
 b18:	32 96       	adiw	r30, 0x02	; 2
 b1a:	44 c0       	rjmp	.+136    	; 0xba4 <malloc+0x122>
 b1c:	fd 01       	movw	r30, r26
 b1e:	e2 0f       	add	r30, r18
 b20:	f3 1f       	adc	r31, r19
 b22:	81 93       	st	Z+, r24
 b24:	91 93       	st	Z+, r25
 b26:	22 50       	subi	r18, 0x02	; 2
 b28:	31 09       	sbc	r19, r1
 b2a:	2d 93       	st	X+, r18
 b2c:	3c 93       	st	X, r19
 b2e:	3a c0       	rjmp	.+116    	; 0xba4 <malloc+0x122>
 b30:	20 91 7d 01 	lds	r18, 0x017D
 b34:	30 91 7e 01 	lds	r19, 0x017E
 b38:	23 2b       	or	r18, r19
 b3a:	41 f4       	brne	.+16     	; 0xb4c <malloc+0xca>
 b3c:	20 91 02 01 	lds	r18, 0x0102
 b40:	30 91 03 01 	lds	r19, 0x0103
 b44:	30 93 7e 01 	sts	0x017E, r19
 b48:	20 93 7d 01 	sts	0x017D, r18
 b4c:	20 91 00 01 	lds	r18, 0x0100
 b50:	30 91 01 01 	lds	r19, 0x0101
 b54:	21 15       	cp	r18, r1
 b56:	31 05       	cpc	r19, r1
 b58:	41 f4       	brne	.+16     	; 0xb6a <malloc+0xe8>
 b5a:	2d b7       	in	r18, 0x3d	; 61
 b5c:	3e b7       	in	r19, 0x3e	; 62
 b5e:	40 91 04 01 	lds	r20, 0x0104
 b62:	50 91 05 01 	lds	r21, 0x0105
 b66:	24 1b       	sub	r18, r20
 b68:	35 0b       	sbc	r19, r21
 b6a:	e0 91 7d 01 	lds	r30, 0x017D
 b6e:	f0 91 7e 01 	lds	r31, 0x017E
 b72:	e2 17       	cp	r30, r18
 b74:	f3 07       	cpc	r31, r19
 b76:	a0 f4       	brcc	.+40     	; 0xba0 <malloc+0x11e>
 b78:	2e 1b       	sub	r18, r30
 b7a:	3f 0b       	sbc	r19, r31
 b7c:	28 17       	cp	r18, r24
 b7e:	39 07       	cpc	r19, r25
 b80:	78 f0       	brcs	.+30     	; 0xba0 <malloc+0x11e>
 b82:	ac 01       	movw	r20, r24
 b84:	4e 5f       	subi	r20, 0xFE	; 254
 b86:	5f 4f       	sbci	r21, 0xFF	; 255
 b88:	24 17       	cp	r18, r20
 b8a:	35 07       	cpc	r19, r21
 b8c:	48 f0       	brcs	.+18     	; 0xba0 <malloc+0x11e>
 b8e:	4e 0f       	add	r20, r30
 b90:	5f 1f       	adc	r21, r31
 b92:	50 93 7e 01 	sts	0x017E, r21
 b96:	40 93 7d 01 	sts	0x017D, r20
 b9a:	81 93       	st	Z+, r24
 b9c:	91 93       	st	Z+, r25
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <malloc+0x122>
 ba0:	e0 e0       	ldi	r30, 0x00	; 0
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	cf 01       	movw	r24, r30
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	08 95       	ret

00000bac <free>:
 bac:	0f 93       	push	r16
 bae:	1f 93       	push	r17
 bb0:	cf 93       	push	r28
 bb2:	df 93       	push	r29
 bb4:	00 97       	sbiw	r24, 0x00	; 0
 bb6:	09 f4       	brne	.+2      	; 0xbba <free+0xe>
 bb8:	8c c0       	rjmp	.+280    	; 0xcd2 <free+0x126>
 bba:	fc 01       	movw	r30, r24
 bbc:	32 97       	sbiw	r30, 0x02	; 2
 bbe:	13 82       	std	Z+3, r1	; 0x03
 bc0:	12 82       	std	Z+2, r1	; 0x02
 bc2:	00 91 7f 01 	lds	r16, 0x017F
 bc6:	10 91 80 01 	lds	r17, 0x0180
 bca:	01 15       	cp	r16, r1
 bcc:	11 05       	cpc	r17, r1
 bce:	81 f4       	brne	.+32     	; 0xbf0 <free+0x44>
 bd0:	20 81       	ld	r18, Z
 bd2:	31 81       	ldd	r19, Z+1	; 0x01
 bd4:	82 0f       	add	r24, r18
 bd6:	93 1f       	adc	r25, r19
 bd8:	20 91 7d 01 	lds	r18, 0x017D
 bdc:	30 91 7e 01 	lds	r19, 0x017E
 be0:	28 17       	cp	r18, r24
 be2:	39 07       	cpc	r19, r25
 be4:	79 f5       	brne	.+94     	; 0xc44 <free+0x98>
 be6:	f0 93 7e 01 	sts	0x017E, r31
 bea:	e0 93 7d 01 	sts	0x017D, r30
 bee:	71 c0       	rjmp	.+226    	; 0xcd2 <free+0x126>
 bf0:	d8 01       	movw	r26, r16
 bf2:	40 e0       	ldi	r20, 0x00	; 0
 bf4:	50 e0       	ldi	r21, 0x00	; 0
 bf6:	ae 17       	cp	r26, r30
 bf8:	bf 07       	cpc	r27, r31
 bfa:	50 f4       	brcc	.+20     	; 0xc10 <free+0x64>
 bfc:	12 96       	adiw	r26, 0x02	; 2
 bfe:	2d 91       	ld	r18, X+
 c00:	3c 91       	ld	r19, X
 c02:	13 97       	sbiw	r26, 0x03	; 3
 c04:	ad 01       	movw	r20, r26
 c06:	21 15       	cp	r18, r1
 c08:	31 05       	cpc	r19, r1
 c0a:	09 f1       	breq	.+66     	; 0xc4e <free+0xa2>
 c0c:	d9 01       	movw	r26, r18
 c0e:	f3 cf       	rjmp	.-26     	; 0xbf6 <free+0x4a>
 c10:	9d 01       	movw	r18, r26
 c12:	da 01       	movw	r26, r20
 c14:	33 83       	std	Z+3, r19	; 0x03
 c16:	22 83       	std	Z+2, r18	; 0x02
 c18:	60 81       	ld	r22, Z
 c1a:	71 81       	ldd	r23, Z+1	; 0x01
 c1c:	86 0f       	add	r24, r22
 c1e:	97 1f       	adc	r25, r23
 c20:	82 17       	cp	r24, r18
 c22:	93 07       	cpc	r25, r19
 c24:	69 f4       	brne	.+26     	; 0xc40 <free+0x94>
 c26:	ec 01       	movw	r28, r24
 c28:	28 81       	ld	r18, Y
 c2a:	39 81       	ldd	r19, Y+1	; 0x01
 c2c:	26 0f       	add	r18, r22
 c2e:	37 1f       	adc	r19, r23
 c30:	2e 5f       	subi	r18, 0xFE	; 254
 c32:	3f 4f       	sbci	r19, 0xFF	; 255
 c34:	31 83       	std	Z+1, r19	; 0x01
 c36:	20 83       	st	Z, r18
 c38:	8a 81       	ldd	r24, Y+2	; 0x02
 c3a:	9b 81       	ldd	r25, Y+3	; 0x03
 c3c:	93 83       	std	Z+3, r25	; 0x03
 c3e:	82 83       	std	Z+2, r24	; 0x02
 c40:	45 2b       	or	r20, r21
 c42:	29 f4       	brne	.+10     	; 0xc4e <free+0xa2>
 c44:	f0 93 80 01 	sts	0x0180, r31
 c48:	e0 93 7f 01 	sts	0x017F, r30
 c4c:	42 c0       	rjmp	.+132    	; 0xcd2 <free+0x126>
 c4e:	13 96       	adiw	r26, 0x03	; 3
 c50:	fc 93       	st	X, r31
 c52:	ee 93       	st	-X, r30
 c54:	12 97       	sbiw	r26, 0x02	; 2
 c56:	ed 01       	movw	r28, r26
 c58:	49 91       	ld	r20, Y+
 c5a:	59 91       	ld	r21, Y+
 c5c:	9e 01       	movw	r18, r28
 c5e:	24 0f       	add	r18, r20
 c60:	35 1f       	adc	r19, r21
 c62:	e2 17       	cp	r30, r18
 c64:	f3 07       	cpc	r31, r19
 c66:	71 f4       	brne	.+28     	; 0xc84 <free+0xd8>
 c68:	80 81       	ld	r24, Z
 c6a:	91 81       	ldd	r25, Z+1	; 0x01
 c6c:	84 0f       	add	r24, r20
 c6e:	95 1f       	adc	r25, r21
 c70:	02 96       	adiw	r24, 0x02	; 2
 c72:	11 96       	adiw	r26, 0x01	; 1
 c74:	9c 93       	st	X, r25
 c76:	8e 93       	st	-X, r24
 c78:	82 81       	ldd	r24, Z+2	; 0x02
 c7a:	93 81       	ldd	r25, Z+3	; 0x03
 c7c:	13 96       	adiw	r26, 0x03	; 3
 c7e:	9c 93       	st	X, r25
 c80:	8e 93       	st	-X, r24
 c82:	12 97       	sbiw	r26, 0x02	; 2
 c84:	e0 e0       	ldi	r30, 0x00	; 0
 c86:	f0 e0       	ldi	r31, 0x00	; 0
 c88:	d8 01       	movw	r26, r16
 c8a:	12 96       	adiw	r26, 0x02	; 2
 c8c:	8d 91       	ld	r24, X+
 c8e:	9c 91       	ld	r25, X
 c90:	13 97       	sbiw	r26, 0x03	; 3
 c92:	00 97       	sbiw	r24, 0x00	; 0
 c94:	19 f0       	breq	.+6      	; 0xc9c <free+0xf0>
 c96:	f8 01       	movw	r30, r16
 c98:	8c 01       	movw	r16, r24
 c9a:	f6 cf       	rjmp	.-20     	; 0xc88 <free+0xdc>
 c9c:	8d 91       	ld	r24, X+
 c9e:	9c 91       	ld	r25, X
 ca0:	98 01       	movw	r18, r16
 ca2:	2e 5f       	subi	r18, 0xFE	; 254
 ca4:	3f 4f       	sbci	r19, 0xFF	; 255
 ca6:	82 0f       	add	r24, r18
 ca8:	93 1f       	adc	r25, r19
 caa:	20 91 7d 01 	lds	r18, 0x017D
 cae:	30 91 7e 01 	lds	r19, 0x017E
 cb2:	28 17       	cp	r18, r24
 cb4:	39 07       	cpc	r19, r25
 cb6:	69 f4       	brne	.+26     	; 0xcd2 <free+0x126>
 cb8:	30 97       	sbiw	r30, 0x00	; 0
 cba:	29 f4       	brne	.+10     	; 0xcc6 <free+0x11a>
 cbc:	10 92 80 01 	sts	0x0180, r1
 cc0:	10 92 7f 01 	sts	0x017F, r1
 cc4:	02 c0       	rjmp	.+4      	; 0xcca <free+0x11e>
 cc6:	13 82       	std	Z+3, r1	; 0x03
 cc8:	12 82       	std	Z+2, r1	; 0x02
 cca:	10 93 7e 01 	sts	0x017E, r17
 cce:	00 93 7d 01 	sts	0x017D, r16
 cd2:	df 91       	pop	r29
 cd4:	cf 91       	pop	r28
 cd6:	1f 91       	pop	r17
 cd8:	0f 91       	pop	r16
 cda:	08 95       	ret

00000cdc <strnlen_P>:
 cdc:	fc 01       	movw	r30, r24
 cde:	05 90       	lpm	r0, Z+
 ce0:	61 50       	subi	r22, 0x01	; 1
 ce2:	70 40       	sbci	r23, 0x00	; 0
 ce4:	01 10       	cpse	r0, r1
 ce6:	d8 f7       	brcc	.-10     	; 0xcde <strnlen_P+0x2>
 ce8:	80 95       	com	r24
 cea:	90 95       	com	r25
 cec:	8e 0f       	add	r24, r30
 cee:	9f 1f       	adc	r25, r31
 cf0:	08 95       	ret

00000cf2 <memset>:
 cf2:	dc 01       	movw	r26, r24
 cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <memset+0x6>
 cf6:	6d 93       	st	X+, r22
 cf8:	41 50       	subi	r20, 0x01	; 1
 cfa:	50 40       	sbci	r21, 0x00	; 0
 cfc:	e0 f7       	brcc	.-8      	; 0xcf6 <memset+0x4>
 cfe:	08 95       	ret

00000d00 <strnlen>:
 d00:	fc 01       	movw	r30, r24
 d02:	61 50       	subi	r22, 0x01	; 1
 d04:	70 40       	sbci	r23, 0x00	; 0
 d06:	01 90       	ld	r0, Z+
 d08:	01 10       	cpse	r0, r1
 d0a:	d8 f7       	brcc	.-10     	; 0xd02 <strnlen+0x2>
 d0c:	80 95       	com	r24
 d0e:	90 95       	com	r25
 d10:	8e 0f       	add	r24, r30
 d12:	9f 1f       	adc	r25, r31
 d14:	08 95       	ret

00000d16 <fputc>:
 d16:	0f 93       	push	r16
 d18:	1f 93       	push	r17
 d1a:	cf 93       	push	r28
 d1c:	df 93       	push	r29
 d1e:	fb 01       	movw	r30, r22
 d20:	23 81       	ldd	r18, Z+3	; 0x03
 d22:	21 fd       	sbrc	r18, 1
 d24:	03 c0       	rjmp	.+6      	; 0xd2c <fputc+0x16>
 d26:	8f ef       	ldi	r24, 0xFF	; 255
 d28:	9f ef       	ldi	r25, 0xFF	; 255
 d2a:	28 c0       	rjmp	.+80     	; 0xd7c <fputc+0x66>
 d2c:	22 ff       	sbrs	r18, 2
 d2e:	16 c0       	rjmp	.+44     	; 0xd5c <fputc+0x46>
 d30:	46 81       	ldd	r20, Z+6	; 0x06
 d32:	57 81       	ldd	r21, Z+7	; 0x07
 d34:	24 81       	ldd	r18, Z+4	; 0x04
 d36:	35 81       	ldd	r19, Z+5	; 0x05
 d38:	42 17       	cp	r20, r18
 d3a:	53 07       	cpc	r21, r19
 d3c:	44 f4       	brge	.+16     	; 0xd4e <fputc+0x38>
 d3e:	a0 81       	ld	r26, Z
 d40:	b1 81       	ldd	r27, Z+1	; 0x01
 d42:	9d 01       	movw	r18, r26
 d44:	2f 5f       	subi	r18, 0xFF	; 255
 d46:	3f 4f       	sbci	r19, 0xFF	; 255
 d48:	31 83       	std	Z+1, r19	; 0x01
 d4a:	20 83       	st	Z, r18
 d4c:	8c 93       	st	X, r24
 d4e:	26 81       	ldd	r18, Z+6	; 0x06
 d50:	37 81       	ldd	r19, Z+7	; 0x07
 d52:	2f 5f       	subi	r18, 0xFF	; 255
 d54:	3f 4f       	sbci	r19, 0xFF	; 255
 d56:	37 83       	std	Z+7, r19	; 0x07
 d58:	26 83       	std	Z+6, r18	; 0x06
 d5a:	10 c0       	rjmp	.+32     	; 0xd7c <fputc+0x66>
 d5c:	eb 01       	movw	r28, r22
 d5e:	09 2f       	mov	r16, r25
 d60:	18 2f       	mov	r17, r24
 d62:	00 84       	ldd	r0, Z+8	; 0x08
 d64:	f1 85       	ldd	r31, Z+9	; 0x09
 d66:	e0 2d       	mov	r30, r0
 d68:	09 95       	icall
 d6a:	89 2b       	or	r24, r25
 d6c:	e1 f6       	brne	.-72     	; 0xd26 <fputc+0x10>
 d6e:	8e 81       	ldd	r24, Y+6	; 0x06
 d70:	9f 81       	ldd	r25, Y+7	; 0x07
 d72:	01 96       	adiw	r24, 0x01	; 1
 d74:	9f 83       	std	Y+7, r25	; 0x07
 d76:	8e 83       	std	Y+6, r24	; 0x06
 d78:	81 2f       	mov	r24, r17
 d7a:	90 2f       	mov	r25, r16
 d7c:	df 91       	pop	r29
 d7e:	cf 91       	pop	r28
 d80:	1f 91       	pop	r17
 d82:	0f 91       	pop	r16
 d84:	08 95       	ret

00000d86 <__ultoa_invert>:
 d86:	fa 01       	movw	r30, r20
 d88:	aa 27       	eor	r26, r26
 d8a:	28 30       	cpi	r18, 0x08	; 8
 d8c:	51 f1       	breq	.+84     	; 0xde2 <__ultoa_invert+0x5c>
 d8e:	20 31       	cpi	r18, 0x10	; 16
 d90:	81 f1       	breq	.+96     	; 0xdf2 <__ultoa_invert+0x6c>
 d92:	e8 94       	clt
 d94:	6f 93       	push	r22
 d96:	6e 7f       	andi	r22, 0xFE	; 254
 d98:	6e 5f       	subi	r22, 0xFE	; 254
 d9a:	7f 4f       	sbci	r23, 0xFF	; 255
 d9c:	8f 4f       	sbci	r24, 0xFF	; 255
 d9e:	9f 4f       	sbci	r25, 0xFF	; 255
 da0:	af 4f       	sbci	r26, 0xFF	; 255
 da2:	b1 e0       	ldi	r27, 0x01	; 1
 da4:	3e d0       	rcall	.+124    	; 0xe22 <__ultoa_invert+0x9c>
 da6:	b4 e0       	ldi	r27, 0x04	; 4
 da8:	3c d0       	rcall	.+120    	; 0xe22 <__ultoa_invert+0x9c>
 daa:	67 0f       	add	r22, r23
 dac:	78 1f       	adc	r23, r24
 dae:	89 1f       	adc	r24, r25
 db0:	9a 1f       	adc	r25, r26
 db2:	a1 1d       	adc	r26, r1
 db4:	68 0f       	add	r22, r24
 db6:	79 1f       	adc	r23, r25
 db8:	8a 1f       	adc	r24, r26
 dba:	91 1d       	adc	r25, r1
 dbc:	a1 1d       	adc	r26, r1
 dbe:	6a 0f       	add	r22, r26
 dc0:	71 1d       	adc	r23, r1
 dc2:	81 1d       	adc	r24, r1
 dc4:	91 1d       	adc	r25, r1
 dc6:	a1 1d       	adc	r26, r1
 dc8:	20 d0       	rcall	.+64     	; 0xe0a <__ultoa_invert+0x84>
 dca:	09 f4       	brne	.+2      	; 0xdce <__ultoa_invert+0x48>
 dcc:	68 94       	set
 dce:	3f 91       	pop	r19
 dd0:	2a e0       	ldi	r18, 0x0A	; 10
 dd2:	26 9f       	mul	r18, r22
 dd4:	11 24       	eor	r1, r1
 dd6:	30 19       	sub	r19, r0
 dd8:	30 5d       	subi	r19, 0xD0	; 208
 dda:	31 93       	st	Z+, r19
 ddc:	de f6       	brtc	.-74     	; 0xd94 <__ultoa_invert+0xe>
 dde:	cf 01       	movw	r24, r30
 de0:	08 95       	ret
 de2:	46 2f       	mov	r20, r22
 de4:	47 70       	andi	r20, 0x07	; 7
 de6:	40 5d       	subi	r20, 0xD0	; 208
 de8:	41 93       	st	Z+, r20
 dea:	b3 e0       	ldi	r27, 0x03	; 3
 dec:	0f d0       	rcall	.+30     	; 0xe0c <__ultoa_invert+0x86>
 dee:	c9 f7       	brne	.-14     	; 0xde2 <__ultoa_invert+0x5c>
 df0:	f6 cf       	rjmp	.-20     	; 0xdde <__ultoa_invert+0x58>
 df2:	46 2f       	mov	r20, r22
 df4:	4f 70       	andi	r20, 0x0F	; 15
 df6:	40 5d       	subi	r20, 0xD0	; 208
 df8:	4a 33       	cpi	r20, 0x3A	; 58
 dfa:	18 f0       	brcs	.+6      	; 0xe02 <__ultoa_invert+0x7c>
 dfc:	49 5d       	subi	r20, 0xD9	; 217
 dfe:	31 fd       	sbrc	r19, 1
 e00:	40 52       	subi	r20, 0x20	; 32
 e02:	41 93       	st	Z+, r20
 e04:	02 d0       	rcall	.+4      	; 0xe0a <__ultoa_invert+0x84>
 e06:	a9 f7       	brne	.-22     	; 0xdf2 <__ultoa_invert+0x6c>
 e08:	ea cf       	rjmp	.-44     	; 0xdde <__ultoa_invert+0x58>
 e0a:	b4 e0       	ldi	r27, 0x04	; 4
 e0c:	a6 95       	lsr	r26
 e0e:	97 95       	ror	r25
 e10:	87 95       	ror	r24
 e12:	77 95       	ror	r23
 e14:	67 95       	ror	r22
 e16:	ba 95       	dec	r27
 e18:	c9 f7       	brne	.-14     	; 0xe0c <__ultoa_invert+0x86>
 e1a:	00 97       	sbiw	r24, 0x00	; 0
 e1c:	61 05       	cpc	r22, r1
 e1e:	71 05       	cpc	r23, r1
 e20:	08 95       	ret
 e22:	9b 01       	movw	r18, r22
 e24:	ac 01       	movw	r20, r24
 e26:	0a 2e       	mov	r0, r26
 e28:	06 94       	lsr	r0
 e2a:	57 95       	ror	r21
 e2c:	47 95       	ror	r20
 e2e:	37 95       	ror	r19
 e30:	27 95       	ror	r18
 e32:	ba 95       	dec	r27
 e34:	c9 f7       	brne	.-14     	; 0xe28 <__ultoa_invert+0xa2>
 e36:	62 0f       	add	r22, r18
 e38:	73 1f       	adc	r23, r19
 e3a:	84 1f       	adc	r24, r20
 e3c:	95 1f       	adc	r25, r21
 e3e:	a0 1d       	adc	r26, r0
 e40:	08 95       	ret

00000e42 <_exit>:
 e42:	f8 94       	cli

00000e44 <__stop_program>:
 e44:	ff cf       	rjmp	.-2      	; 0xe44 <__stop_program>
