
Front_lights_module2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000bb0  00000c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800122  00800122  00000c66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f3  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  0000217b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eda  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00003a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000532  00000000  00000000  00003e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac4  00000000  00000000  00004342  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00004e06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	57 c3       	rjmp	.+1710   	; 0x6ec <__vector_15>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	e7 c2       	rjmp	.+1486   	; 0x614 <__vector_17>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e0 eb       	ldi	r30, 0xB0	; 176
  a8:	fb e0       	ldi	r31, 0x0B	; 11
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 32       	cpi	r26, 0x22	; 34
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e2       	ldi	r26, 0x22	; 34
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a4 37       	cpi	r26, 0x74	; 116
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	7d d2       	rcall	.+1274   	; 0x5c6 <main>
  cc:	6f c5       	rjmp	.+2782   	; 0xbac <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <__vector_18>:
		}
	CANGCON |= 0x02;
	CANGIE=(1<<ENIT) | (1<< ENRX);
}
	
void can_health(void) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	cf 93       	push	r28
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
  f8:	ed ee       	ldi	r30, 0xED	; 237
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	c0 81       	ld	r28, Z
  fe:	80 91 ec 00 	lds	r24, 0x00EC
 102:	68 2f       	mov	r22, r24
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	80 83       	st	Z, r24
 10a:	72 95       	swap	r23
 10c:	62 95       	swap	r22
 10e:	6f 70       	andi	r22, 0x0F	; 15
 110:	67 27       	eor	r22, r23
 112:	7f 70       	andi	r23, 0x0F	; 15
 114:	67 27       	eor	r22, r23
 116:	80 91 ee 00 	lds	r24, 0x00EE
 11a:	8f 75       	andi	r24, 0x5F	; 95
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_18+0x50>
 11e:	98 95       	break
 120:	20 91 f2 00 	lds	r18, 0x00F2
 124:	80 91 f3 00 	lds	r24, 0x00F3
 128:	e2 e2       	ldi	r30, 0x22	; 34
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	22 95       	swap	r18
 13c:	26 95       	lsr	r18
 13e:	27 70       	andi	r18, 0x07	; 7
 140:	82 2b       	or	r24, r18
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
 146:	80 91 ef 00 	lds	r24, 0x00EF
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	59 f0       	breq	.+22     	; 0x16a <__vector_18+0x9a>
 154:	e5 e2       	ldi	r30, 0x25	; 37
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	8b 5d       	subi	r24, 0xDB	; 219
 15a:	9e 4f       	sbci	r25, 0xFE	; 254
 15c:	aa ef       	ldi	r26, 0xFA	; 250
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	2c 91       	ld	r18, X
 162:	21 93       	st	Z+, r18
 164:	e8 17       	cp	r30, r24
 166:	f9 07       	cpc	r31, r25
 168:	d9 f7       	brne	.-10     	; 0x160 <__vector_18+0x90>
 16a:	10 92 ee 00 	sts	0x00EE, r1
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 ef 00 	sts	0x00EF, r24
 174:	fb 01       	movw	r30, r22
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ed 5c       	subi	r30, 0xCD	; 205
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	01 90       	ld	r0, Z+
 180:	f0 81       	ld	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	82 e2       	ldi	r24, 0x22	; 34
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	09 95       	icall
 18a:	c0 93 ed 00 	sts	0x00ED, r28
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <can_tx>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	fb 01       	movw	r30, r22
 1bc:	20 81       	ld	r18, Z
 1be:	31 81       	ldd	r19, Z+1	; 0x01
 1c0:	21 15       	cp	r18, r1
 1c2:	38 40       	sbci	r19, 0x08	; 8
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <can_tx+0x12>
 1c6:	98 95       	break
 1c8:	92 81       	ldd	r25, Z+2	; 0x02
 1ca:	99 30       	cpi	r25, 0x09	; 9
 1cc:	08 f0       	brcs	.+2      	; 0x1d0 <can_tx+0x1a>
 1ce:	98 95       	break
 1d0:	8f 30       	cpi	r24, 0x0F	; 15
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <can_tx+0x20>
 1d4:	98 95       	break
 1d6:	82 95       	swap	r24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	80 93 ed 00 	sts	0x00ED, r24
 1de:	80 91 ef 00 	lds	r24, 0x00EF
 1e2:	80 7c       	andi	r24, 0xC0	; 192
 1e4:	21 f0       	breq	.+8      	; 0x1ee <can_tx+0x38>
 1e6:	80 91 ee 00 	lds	r24, 0x00EE
 1ea:	86 ff       	sbrs	r24, 6
 1ec:	55 c0       	rjmp	.+170    	; 0x298 <can_tx+0xe2>
 1ee:	10 92 ee 00 	sts	0x00EE, r1
 1f2:	10 92 ef 00 	sts	0x00EF, r1
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	8f 3f       	cpi	r24, 0xFF	; 255
 1fa:	61 f1       	breq	.+88     	; 0x254 <can_tx+0x9e>
 1fc:	80 81       	ld	r24, Z
 1fe:	91 81       	ldd	r25, Z+1	; 0x01
 200:	96 95       	lsr	r25
 202:	87 95       	ror	r24
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	96 95       	lsr	r25
 20a:	87 95       	ror	r24
 20c:	80 93 f3 00 	sts	0x00F3, r24
 210:	80 81       	ld	r24, Z
 212:	82 95       	swap	r24
 214:	88 0f       	add	r24, r24
 216:	80 7e       	andi	r24, 0xE0	; 224
 218:	80 93 f2 00 	sts	0x00F2, r24
 21c:	10 92 f1 00 	sts	0x00F1, r1
 220:	10 92 f0 00 	sts	0x00F0, r1
 224:	22 81       	ldd	r18, Z+2	; 0x02
 226:	22 23       	and	r18, r18
 228:	79 f0       	breq	.+30     	; 0x248 <can_tx+0x92>
 22a:	df 01       	movw	r26, r30
 22c:	13 96       	adiw	r26, 0x03	; 3
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ca ef       	ldi	r28, 0xFA	; 250
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	2d 91       	ld	r18, X+
 238:	28 83       	st	Y, r18
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	22 81       	ldd	r18, Z+2	; 0x02
 23e:	42 2f       	mov	r20, r18
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	84 17       	cp	r24, r20
 244:	95 07       	cpc	r25, r21
 246:	b8 f3       	brcs	.-18     	; 0x236 <can_tx+0x80>
 248:	ef ee       	ldi	r30, 0xEF	; 239
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	28 2b       	or	r18, r24
 250:	20 83       	st	Z, r18
 252:	1b c0       	rjmp	.+54     	; 0x28a <can_tx+0xd4>
 254:	80 81       	ld	r24, Z
 256:	91 81       	ldd	r25, Z+1	; 0x01
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	80 93 f3 00 	sts	0x00F3, r24
 268:	80 81       	ld	r24, Z
 26a:	82 95       	swap	r24
 26c:	88 0f       	add	r24, r24
 26e:	80 7e       	andi	r24, 0xE0	; 224
 270:	80 93 f2 00 	sts	0x00F2, r24
 274:	10 92 f1 00 	sts	0x00F1, r1
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	80 93 f0 00 	sts	0x00F0, r24
 27e:	af ee       	ldi	r26, 0xEF	; 239
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	9c 91       	ld	r25, X
 284:	82 81       	ldd	r24, Z+2	; 0x02
 286:	89 2b       	or	r24, r25
 288:	8c 93       	st	X, r24
 28a:	ef ee       	ldi	r30, 0xEF	; 239
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	01 c0       	rjmp	.+2      	; 0x29a <can_tx+0xe4>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <prepare_rx>:
 2a0:	8f 30       	cpi	r24, 0x0F	; 15
 2a2:	08 f0       	brcs	.+2      	; 0x2a6 <prepare_rx+0x6>
 2a4:	6d c0       	rjmp	.+218    	; 0x380 <prepare_rx+0xe0>
 2a6:	e8 2f       	mov	r30, r24
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	ed 5c       	subi	r30, 0xCD	; 205
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	31 83       	std	Z+1, r19	; 0x01
 2b4:	20 83       	st	Z, r18
 2b6:	98 2f       	mov	r25, r24
 2b8:	92 95       	swap	r25
 2ba:	90 7f       	andi	r25, 0xF0	; 240
 2bc:	90 93 ed 00 	sts	0x00ED, r25
 2c0:	23 2b       	or	r18, r19
 2c2:	d9 f4       	brne	.+54     	; 0x2fa <prepare_rx+0x5a>
 2c4:	10 92 ee 00 	sts	0x00EE, r1
 2c8:	10 92 ef 00 	sts	0x00EF, r1
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	a9 01       	movw	r20, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <prepare_rx+0x38>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	8a 95       	dec	r24
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <prepare_rx+0x34>
 2dc:	ca 01       	movw	r24, r20
 2de:	ee ed       	ldi	r30, 0xDE	; 222
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	20 81       	ld	r18, Z
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	80 83       	st	Z, r24
 2ea:	ef ed       	ldi	r30, 0xDF	; 223
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	90 95       	com	r25
 2f2:	89 23       	and	r24, r25
 2f4:	80 83       	st	Z, r24
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret
 2fa:	90 91 ef 00 	lds	r25, 0x00EF
 2fe:	90 7c       	andi	r25, 0xC0	; 192
 300:	09 f0       	breq	.+2      	; 0x304 <prepare_rx+0x64>
 302:	40 c0       	rjmp	.+128    	; 0x384 <prepare_rx+0xe4>
 304:	10 92 ee 00 	sts	0x00EE, r1
 308:	ef ee       	ldi	r30, 0xEF	; 239
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	10 82       	st	Z, r1
 30e:	10 92 ec 00 	sts	0x00EC, r1
 312:	9b 01       	movw	r18, r22
 314:	36 95       	lsr	r19
 316:	27 95       	ror	r18
 318:	36 95       	lsr	r19
 31a:	27 95       	ror	r18
 31c:	36 95       	lsr	r19
 31e:	27 95       	ror	r18
 320:	20 93 f3 00 	sts	0x00F3, r18
 324:	62 95       	swap	r22
 326:	66 0f       	add	r22, r22
 328:	60 7e       	andi	r22, 0xE0	; 224
 32a:	60 93 f2 00 	sts	0x00F2, r22
 32e:	9a 01       	movw	r18, r20
 330:	36 95       	lsr	r19
 332:	27 95       	ror	r18
 334:	36 95       	lsr	r19
 336:	27 95       	ror	r18
 338:	36 95       	lsr	r19
 33a:	27 95       	ror	r18
 33c:	20 93 f7 00 	sts	0x00F7, r18
 340:	42 95       	swap	r20
 342:	44 0f       	add	r20, r20
 344:	40 7e       	andi	r20, 0xE0	; 224
 346:	40 93 f6 00 	sts	0x00F6, r20
 34a:	10 92 f5 00 	sts	0x00F5, r1
 34e:	10 92 f4 00 	sts	0x00F4, r1
 352:	90 e8       	ldi	r25, 0x80	; 128
 354:	90 83       	st	Z, r25
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <prepare_rx+0xc2>
 35e:	44 0f       	add	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <prepare_rx+0xbe>
 366:	ca 01       	movw	r24, r20
 368:	ee ed       	ldi	r30, 0xDE	; 222
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	20 81       	ld	r18, Z
 36e:	82 2b       	or	r24, r18
 370:	80 83       	st	Z, r24
 372:	ef ed       	ldi	r30, 0xDF	; 223
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	89 2b       	or	r24, r25
 37a:	80 83       	st	Z, r24
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	08 95       	ret
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	08 95       	ret

00000388 <can_init>:
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	86 e0       	ldi	r24, 0x06	; 6
 38e:	80 93 e2 00 	sts	0x00E2, r24
 392:	8c e0       	ldi	r24, 0x0C	; 12
 394:	80 93 e3 00 	sts	0x00E3, r24
 398:	8a e5       	ldi	r24, 0x5A	; 90
 39a:	80 93 e4 00 	sts	0x00E4, r24
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	cd ee       	ldi	r28, 0xED	; 237
 3a2:	d0 e0       	ldi	r29, 0x00	; 0
 3a4:	ae ee       	ldi	r26, 0xEE	; 238
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	ef ee       	ldi	r30, 0xEF	; 239
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	98 2f       	mov	r25, r24
 3ae:	92 95       	swap	r25
 3b0:	90 7f       	andi	r25, 0xF0	; 240
 3b2:	98 83       	st	Y, r25
 3b4:	1c 92       	st	X, r1
 3b6:	10 82       	st	Z, r1
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	8f 30       	cpi	r24, 0x0F	; 15
 3bc:	b9 f7       	brne	.-18     	; 0x3ac <can_init+0x24>
 3be:	e8 ed       	ldi	r30, 0xD8	; 216
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	80 83       	st	Z, r24
 3c8:	80 ea       	ldi	r24, 0xA0	; 160
 3ca:	80 93 db 00 	sts	0x00DB, r24
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <can_packet_send>:
	*/
}

BOOL can_packet_send(char mob, CAN_packet *packet) {
	/* Clear global interrupts */
	cli();
 3d4:	f8 94       	cli
	BOOL result = can_tx(mob, packet);
 3d6:	ef de       	rcall	.-546    	; 0x1b6 <can_tx>
	/* Set global interrupts */
	sei();
 3d8:	78 94       	sei
	return result;
}
 3da:	08 95       	ret

000003dc <front_lights_init>:
	return test_bit(PORTE, PE5);
}

BOOL get_angel( void) {
	return test_bit(PORTE, PE4);
}
 3dc:	6c 9a       	sbi	0x0d, 4	; 13
 3de:	6d 9a       	sbi	0x0d, 5	; 13
 3e0:	80 9a       	sbi	0x10, 0	; 16
 3e2:	81 9a       	sbi	0x10, 1	; 16
 3e4:	82 9a       	sbi	0x10, 2	; 16
 3e6:	73 98       	cbi	0x0e, 3	; 14
 3e8:	6b 9a       	sbi	0x0d, 3	; 13
 3ea:	e1 e9       	ldi	r30, 0x91	; 145
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 e1       	ldi	r24, 0x10	; 16
 3f0:	80 83       	st	Z, r24
 3f2:	a0 e9       	ldi	r26, 0x90	; 144
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	8c 91       	ld	r24, X
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	8c 93       	st	X, r24
 3fc:	80 81       	ld	r24, Z
 3fe:	82 60       	ori	r24, 0x02	; 2
 400:	80 83       	st	Z, r24
 402:	80 81       	ld	r24, Z
 404:	81 60       	ori	r24, 0x01	; 1
 406:	80 83       	st	Z, r24
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	80 93 96 00 	sts	0x0096, r24
 40e:	10 92 97 00 	sts	0x0097, r1
 412:	10 92 98 00 	sts	0x0098, r1
 416:	08 95       	ret

00000418 <front_lights_eyebrows>:
 418:	88 23       	and	r24, r24
 41a:	71 f0       	breq	.+28     	; 0x438 <front_lights_eyebrows+0x20>
 41c:	80 91 31 01 	lds	r24, 0x0131
 420:	81 11       	cpse	r24, r1
 422:	0a c0       	rjmp	.+20     	; 0x438 <front_lights_eyebrows+0x20>
 424:	80 91 30 01 	lds	r24, 0x0130
 428:	81 11       	cpse	r24, r1
 42a:	06 c0       	rjmp	.+12     	; 0x438 <front_lights_eyebrows+0x20>
 42c:	89 9a       	sbi	0x11, 1	; 17
 42e:	75 9a       	sbi	0x0e, 5	; 14
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 2f 01 	sts	0x012F, r24
 436:	08 95       	ret
 438:	89 98       	cbi	0x11, 1	; 17
 43a:	75 98       	cbi	0x0e, 5	; 14
 43c:	10 92 2f 01 	sts	0x012F, r1
 440:	08 95       	ret

00000442 <front_lights_angel_eyes>:
 442:	88 23       	and	r24, r24
 444:	11 f0       	breq	.+4      	; 0x44a <front_lights_angel_eyes+0x8>
 446:	74 9a       	sbi	0x0e, 4	; 14
 448:	08 95       	ret
 44a:	74 98       	cbi	0x0e, 4	; 14
 44c:	08 95       	ret

0000044e <front_lights_turn_left>:
 44e:	88 23       	and	r24, r24
 450:	39 f0       	breq	.+14     	; 0x460 <front_lights_turn_left+0x12>
 452:	8a 9a       	sbi	0x11, 2	; 17
 454:	80 91 2f 01 	lds	r24, 0x012F
 458:	81 11       	cpse	r24, r1
 45a:	08 c0       	rjmp	.+16     	; 0x46c <front_lights_turn_left+0x1e>
 45c:	89 9a       	sbi	0x11, 1	; 17
 45e:	08 95       	ret
 460:	8a 98       	cbi	0x11, 2	; 17
 462:	80 91 2f 01 	lds	r24, 0x012F
 466:	81 11       	cpse	r24, r1
 468:	01 c0       	rjmp	.+2      	; 0x46c <front_lights_turn_left+0x1e>
 46a:	89 98       	cbi	0x11, 1	; 17
 46c:	08 95       	ret

0000046e <front_lights_turn_right>:
 46e:	88 23       	and	r24, r24
 470:	39 f0       	breq	.+14     	; 0x480 <front_lights_turn_right+0x12>
 472:	88 9a       	sbi	0x11, 0	; 17
 474:	80 91 2f 01 	lds	r24, 0x012F
 478:	81 11       	cpse	r24, r1
 47a:	08 c0       	rjmp	.+16     	; 0x48c <front_lights_turn_right+0x1e>
 47c:	75 9a       	sbi	0x0e, 5	; 14
 47e:	08 95       	ret
 480:	88 98       	cbi	0x11, 0	; 17
 482:	80 91 2f 01 	lds	r24, 0x012F
 486:	81 11       	cpse	r24, r1
 488:	01 c0       	rjmp	.+2      	; 0x48c <front_lights_turn_right+0x1e>
 48a:	75 98       	cbi	0x0e, 5	; 14
 48c:	08 95       	ret

0000048e <front_toggle_ind_left>:
 48e:	8a 9b       	sbis	0x11, 2	; 17
 490:	03 c0       	rjmp	.+6      	; 0x498 <front_toggle_ind_left+0xa>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	dc cf       	rjmp	.-72     	; 0x44e <front_lights_turn_left>
 496:	08 95       	ret
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	d9 cf       	rjmp	.-78     	; 0x44e <front_lights_turn_left>
 49c:	08 95       	ret

0000049e <front_toggle_ind_right>:
 49e:	88 9b       	sbis	0x11, 0	; 17
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <front_toggle_ind_right+0xa>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	e4 cf       	rjmp	.-56     	; 0x46e <front_lights_turn_right>
 4a6:	08 95       	ret
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	e1 cf       	rjmp	.-62     	; 0x46e <front_lights_turn_right>
 4ac:	08 95       	ret

000004ae <front_ind_left>:
 4ae:	88 23       	and	r24, r24
 4b0:	51 f0       	breq	.+20     	; 0x4c6 <front_ind_left+0x18>
 4b2:	80 91 31 01 	lds	r24, 0x0131
 4b6:	81 11       	cpse	r24, r1
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <front_ind_left+0x14>
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	80 93 31 01 	sts	0x0131, r24
 4c0:	08 95       	ret
 4c2:	10 92 31 01 	sts	0x0131, r1
 4c6:	08 95       	ret

000004c8 <front_ind_right>:
 4c8:	88 23       	and	r24, r24
 4ca:	51 f0       	breq	.+20     	; 0x4e0 <front_ind_right+0x18>
 4cc:	80 91 30 01 	lds	r24, 0x0130
 4d0:	81 11       	cpse	r24, r1
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <front_ind_right+0x14>
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	80 93 30 01 	sts	0x0130, r24
 4da:	08 95       	ret
 4dc:	10 92 30 01 	sts	0x0130, r1
 4e0:	08 95       	ret

000004e2 <front_light_handler>:
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	ec 01       	movw	r28, r24
 4e8:	88 81       	ld	r24, Y
 4ea:	99 81       	ldd	r25, Y+1	; 0x01
 4ec:	86 30       	cpi	r24, 0x06	; 6
 4ee:	91 05       	cpc	r25, r1
 4f0:	41 f5       	brne	.+80     	; 0x542 <front_light_handler+0x60>
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	80 ff       	sbrs	r24, 0
 4f6:	09 c0       	rjmp	.+18     	; 0x50a <front_light_handler+0x28>
 4f8:	8e e1       	ldi	r24, 0x1E	; 30
 4fa:	80 93 98 00 	sts	0x0098, r24
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 2e 01 	sts	0x012E, r24
 504:	10 92 2d 01 	sts	0x012D, r1
 508:	11 c0       	rjmp	.+34     	; 0x52c <front_light_handler+0x4a>
 50a:	81 ff       	sbrs	r24, 1
 50c:	09 c0       	rjmp	.+18     	; 0x520 <front_light_handler+0x3e>
 50e:	86 e9       	ldi	r24, 0x96	; 150
 510:	80 93 98 00 	sts	0x0098, r24
 514:	10 92 2e 01 	sts	0x012E, r1
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	80 93 2d 01 	sts	0x012D, r24
 51e:	06 c0       	rjmp	.+12     	; 0x52c <front_light_handler+0x4a>
 520:	10 92 98 00 	sts	0x0098, r1
 524:	10 92 2e 01 	sts	0x012E, r1
 528:	10 92 2d 01 	sts	0x012D, r1
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	88 70       	andi	r24, 0x08	; 8
 530:	73 df       	rcall	.-282    	; 0x418 <front_lights_eyebrows>
 532:	8b 81       	ldd	r24, Y+3	; 0x03
 534:	84 70       	andi	r24, 0x04	; 4
 536:	85 df       	rcall	.-246    	; 0x442 <front_lights_angel_eyes>
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	80 71       	andi	r24, 0x10	; 16
 53c:	80 93 32 01 	sts	0x0132, r24
 540:	08 c0       	rjmp	.+16     	; 0x552 <front_light_handler+0x70>
 542:	05 97       	sbiw	r24, 0x05	; 5
 544:	31 f4       	brne	.+12     	; 0x552 <front_light_handler+0x70>
 546:	8b 81       	ldd	r24, Y+3	; 0x03
 548:	81 70       	andi	r24, 0x01	; 1
 54a:	be df       	rcall	.-132    	; 0x4c8 <front_ind_right>
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	82 70       	andi	r24, 0x02	; 2
 550:	ae df       	rcall	.-164    	; 0x4ae <front_ind_left>
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <get_light_status>:

void get_light_status(CAN_packet* p) {
 558:	fc 01       	movw	r30, r24
	p->data[0] = 0;
 55a:	13 82       	std	Z+3, r1	; 0x03
	if(SHORT_LIGHT)
 55c:	80 91 2e 01 	lds	r24, 0x012E
 560:	88 23       	and	r24, r24
 562:	11 f0       	breq	.+4      	; 0x568 <get_light_status+0x10>
		p->data[0] |= (1<<0);
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	83 83       	std	Z+3, r24	; 0x03
	if(FAR_LIGHT)
 568:	80 91 2d 01 	lds	r24, 0x012D
 56c:	88 23       	and	r24, r24
 56e:	19 f0       	breq	.+6      	; 0x576 <get_light_status+0x1e>
		p->data[0] |= (1<<1);
 570:	83 81       	ldd	r24, Z+3	; 0x03
 572:	82 60       	ori	r24, 0x02	; 2
 574:	83 83       	std	Z+3, r24	; 0x03
	if(get_ind_left)
		p->data[0] |= (1<<2);
 576:	83 81       	ldd	r24, Z+3	; 0x03
 578:	98 2f       	mov	r25, r24
 57a:	94 60       	ori	r25, 0x04	; 4
 57c:	93 83       	std	Z+3, r25	; 0x03
	if(get_ind_right())
 57e:	88 9b       	sbis	0x11, 0	; 17
 580:	02 c0       	rjmp	.+4      	; 0x586 <get_light_status+0x2e>
		p->data[0] |= (1<<3);
 582:	8c 60       	ori	r24, 0x0C	; 12
 584:	83 83       	std	Z+3, r24	; 0x03
	if(get_eyebrows())
 586:	75 9b       	sbis	0x0e, 5	; 14
 588:	03 c0       	rjmp	.+6      	; 0x590 <get_light_status+0x38>
		p->data[0] |= (1<<4);
 58a:	83 81       	ldd	r24, Z+3	; 0x03
 58c:	80 61       	ori	r24, 0x10	; 16
 58e:	83 83       	std	Z+3, r24	; 0x03
	if(get_angel())
 590:	74 9b       	sbis	0x0e, 4	; 14
 592:	03 c0       	rjmp	.+6      	; 0x59a <get_light_status+0x42>
		p->data[0] |= (1<<5);
 594:	83 81       	ldd	r24, Z+3	; 0x03
 596:	80 62       	ori	r24, 0x20	; 32
 598:	83 83       	std	Z+3, r24	; 0x03
	if(EMERG)
 59a:	80 91 32 01 	lds	r24, 0x0132
 59e:	88 23       	and	r24, r24
 5a0:	19 f0       	breq	.+6      	; 0x5a8 <get_light_status+0x50>
		p->data[0] |= (1<<6);
 5a2:	83 81       	ldd	r24, Z+3	; 0x03
 5a4:	80 64       	ori	r24, 0x40	; 64
 5a6:	83 83       	std	Z+3, r24	; 0x03
 5a8:	08 95       	ret

000005aa <inits>:
#include <stdio.h>
#include "front_lights_module.h"
#include "timer1.h"

void inits(void) {
	can_init();
 5aa:	ee de       	rcall	.-548    	; 0x388 <can_init>
	USART_init(MYUBRR, true);
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	83 e3       	ldi	r24, 0x33	; 51
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	10 d1       	rcall	.+544    	; 0x7d4 <USART_init>
	front_lights_init();
 5b4:	13 df       	rcall	.-474    	; 0x3dc <front_lights_init>
	timer1_init();
 5b6:	7f d0       	rcall	.+254    	; 0x6b6 <timer1_init>
	timer0_init();
 5b8:	12 d0       	rcall	.+36     	; 0x5de <timer0_init>
	
	printf("\r\nFront lights initialized\n");
 5ba:	86 e0       	ldi	r24, 0x06	; 6
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	78 d1       	rcall	.+752    	; 0x8b0 <puts>
	set_bit(DDRB, DDB6);
 5c0:	26 9a       	sbi	0x04, 6	; 4
	clear_bit(PORTB, PB6);
 5c2:	2e 98       	cbi	0x05, 6	; 5
 5c4:	08 95       	ret

000005c6 <main>:
}

int main(void)
{
	inits();
 5c6:	f1 df       	rcall	.-30     	; 0x5aa <inits>
	
	prepare_rx(0, ID_steeringWheel, MASK_FRONT_LIGHTS, front_light_handler);
 5c8:	21 e7       	ldi	r18, 0x71	; 113
 5ca:	32 e0       	ldi	r19, 0x02	; 2
 5cc:	44 e0       	ldi	r20, 0x04	; 4
 5ce:	50 e0       	ldi	r21, 0x00	; 0
 5d0:	65 e0       	ldi	r22, 0x05	; 5
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	64 de       	rcall	.-824    	; 0x2a0 <prepare_rx>
	/* Set global interrupts */
	sei();
 5d8:	78 94       	sei
	
	for(;;)
		asm("sleep");;
 5da:	88 95       	sleep
 5dc:	fe cf       	rjmp	.-4      	; 0x5da <main+0x14>

000005de <timer0_init>:
CAN_packet current_msg;
CAN_packet updated_msg;

void timer0_init( void) {
	/* clk/1024 */
	set_bit(TCCR0A, CS02);
 5de:	84 b5       	in	r24, 0x24	; 36
 5e0:	84 60       	ori	r24, 0x04	; 4
 5e2:	84 bd       	out	0x24, r24	; 36
	set_bit(TCCR0A, CS00);
 5e4:	84 b5       	in	r24, 0x24	; 36
 5e6:	81 60       	ori	r24, 0x01	; 1
 5e8:	84 bd       	out	0x24, r24	; 36
	/* Enable timer overflow */
	set_bit(TIMSK0, TOIE0);
 5ea:	ee e6       	ldi	r30, 0x6E	; 110
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	81 60       	ori	r24, 0x01	; 1
 5f2:	80 83       	st	Z, r24
	
	current_msg.id = ID_lightsFront;
 5f4:	ef e5       	ldi	r30, 0x5F	; 95
 5f6:	f1 e0       	ldi	r31, 0x01	; 1
 5f8:	21 e5       	ldi	r18, 0x51	; 81
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	31 83       	std	Z+1, r19	; 0x01
 5fe:	20 83       	st	Z, r18
	current_msg.length = 1;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	82 83       	std	Z+2, r24	; 0x02
	current_msg.data[0] = 0;
 604:	13 82       	std	Z+3, r1	; 0x03
	updated_msg.id = ID_lightsFront;
 606:	e4 e5       	ldi	r30, 0x54	; 84
 608:	f1 e0       	ldi	r31, 0x01	; 1
 60a:	31 83       	std	Z+1, r19	; 0x01
 60c:	20 83       	st	Z, r18
	updated_msg.length = 1;
 60e:	82 83       	std	Z+2, r24	; 0x02
	updated_msg.data[0] = 0;
 610:	13 82       	std	Z+3, r1	; 0x03
 612:	08 95       	ret

00000614 <__vector_17>:
}

ISR(TIMER0_OVF_vect) {
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	0f 92       	push	r0
 61c:	11 24       	eor	r1, r1
 61e:	0b b6       	in	r0, 0x3b	; 59
 620:	0f 92       	push	r0
 622:	2f 93       	push	r18
 624:	3f 93       	push	r19
 626:	4f 93       	push	r20
 628:	5f 93       	push	r21
 62a:	6f 93       	push	r22
 62c:	7f 93       	push	r23
 62e:	8f 93       	push	r24
 630:	9f 93       	push	r25
 632:	af 93       	push	r26
 634:	bf 93       	push	r27
 636:	ef 93       	push	r30
 638:	ff 93       	push	r31
	
	cli();
 63a:	f8 94       	cli
	get_light_status(&updated_msg);
 63c:	84 e5       	ldi	r24, 0x54	; 84
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	8b df       	rcall	.-234    	; 0x558 <get_light_status>
	sei();
 642:	78 94       	sei
	
	different = memcmp(current_msg.data, updated_msg.data, current_msg.length);
 644:	40 91 61 01 	lds	r20, 0x0161
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	67 e5       	ldi	r22, 0x57	; 87
 64c:	71 e0       	ldi	r23, 0x01	; 1
 64e:	82 e6       	ldi	r24, 0x62	; 98
 650:	91 e0       	ldi	r25, 0x01	; 1
 652:	d7 d0       	rcall	.+430    	; 0x802 <memcmp>
 654:	90 93 52 01 	sts	0x0152, r25
 658:	80 93 51 01 	sts	0x0151, r24
	if(different) {
 65c:	89 2b       	or	r24, r25
 65e:	79 f0       	breq	.+30     	; 0x67e <__vector_17+0x6a>
		/* Send a message with new data */
		ret = can_packet_send(1, &updated_msg);
 660:	64 e5       	ldi	r22, 0x54	; 84
 662:	71 e0       	ldi	r23, 0x01	; 1
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	b6 de       	rcall	.-660    	; 0x3d4 <can_packet_send>
 668:	80 93 53 01 	sts	0x0153, r24
		current_msg = updated_msg;
 66c:	8b e0       	ldi	r24, 0x0B	; 11
 66e:	e4 e5       	ldi	r30, 0x54	; 84
 670:	f1 e0       	ldi	r31, 0x01	; 1
 672:	af e5       	ldi	r26, 0x5F	; 95
 674:	b1 e0       	ldi	r27, 0x01	; 1
 676:	01 90       	ld	r0, Z+
 678:	0d 92       	st	X+, r0
 67a:	8a 95       	dec	r24
 67c:	e1 f7       	brne	.-8      	; 0x676 <__vector_17+0x62>
	}
	if (ret) {
 67e:	80 91 53 01 	lds	r24, 0x0153
 682:	88 23       	and	r24, r24
 684:	21 f0       	breq	.+8      	; 0x68e <__vector_17+0x7a>
		set_bit(DDRB, PB7);
 686:	27 9a       	sbi	0x04, 7	; 4
		ret = FALSE;
 688:	10 92 53 01 	sts	0x0153, r1
 68c:	01 c0       	rjmp	.+2      	; 0x690 <__vector_17+0x7c>
	} else
	clear_bit(DDRB, PB7);	
 68e:	27 98       	cbi	0x04, 7	; 4
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0b be       	out	0x3b, r0	; 59
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <timer1_init>:
	/* DIsable interrupts */
	cli(); // same as cli()?
	/* Set TCNT1 to i */
	TCNT1 = i;
	/* Restore global interrupt flag */
	SREG = sreg;
 6b6:	e1 e8       	ldi	r30, 0x81	; 129
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	82 60       	ori	r24, 0x02	; 2
 6be:	80 83       	st	Z, r24
 6c0:	80 81       	ld	r24, Z
 6c2:	81 60       	ori	r24, 0x01	; 1
 6c4:	80 83       	st	Z, r24
 6c6:	10 92 85 00 	sts	0x0085, r1
 6ca:	10 92 84 00 	sts	0x0084, r1
 6ce:	ef e6       	ldi	r30, 0x6F	; 111
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	81 60       	ori	r24, 0x01	; 1
 6d6:	80 83       	st	Z, r24
 6d8:	78 94       	sei
 6da:	e0 e8       	ldi	r30, 0x80	; 128
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	80 68       	ori	r24, 0x80	; 128
 6e2:	80 83       	st	Z, r24
 6e4:	80 81       	ld	r24, Z
 6e6:	8f 7b       	andi	r24, 0xBF	; 191
 6e8:	80 83       	st	Z, r24
 6ea:	08 95       	ret

000006ec <__vector_15>:
}


ISR(TIMER1_OVF_vect) {
 6ec:	1f 92       	push	r1
 6ee:	0f 92       	push	r0
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	0f 92       	push	r0
 6f4:	11 24       	eor	r1, r1
 6f6:	0b b6       	in	r0, 0x3b	; 59
 6f8:	0f 92       	push	r0
 6fa:	2f 93       	push	r18
 6fc:	3f 93       	push	r19
 6fe:	4f 93       	push	r20
 700:	5f 93       	push	r21
 702:	6f 93       	push	r22
 704:	7f 93       	push	r23
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	af 93       	push	r26
 70c:	bf 93       	push	r27
 70e:	ef 93       	push	r30
 710:	ff 93       	push	r31
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	2b 97       	sbiw	r28, 0x0b	; 11
 71c:	de bf       	out	0x3e, r29	; 62
 71e:	cd bf       	out	0x3d, r28	; 61
	/* Indicator lights */
	if ((!EMERG) && IND_LEFT) {
 720:	80 91 32 01 	lds	r24, 0x0132
 724:	81 11       	cpse	r24, r1
 726:	06 c0       	rjmp	.+12     	; 0x734 <__vector_15+0x48>
 728:	80 91 31 01 	lds	r24, 0x0131
 72c:	88 23       	and	r24, r24
 72e:	11 f0       	breq	.+4      	; 0x734 <__vector_15+0x48>
		// toggle the left indicator
		front_toggle_ind_left();
 730:	ae de       	rcall	.-676    	; 0x48e <front_toggle_ind_left>
 732:	02 c0       	rjmp	.+4      	; 0x738 <__vector_15+0x4c>
	} else 
		front_lights_turn_left(FALSE);
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	8b de       	rcall	.-746    	; 0x44e <front_lights_turn_left>
	if ((!EMERG) && IND_RIGHT) {
 738:	80 91 32 01 	lds	r24, 0x0132
 73c:	81 11       	cpse	r24, r1
 73e:	06 c0       	rjmp	.+12     	; 0x74c <__vector_15+0x60>
 740:	80 91 30 01 	lds	r24, 0x0130
 744:	88 23       	and	r24, r24
 746:	11 f0       	breq	.+4      	; 0x74c <__vector_15+0x60>
		// toggle the right indicator
		front_toggle_ind_right();
 748:	aa de       	rcall	.-684    	; 0x49e <front_toggle_ind_right>
 74a:	02 c0       	rjmp	.+4      	; 0x750 <__vector_15+0x64>
	} else
		front_lights_turn_right(FALSE);
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	8f de       	rcall	.-738    	; 0x46e <front_lights_turn_right>
// 		front_ind_right(EMERG);	
// 	}
	/* Send a "I'm alive" message with the data */
	CAN_packet p;
	BOOL ret = FALSE;
	p.id = ID_lightsFront;
 750:	81 e5       	ldi	r24, 0x51	; 81
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	9a 83       	std	Y+2, r25	; 0x02
 756:	89 83       	std	Y+1, r24	; 0x01
	p.length = 1;
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	8b 83       	std	Y+3, r24	; 0x03
	cli();
 75c:	f8 94       	cli
	get_light_status(&p);
 75e:	ce 01       	movw	r24, r28
 760:	01 96       	adiw	r24, 0x01	; 1
 762:	fa de       	rcall	.-524    	; 0x558 <get_light_status>
	ret = can_packet_send(10, &p);
 764:	be 01       	movw	r22, r28
 766:	6f 5f       	subi	r22, 0xFF	; 255
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8a e0       	ldi	r24, 0x0A	; 10
 76c:	33 de       	rcall	.-922    	; 0x3d4 <can_packet_send>
	sei();
 76e:	78 94       	sei
	if(ret)
 770:	88 23       	and	r24, r24
 772:	21 f0       	breq	.+8      	; 0x77c <__vector_15+0x90>
	toggle_bit(DDRB, PB5);
 774:	94 b1       	in	r25, 0x04	; 4
 776:	80 e2       	ldi	r24, 0x20	; 32
 778:	89 27       	eor	r24, r25
 77a:	84 b9       	out	0x04, r24	; 4
	ret = FALSE;
 77c:	2b 96       	adiw	r28, 0x0b	; 11
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	f8 94       	cli
 782:	de bf       	out	0x3e, r29	; 62
 784:	0f be       	out	0x3f, r0	; 63
 786:	cd bf       	out	0x3d, r28	; 61
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	ff 91       	pop	r31
 78e:	ef 91       	pop	r30
 790:	bf 91       	pop	r27
 792:	af 91       	pop	r26
 794:	9f 91       	pop	r25
 796:	8f 91       	pop	r24
 798:	7f 91       	pop	r23
 79a:	6f 91       	pop	r22
 79c:	5f 91       	pop	r21
 79e:	4f 91       	pop	r20
 7a0:	3f 91       	pop	r19
 7a2:	2f 91       	pop	r18
 7a4:	0f 90       	pop	r0
 7a6:	0b be       	out	0x3b, r0	; 59
 7a8:	0f 90       	pop	r0
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	0f 90       	pop	r0
 7ae:	1f 90       	pop	r1
 7b0:	18 95       	reti

000007b2 <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 7b2:	e0 ec       	ldi	r30, 0xC0	; 192
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	90 81       	ld	r25, Z
 7b8:	95 ff       	sbrs	r25, 5
 7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 7bc:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	08 95       	ret

000007c4 <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 7c4:	e0 ec       	ldi	r30, 0xC0	; 192
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	88 23       	and	r24, r24
 7cc:	ec f7       	brge	.-6      	; 0x7c8 <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 7ce:	80 91 c6 00 	lds	r24, 0x00C6
}
 7d2:	08 95       	ret

000007d4 <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 7d4:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 7d8:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 7dc:	86 e0       	ldi	r24, 0x06	; 6
 7de:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 7e2:	66 23       	and	r22, r22
 7e4:	41 f0       	breq	.+16     	; 0x7f6 <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 7e6:	e1 ec       	ldi	r30, 0xC1	; 193
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	80 61       	ori	r24, 0x10	; 16
 7ee:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 7f0:	80 81       	ld	r24, Z
 7f2:	88 60       	ori	r24, 0x08	; 8
 7f4:	80 83       	st	Z, r24
	}
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 7f6:	62 ee       	ldi	r22, 0xE2	; 226
 7f8:	73 e0       	ldi	r23, 0x03	; 3
 7fa:	89 ed       	ldi	r24, 0xD9	; 217
 7fc:	93 e0       	ldi	r25, 0x03	; 3
 7fe:	0e c0       	rjmp	.+28     	; 0x81c <fdevopen>
 800:	08 95       	ret

00000802 <memcmp>:
 802:	fb 01       	movw	r30, r22
 804:	dc 01       	movw	r26, r24
 806:	04 c0       	rjmp	.+8      	; 0x810 <memcmp+0xe>
 808:	8d 91       	ld	r24, X+
 80a:	01 90       	ld	r0, Z+
 80c:	80 19       	sub	r24, r0
 80e:	21 f4       	brne	.+8      	; 0x818 <memcmp+0x16>
 810:	41 50       	subi	r20, 0x01	; 1
 812:	50 40       	sbci	r21, 0x00	; 0
 814:	c8 f7       	brcc	.-14     	; 0x808 <memcmp+0x6>
 816:	88 1b       	sub	r24, r24
 818:	99 0b       	sbc	r25, r25
 81a:	08 95       	ret

0000081c <fdevopen>:
 81c:	0f 93       	push	r16
 81e:	1f 93       	push	r17
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	00 97       	sbiw	r24, 0x00	; 0
 826:	31 f4       	brne	.+12     	; 0x834 <fdevopen+0x18>
 828:	61 15       	cp	r22, r1
 82a:	71 05       	cpc	r23, r1
 82c:	19 f4       	brne	.+6      	; 0x834 <fdevopen+0x18>
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	39 c0       	rjmp	.+114    	; 0x8a6 <fdevopen+0x8a>
 834:	8b 01       	movw	r16, r22
 836:	ec 01       	movw	r28, r24
 838:	6e e0       	ldi	r22, 0x0E	; 14
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	67 d0       	rcall	.+206    	; 0x910 <calloc>
 842:	fc 01       	movw	r30, r24
 844:	89 2b       	or	r24, r25
 846:	99 f3       	breq	.-26     	; 0x82e <fdevopen+0x12>
 848:	80 e8       	ldi	r24, 0x80	; 128
 84a:	83 83       	std	Z+3, r24	; 0x03
 84c:	01 15       	cp	r16, r1
 84e:	11 05       	cpc	r17, r1
 850:	71 f0       	breq	.+28     	; 0x86e <fdevopen+0x52>
 852:	13 87       	std	Z+11, r17	; 0x0b
 854:	02 87       	std	Z+10, r16	; 0x0a
 856:	81 e8       	ldi	r24, 0x81	; 129
 858:	83 83       	std	Z+3, r24	; 0x03
 85a:	80 91 6a 01 	lds	r24, 0x016A
 85e:	90 91 6b 01 	lds	r25, 0x016B
 862:	89 2b       	or	r24, r25
 864:	21 f4       	brne	.+8      	; 0x86e <fdevopen+0x52>
 866:	f0 93 6b 01 	sts	0x016B, r31
 86a:	e0 93 6a 01 	sts	0x016A, r30
 86e:	20 97       	sbiw	r28, 0x00	; 0
 870:	c9 f0       	breq	.+50     	; 0x8a4 <fdevopen+0x88>
 872:	d1 87       	std	Z+9, r29	; 0x09
 874:	c0 87       	std	Z+8, r28	; 0x08
 876:	83 81       	ldd	r24, Z+3	; 0x03
 878:	82 60       	ori	r24, 0x02	; 2
 87a:	83 83       	std	Z+3, r24	; 0x03
 87c:	80 91 6c 01 	lds	r24, 0x016C
 880:	90 91 6d 01 	lds	r25, 0x016D
 884:	89 2b       	or	r24, r25
 886:	71 f4       	brne	.+28     	; 0x8a4 <fdevopen+0x88>
 888:	f0 93 6d 01 	sts	0x016D, r31
 88c:	e0 93 6c 01 	sts	0x016C, r30
 890:	80 91 6e 01 	lds	r24, 0x016E
 894:	90 91 6f 01 	lds	r25, 0x016F
 898:	89 2b       	or	r24, r25
 89a:	21 f4       	brne	.+8      	; 0x8a4 <fdevopen+0x88>
 89c:	f0 93 6f 01 	sts	0x016F, r31
 8a0:	e0 93 6e 01 	sts	0x016E, r30
 8a4:	cf 01       	movw	r24, r30
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	1f 91       	pop	r17
 8ac:	0f 91       	pop	r16
 8ae:	08 95       	ret

000008b0 <puts>:
 8b0:	0f 93       	push	r16
 8b2:	1f 93       	push	r17
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	e0 91 6c 01 	lds	r30, 0x016C
 8bc:	f0 91 6d 01 	lds	r31, 0x016D
 8c0:	23 81       	ldd	r18, Z+3	; 0x03
 8c2:	21 ff       	sbrs	r18, 1
 8c4:	1b c0       	rjmp	.+54     	; 0x8fc <puts+0x4c>
 8c6:	8c 01       	movw	r16, r24
 8c8:	d0 e0       	ldi	r29, 0x00	; 0
 8ca:	c0 e0       	ldi	r28, 0x00	; 0
 8cc:	f8 01       	movw	r30, r16
 8ce:	81 91       	ld	r24, Z+
 8d0:	8f 01       	movw	r16, r30
 8d2:	60 91 6c 01 	lds	r22, 0x016C
 8d6:	70 91 6d 01 	lds	r23, 0x016D
 8da:	db 01       	movw	r26, r22
 8dc:	18 96       	adiw	r26, 0x08	; 8
 8de:	ed 91       	ld	r30, X+
 8e0:	fc 91       	ld	r31, X
 8e2:	19 97       	sbiw	r26, 0x09	; 9
 8e4:	88 23       	and	r24, r24
 8e6:	31 f0       	breq	.+12     	; 0x8f4 <puts+0x44>
 8e8:	09 95       	icall
 8ea:	89 2b       	or	r24, r25
 8ec:	79 f3       	breq	.-34     	; 0x8cc <puts+0x1c>
 8ee:	df ef       	ldi	r29, 0xFF	; 255
 8f0:	cf ef       	ldi	r28, 0xFF	; 255
 8f2:	ec cf       	rjmp	.-40     	; 0x8cc <puts+0x1c>
 8f4:	8a e0       	ldi	r24, 0x0A	; 10
 8f6:	09 95       	icall
 8f8:	89 2b       	or	r24, r25
 8fa:	19 f0       	breq	.+6      	; 0x902 <puts+0x52>
 8fc:	8f ef       	ldi	r24, 0xFF	; 255
 8fe:	9f ef       	ldi	r25, 0xFF	; 255
 900:	02 c0       	rjmp	.+4      	; 0x906 <puts+0x56>
 902:	8d 2f       	mov	r24, r29
 904:	9c 2f       	mov	r25, r28
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	1f 91       	pop	r17
 90c:	0f 91       	pop	r16
 90e:	08 95       	ret

00000910 <calloc>:
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	86 9f       	mul	r24, r22
 91a:	80 01       	movw	r16, r0
 91c:	87 9f       	mul	r24, r23
 91e:	10 0d       	add	r17, r0
 920:	96 9f       	mul	r25, r22
 922:	10 0d       	add	r17, r0
 924:	11 24       	eor	r1, r1
 926:	c8 01       	movw	r24, r16
 928:	0d d0       	rcall	.+26     	; 0x944 <malloc>
 92a:	ec 01       	movw	r28, r24
 92c:	00 97       	sbiw	r24, 0x00	; 0
 92e:	21 f0       	breq	.+8      	; 0x938 <calloc+0x28>
 930:	a8 01       	movw	r20, r16
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	70 e0       	ldi	r23, 0x00	; 0
 936:	33 d1       	rcall	.+614    	; 0xb9e <memset>
 938:	ce 01       	movw	r24, r28
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	1f 91       	pop	r17
 940:	0f 91       	pop	r16
 942:	08 95       	ret

00000944 <malloc>:
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	82 30       	cpi	r24, 0x02	; 2
 94a:	91 05       	cpc	r25, r1
 94c:	10 f4       	brcc	.+4      	; 0x952 <malloc+0xe>
 94e:	82 e0       	ldi	r24, 0x02	; 2
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	e0 91 72 01 	lds	r30, 0x0172
 956:	f0 91 73 01 	lds	r31, 0x0173
 95a:	20 e0       	ldi	r18, 0x00	; 0
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	c0 e0       	ldi	r28, 0x00	; 0
 960:	d0 e0       	ldi	r29, 0x00	; 0
 962:	30 97       	sbiw	r30, 0x00	; 0
 964:	11 f1       	breq	.+68     	; 0x9aa <malloc+0x66>
 966:	40 81       	ld	r20, Z
 968:	51 81       	ldd	r21, Z+1	; 0x01
 96a:	48 17       	cp	r20, r24
 96c:	59 07       	cpc	r21, r25
 96e:	c0 f0       	brcs	.+48     	; 0x9a0 <malloc+0x5c>
 970:	48 17       	cp	r20, r24
 972:	59 07       	cpc	r21, r25
 974:	61 f4       	brne	.+24     	; 0x98e <malloc+0x4a>
 976:	82 81       	ldd	r24, Z+2	; 0x02
 978:	93 81       	ldd	r25, Z+3	; 0x03
 97a:	20 97       	sbiw	r28, 0x00	; 0
 97c:	19 f0       	breq	.+6      	; 0x984 <malloc+0x40>
 97e:	9b 83       	std	Y+3, r25	; 0x03
 980:	8a 83       	std	Y+2, r24	; 0x02
 982:	2b c0       	rjmp	.+86     	; 0x9da <malloc+0x96>
 984:	90 93 73 01 	sts	0x0173, r25
 988:	80 93 72 01 	sts	0x0172, r24
 98c:	26 c0       	rjmp	.+76     	; 0x9da <malloc+0x96>
 98e:	21 15       	cp	r18, r1
 990:	31 05       	cpc	r19, r1
 992:	19 f0       	breq	.+6      	; 0x99a <malloc+0x56>
 994:	42 17       	cp	r20, r18
 996:	53 07       	cpc	r21, r19
 998:	18 f4       	brcc	.+6      	; 0x9a0 <malloc+0x5c>
 99a:	9a 01       	movw	r18, r20
 99c:	be 01       	movw	r22, r28
 99e:	df 01       	movw	r26, r30
 9a0:	ef 01       	movw	r28, r30
 9a2:	02 80       	ldd	r0, Z+2	; 0x02
 9a4:	f3 81       	ldd	r31, Z+3	; 0x03
 9a6:	e0 2d       	mov	r30, r0
 9a8:	dc cf       	rjmp	.-72     	; 0x962 <malloc+0x1e>
 9aa:	21 15       	cp	r18, r1
 9ac:	31 05       	cpc	r19, r1
 9ae:	09 f1       	breq	.+66     	; 0x9f2 <malloc+0xae>
 9b0:	28 1b       	sub	r18, r24
 9b2:	39 0b       	sbc	r19, r25
 9b4:	24 30       	cpi	r18, 0x04	; 4
 9b6:	31 05       	cpc	r19, r1
 9b8:	90 f4       	brcc	.+36     	; 0x9de <malloc+0x9a>
 9ba:	12 96       	adiw	r26, 0x02	; 2
 9bc:	8d 91       	ld	r24, X+
 9be:	9c 91       	ld	r25, X
 9c0:	13 97       	sbiw	r26, 0x03	; 3
 9c2:	61 15       	cp	r22, r1
 9c4:	71 05       	cpc	r23, r1
 9c6:	21 f0       	breq	.+8      	; 0x9d0 <malloc+0x8c>
 9c8:	fb 01       	movw	r30, r22
 9ca:	93 83       	std	Z+3, r25	; 0x03
 9cc:	82 83       	std	Z+2, r24	; 0x02
 9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <malloc+0x94>
 9d0:	90 93 73 01 	sts	0x0173, r25
 9d4:	80 93 72 01 	sts	0x0172, r24
 9d8:	fd 01       	movw	r30, r26
 9da:	32 96       	adiw	r30, 0x02	; 2
 9dc:	44 c0       	rjmp	.+136    	; 0xa66 <malloc+0x122>
 9de:	fd 01       	movw	r30, r26
 9e0:	e2 0f       	add	r30, r18
 9e2:	f3 1f       	adc	r31, r19
 9e4:	81 93       	st	Z+, r24
 9e6:	91 93       	st	Z+, r25
 9e8:	22 50       	subi	r18, 0x02	; 2
 9ea:	31 09       	sbc	r19, r1
 9ec:	2d 93       	st	X+, r18
 9ee:	3c 93       	st	X, r19
 9f0:	3a c0       	rjmp	.+116    	; 0xa66 <malloc+0x122>
 9f2:	20 91 70 01 	lds	r18, 0x0170
 9f6:	30 91 71 01 	lds	r19, 0x0171
 9fa:	23 2b       	or	r18, r19
 9fc:	41 f4       	brne	.+16     	; 0xa0e <malloc+0xca>
 9fe:	20 91 02 01 	lds	r18, 0x0102
 a02:	30 91 03 01 	lds	r19, 0x0103
 a06:	30 93 71 01 	sts	0x0171, r19
 a0a:	20 93 70 01 	sts	0x0170, r18
 a0e:	20 91 00 01 	lds	r18, 0x0100
 a12:	30 91 01 01 	lds	r19, 0x0101
 a16:	21 15       	cp	r18, r1
 a18:	31 05       	cpc	r19, r1
 a1a:	41 f4       	brne	.+16     	; 0xa2c <malloc+0xe8>
 a1c:	2d b7       	in	r18, 0x3d	; 61
 a1e:	3e b7       	in	r19, 0x3e	; 62
 a20:	40 91 04 01 	lds	r20, 0x0104
 a24:	50 91 05 01 	lds	r21, 0x0105
 a28:	24 1b       	sub	r18, r20
 a2a:	35 0b       	sbc	r19, r21
 a2c:	e0 91 70 01 	lds	r30, 0x0170
 a30:	f0 91 71 01 	lds	r31, 0x0171
 a34:	e2 17       	cp	r30, r18
 a36:	f3 07       	cpc	r31, r19
 a38:	a0 f4       	brcc	.+40     	; 0xa62 <malloc+0x11e>
 a3a:	2e 1b       	sub	r18, r30
 a3c:	3f 0b       	sbc	r19, r31
 a3e:	28 17       	cp	r18, r24
 a40:	39 07       	cpc	r19, r25
 a42:	78 f0       	brcs	.+30     	; 0xa62 <malloc+0x11e>
 a44:	ac 01       	movw	r20, r24
 a46:	4e 5f       	subi	r20, 0xFE	; 254
 a48:	5f 4f       	sbci	r21, 0xFF	; 255
 a4a:	24 17       	cp	r18, r20
 a4c:	35 07       	cpc	r19, r21
 a4e:	48 f0       	brcs	.+18     	; 0xa62 <malloc+0x11e>
 a50:	4e 0f       	add	r20, r30
 a52:	5f 1f       	adc	r21, r31
 a54:	50 93 71 01 	sts	0x0171, r21
 a58:	40 93 70 01 	sts	0x0170, r20
 a5c:	81 93       	st	Z+, r24
 a5e:	91 93       	st	Z+, r25
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <malloc+0x122>
 a62:	e0 e0       	ldi	r30, 0x00	; 0
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	cf 01       	movw	r24, r30
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	08 95       	ret

00000a6e <free>:
 a6e:	0f 93       	push	r16
 a70:	1f 93       	push	r17
 a72:	cf 93       	push	r28
 a74:	df 93       	push	r29
 a76:	00 97       	sbiw	r24, 0x00	; 0
 a78:	09 f4       	brne	.+2      	; 0xa7c <free+0xe>
 a7a:	8c c0       	rjmp	.+280    	; 0xb94 <free+0x126>
 a7c:	fc 01       	movw	r30, r24
 a7e:	32 97       	sbiw	r30, 0x02	; 2
 a80:	13 82       	std	Z+3, r1	; 0x03
 a82:	12 82       	std	Z+2, r1	; 0x02
 a84:	00 91 72 01 	lds	r16, 0x0172
 a88:	10 91 73 01 	lds	r17, 0x0173
 a8c:	01 15       	cp	r16, r1
 a8e:	11 05       	cpc	r17, r1
 a90:	81 f4       	brne	.+32     	; 0xab2 <free+0x44>
 a92:	20 81       	ld	r18, Z
 a94:	31 81       	ldd	r19, Z+1	; 0x01
 a96:	82 0f       	add	r24, r18
 a98:	93 1f       	adc	r25, r19
 a9a:	20 91 70 01 	lds	r18, 0x0170
 a9e:	30 91 71 01 	lds	r19, 0x0171
 aa2:	28 17       	cp	r18, r24
 aa4:	39 07       	cpc	r19, r25
 aa6:	79 f5       	brne	.+94     	; 0xb06 <free+0x98>
 aa8:	f0 93 71 01 	sts	0x0171, r31
 aac:	e0 93 70 01 	sts	0x0170, r30
 ab0:	71 c0       	rjmp	.+226    	; 0xb94 <free+0x126>
 ab2:	d8 01       	movw	r26, r16
 ab4:	40 e0       	ldi	r20, 0x00	; 0
 ab6:	50 e0       	ldi	r21, 0x00	; 0
 ab8:	ae 17       	cp	r26, r30
 aba:	bf 07       	cpc	r27, r31
 abc:	50 f4       	brcc	.+20     	; 0xad2 <free+0x64>
 abe:	12 96       	adiw	r26, 0x02	; 2
 ac0:	2d 91       	ld	r18, X+
 ac2:	3c 91       	ld	r19, X
 ac4:	13 97       	sbiw	r26, 0x03	; 3
 ac6:	ad 01       	movw	r20, r26
 ac8:	21 15       	cp	r18, r1
 aca:	31 05       	cpc	r19, r1
 acc:	09 f1       	breq	.+66     	; 0xb10 <free+0xa2>
 ace:	d9 01       	movw	r26, r18
 ad0:	f3 cf       	rjmp	.-26     	; 0xab8 <free+0x4a>
 ad2:	9d 01       	movw	r18, r26
 ad4:	da 01       	movw	r26, r20
 ad6:	33 83       	std	Z+3, r19	; 0x03
 ad8:	22 83       	std	Z+2, r18	; 0x02
 ada:	60 81       	ld	r22, Z
 adc:	71 81       	ldd	r23, Z+1	; 0x01
 ade:	86 0f       	add	r24, r22
 ae0:	97 1f       	adc	r25, r23
 ae2:	82 17       	cp	r24, r18
 ae4:	93 07       	cpc	r25, r19
 ae6:	69 f4       	brne	.+26     	; 0xb02 <free+0x94>
 ae8:	ec 01       	movw	r28, r24
 aea:	28 81       	ld	r18, Y
 aec:	39 81       	ldd	r19, Y+1	; 0x01
 aee:	26 0f       	add	r18, r22
 af0:	37 1f       	adc	r19, r23
 af2:	2e 5f       	subi	r18, 0xFE	; 254
 af4:	3f 4f       	sbci	r19, 0xFF	; 255
 af6:	31 83       	std	Z+1, r19	; 0x01
 af8:	20 83       	st	Z, r18
 afa:	8a 81       	ldd	r24, Y+2	; 0x02
 afc:	9b 81       	ldd	r25, Y+3	; 0x03
 afe:	93 83       	std	Z+3, r25	; 0x03
 b00:	82 83       	std	Z+2, r24	; 0x02
 b02:	45 2b       	or	r20, r21
 b04:	29 f4       	brne	.+10     	; 0xb10 <free+0xa2>
 b06:	f0 93 73 01 	sts	0x0173, r31
 b0a:	e0 93 72 01 	sts	0x0172, r30
 b0e:	42 c0       	rjmp	.+132    	; 0xb94 <free+0x126>
 b10:	13 96       	adiw	r26, 0x03	; 3
 b12:	fc 93       	st	X, r31
 b14:	ee 93       	st	-X, r30
 b16:	12 97       	sbiw	r26, 0x02	; 2
 b18:	ed 01       	movw	r28, r26
 b1a:	49 91       	ld	r20, Y+
 b1c:	59 91       	ld	r21, Y+
 b1e:	9e 01       	movw	r18, r28
 b20:	24 0f       	add	r18, r20
 b22:	35 1f       	adc	r19, r21
 b24:	e2 17       	cp	r30, r18
 b26:	f3 07       	cpc	r31, r19
 b28:	71 f4       	brne	.+28     	; 0xb46 <free+0xd8>
 b2a:	80 81       	ld	r24, Z
 b2c:	91 81       	ldd	r25, Z+1	; 0x01
 b2e:	84 0f       	add	r24, r20
 b30:	95 1f       	adc	r25, r21
 b32:	02 96       	adiw	r24, 0x02	; 2
 b34:	11 96       	adiw	r26, 0x01	; 1
 b36:	9c 93       	st	X, r25
 b38:	8e 93       	st	-X, r24
 b3a:	82 81       	ldd	r24, Z+2	; 0x02
 b3c:	93 81       	ldd	r25, Z+3	; 0x03
 b3e:	13 96       	adiw	r26, 0x03	; 3
 b40:	9c 93       	st	X, r25
 b42:	8e 93       	st	-X, r24
 b44:	12 97       	sbiw	r26, 0x02	; 2
 b46:	e0 e0       	ldi	r30, 0x00	; 0
 b48:	f0 e0       	ldi	r31, 0x00	; 0
 b4a:	d8 01       	movw	r26, r16
 b4c:	12 96       	adiw	r26, 0x02	; 2
 b4e:	8d 91       	ld	r24, X+
 b50:	9c 91       	ld	r25, X
 b52:	13 97       	sbiw	r26, 0x03	; 3
 b54:	00 97       	sbiw	r24, 0x00	; 0
 b56:	19 f0       	breq	.+6      	; 0xb5e <free+0xf0>
 b58:	f8 01       	movw	r30, r16
 b5a:	8c 01       	movw	r16, r24
 b5c:	f6 cf       	rjmp	.-20     	; 0xb4a <free+0xdc>
 b5e:	8d 91       	ld	r24, X+
 b60:	9c 91       	ld	r25, X
 b62:	98 01       	movw	r18, r16
 b64:	2e 5f       	subi	r18, 0xFE	; 254
 b66:	3f 4f       	sbci	r19, 0xFF	; 255
 b68:	82 0f       	add	r24, r18
 b6a:	93 1f       	adc	r25, r19
 b6c:	20 91 70 01 	lds	r18, 0x0170
 b70:	30 91 71 01 	lds	r19, 0x0171
 b74:	28 17       	cp	r18, r24
 b76:	39 07       	cpc	r19, r25
 b78:	69 f4       	brne	.+26     	; 0xb94 <free+0x126>
 b7a:	30 97       	sbiw	r30, 0x00	; 0
 b7c:	29 f4       	brne	.+10     	; 0xb88 <free+0x11a>
 b7e:	10 92 73 01 	sts	0x0173, r1
 b82:	10 92 72 01 	sts	0x0172, r1
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <free+0x11e>
 b88:	13 82       	std	Z+3, r1	; 0x03
 b8a:	12 82       	std	Z+2, r1	; 0x02
 b8c:	10 93 71 01 	sts	0x0171, r17
 b90:	00 93 70 01 	sts	0x0170, r16
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	1f 91       	pop	r17
 b9a:	0f 91       	pop	r16
 b9c:	08 95       	ret

00000b9e <memset>:
 b9e:	dc 01       	movw	r26, r24
 ba0:	01 c0       	rjmp	.+2      	; 0xba4 <memset+0x6>
 ba2:	6d 93       	st	X+, r22
 ba4:	41 50       	subi	r20, 0x01	; 1
 ba6:	50 40       	sbci	r21, 0x00	; 0
 ba8:	e0 f7       	brcc	.-8      	; 0xba2 <memset+0x4>
 baa:	08 95       	ret

00000bac <_exit>:
 bac:	f8 94       	cli

00000bae <__stop_program>:
 bae:	ff cf       	rjmp	.-2      	; 0xbae <__stop_program>
