
Front_lights_module2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000ba6  00000c3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  00800122  00800122  00000c5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a1  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000969  00000000  00000000  0000211d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee6  00000000  00000000  00002a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  0000396c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000520  00000000  00000000  00003d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aab  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00004d3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5a c3       	rjmp	.+1716   	; 0x6f2 <__vector_15>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	ea c2       	rjmp	.+1492   	; 0x61a <__vector_17>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 ea       	ldi	r30, 0xA6	; 166
  a8:	fb e0       	ldi	r31, 0x0B	; 11
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 32       	cpi	r26, 0x22	; 34
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e2       	ldi	r26, 0x22	; 34
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a3 37       	cpi	r26, 0x73	; 115
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	7f d2       	rcall	.+1278   	; 0x5ca <main>
  cc:	6a c5       	rjmp	.+2772   	; 0xba2 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <__vector_18>:
		}
	CANGCON |= 0x02;
	CANGIE=(1<<ENIT) | (1<< ENRX);
}
	
void can_health(void) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	cf 93       	push	r28
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
  f8:	ed ee       	ldi	r30, 0xED	; 237
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	c0 81       	ld	r28, Z
  fe:	80 91 ec 00 	lds	r24, 0x00EC
 102:	68 2f       	mov	r22, r24
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	80 83       	st	Z, r24
 10a:	72 95       	swap	r23
 10c:	62 95       	swap	r22
 10e:	6f 70       	andi	r22, 0x0F	; 15
 110:	67 27       	eor	r22, r23
 112:	7f 70       	andi	r23, 0x0F	; 15
 114:	67 27       	eor	r22, r23
 116:	80 91 ee 00 	lds	r24, 0x00EE
 11a:	8f 75       	andi	r24, 0x5F	; 95
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_18+0x50>
 11e:	98 95       	break
 120:	20 91 f2 00 	lds	r18, 0x00F2
 124:	80 91 f3 00 	lds	r24, 0x00F3
 128:	e2 e2       	ldi	r30, 0x22	; 34
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	22 95       	swap	r18
 13c:	26 95       	lsr	r18
 13e:	27 70       	andi	r18, 0x07	; 7
 140:	82 2b       	or	r24, r18
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
 146:	80 91 ef 00 	lds	r24, 0x00EF
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	59 f0       	breq	.+22     	; 0x16a <__vector_18+0x9a>
 154:	e5 e2       	ldi	r30, 0x25	; 37
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	8b 5d       	subi	r24, 0xDB	; 219
 15a:	9e 4f       	sbci	r25, 0xFE	; 254
 15c:	aa ef       	ldi	r26, 0xFA	; 250
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	2c 91       	ld	r18, X
 162:	21 93       	st	Z+, r18
 164:	e8 17       	cp	r30, r24
 166:	f9 07       	cpc	r31, r25
 168:	d9 f7       	brne	.-10     	; 0x160 <__vector_18+0x90>
 16a:	10 92 ee 00 	sts	0x00EE, r1
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 ef 00 	sts	0x00EF, r24
 174:	fb 01       	movw	r30, r22
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ee 5c       	subi	r30, 0xCE	; 206
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	01 90       	ld	r0, Z+
 180:	f0 81       	ld	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	82 e2       	ldi	r24, 0x22	; 34
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	09 95       	icall
 18a:	c0 93 ed 00 	sts	0x00ED, r28
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <can_tx>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	fb 01       	movw	r30, r22
 1bc:	20 81       	ld	r18, Z
 1be:	31 81       	ldd	r19, Z+1	; 0x01
 1c0:	21 15       	cp	r18, r1
 1c2:	38 40       	sbci	r19, 0x08	; 8
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <can_tx+0x12>
 1c6:	98 95       	break
 1c8:	92 81       	ldd	r25, Z+2	; 0x02
 1ca:	99 30       	cpi	r25, 0x09	; 9
 1cc:	08 f0       	brcs	.+2      	; 0x1d0 <can_tx+0x1a>
 1ce:	98 95       	break
 1d0:	8f 30       	cpi	r24, 0x0F	; 15
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <can_tx+0x20>
 1d4:	98 95       	break
 1d6:	82 95       	swap	r24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	80 93 ed 00 	sts	0x00ED, r24
 1de:	80 91 ef 00 	lds	r24, 0x00EF
 1e2:	80 7c       	andi	r24, 0xC0	; 192
 1e4:	21 f0       	breq	.+8      	; 0x1ee <can_tx+0x38>
 1e6:	80 91 ee 00 	lds	r24, 0x00EE
 1ea:	86 ff       	sbrs	r24, 6
 1ec:	55 c0       	rjmp	.+170    	; 0x298 <can_tx+0xe2>
 1ee:	10 92 ee 00 	sts	0x00EE, r1
 1f2:	10 92 ef 00 	sts	0x00EF, r1
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	8f 3f       	cpi	r24, 0xFF	; 255
 1fa:	61 f1       	breq	.+88     	; 0x254 <can_tx+0x9e>
 1fc:	80 81       	ld	r24, Z
 1fe:	91 81       	ldd	r25, Z+1	; 0x01
 200:	96 95       	lsr	r25
 202:	87 95       	ror	r24
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	96 95       	lsr	r25
 20a:	87 95       	ror	r24
 20c:	80 93 f3 00 	sts	0x00F3, r24
 210:	80 81       	ld	r24, Z
 212:	82 95       	swap	r24
 214:	88 0f       	add	r24, r24
 216:	80 7e       	andi	r24, 0xE0	; 224
 218:	80 93 f2 00 	sts	0x00F2, r24
 21c:	10 92 f1 00 	sts	0x00F1, r1
 220:	10 92 f0 00 	sts	0x00F0, r1
 224:	22 81       	ldd	r18, Z+2	; 0x02
 226:	22 23       	and	r18, r18
 228:	79 f0       	breq	.+30     	; 0x248 <can_tx+0x92>
 22a:	df 01       	movw	r26, r30
 22c:	13 96       	adiw	r26, 0x03	; 3
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ca ef       	ldi	r28, 0xFA	; 250
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	2d 91       	ld	r18, X+
 238:	28 83       	st	Y, r18
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	22 81       	ldd	r18, Z+2	; 0x02
 23e:	42 2f       	mov	r20, r18
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	84 17       	cp	r24, r20
 244:	95 07       	cpc	r25, r21
 246:	b8 f3       	brcs	.-18     	; 0x236 <can_tx+0x80>
 248:	ef ee       	ldi	r30, 0xEF	; 239
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	28 2b       	or	r18, r24
 250:	20 83       	st	Z, r18
 252:	1b c0       	rjmp	.+54     	; 0x28a <can_tx+0xd4>
 254:	80 81       	ld	r24, Z
 256:	91 81       	ldd	r25, Z+1	; 0x01
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	80 93 f3 00 	sts	0x00F3, r24
 268:	80 81       	ld	r24, Z
 26a:	82 95       	swap	r24
 26c:	88 0f       	add	r24, r24
 26e:	80 7e       	andi	r24, 0xE0	; 224
 270:	80 93 f2 00 	sts	0x00F2, r24
 274:	10 92 f1 00 	sts	0x00F1, r1
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	80 93 f0 00 	sts	0x00F0, r24
 27e:	af ee       	ldi	r26, 0xEF	; 239
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	9c 91       	ld	r25, X
 284:	82 81       	ldd	r24, Z+2	; 0x02
 286:	89 2b       	or	r24, r25
 288:	8c 93       	st	X, r24
 28a:	ef ee       	ldi	r30, 0xEF	; 239
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	01 c0       	rjmp	.+2      	; 0x29a <can_tx+0xe4>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <prepare_rx>:
 2a0:	8f 30       	cpi	r24, 0x0F	; 15
 2a2:	08 f0       	brcs	.+2      	; 0x2a6 <prepare_rx+0x6>
 2a4:	6d c0       	rjmp	.+218    	; 0x380 <prepare_rx+0xe0>
 2a6:	e8 2f       	mov	r30, r24
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	ee 5c       	subi	r30, 0xCE	; 206
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	31 83       	std	Z+1, r19	; 0x01
 2b4:	20 83       	st	Z, r18
 2b6:	98 2f       	mov	r25, r24
 2b8:	92 95       	swap	r25
 2ba:	90 7f       	andi	r25, 0xF0	; 240
 2bc:	90 93 ed 00 	sts	0x00ED, r25
 2c0:	23 2b       	or	r18, r19
 2c2:	d9 f4       	brne	.+54     	; 0x2fa <prepare_rx+0x5a>
 2c4:	10 92 ee 00 	sts	0x00EE, r1
 2c8:	10 92 ef 00 	sts	0x00EF, r1
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	a9 01       	movw	r20, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <prepare_rx+0x38>
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	8a 95       	dec	r24
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <prepare_rx+0x34>
 2dc:	ca 01       	movw	r24, r20
 2de:	ee ed       	ldi	r30, 0xDE	; 222
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	20 81       	ld	r18, Z
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	80 83       	st	Z, r24
 2ea:	ef ed       	ldi	r30, 0xDF	; 223
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	90 95       	com	r25
 2f2:	89 23       	and	r24, r25
 2f4:	80 83       	st	Z, r24
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret
 2fa:	90 91 ef 00 	lds	r25, 0x00EF
 2fe:	90 7c       	andi	r25, 0xC0	; 192
 300:	09 f0       	breq	.+2      	; 0x304 <prepare_rx+0x64>
 302:	40 c0       	rjmp	.+128    	; 0x384 <prepare_rx+0xe4>
 304:	10 92 ee 00 	sts	0x00EE, r1
 308:	ef ee       	ldi	r30, 0xEF	; 239
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	10 82       	st	Z, r1
 30e:	10 92 ec 00 	sts	0x00EC, r1
 312:	9b 01       	movw	r18, r22
 314:	36 95       	lsr	r19
 316:	27 95       	ror	r18
 318:	36 95       	lsr	r19
 31a:	27 95       	ror	r18
 31c:	36 95       	lsr	r19
 31e:	27 95       	ror	r18
 320:	20 93 f3 00 	sts	0x00F3, r18
 324:	62 95       	swap	r22
 326:	66 0f       	add	r22, r22
 328:	60 7e       	andi	r22, 0xE0	; 224
 32a:	60 93 f2 00 	sts	0x00F2, r22
 32e:	9a 01       	movw	r18, r20
 330:	36 95       	lsr	r19
 332:	27 95       	ror	r18
 334:	36 95       	lsr	r19
 336:	27 95       	ror	r18
 338:	36 95       	lsr	r19
 33a:	27 95       	ror	r18
 33c:	20 93 f7 00 	sts	0x00F7, r18
 340:	42 95       	swap	r20
 342:	44 0f       	add	r20, r20
 344:	40 7e       	andi	r20, 0xE0	; 224
 346:	40 93 f6 00 	sts	0x00F6, r20
 34a:	10 92 f5 00 	sts	0x00F5, r1
 34e:	10 92 f4 00 	sts	0x00F4, r1
 352:	90 e8       	ldi	r25, 0x80	; 128
 354:	90 83       	st	Z, r25
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	a9 01       	movw	r20, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <prepare_rx+0xc2>
 35e:	44 0f       	add	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <prepare_rx+0xbe>
 366:	ca 01       	movw	r24, r20
 368:	ee ed       	ldi	r30, 0xDE	; 222
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	20 81       	ld	r18, Z
 36e:	82 2b       	or	r24, r18
 370:	80 83       	st	Z, r24
 372:	ef ed       	ldi	r30, 0xDF	; 223
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	89 2b       	or	r24, r25
 37a:	80 83       	st	Z, r24
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	08 95       	ret
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	08 95       	ret

00000388 <can_init>:
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	86 e0       	ldi	r24, 0x06	; 6
 38e:	80 93 e2 00 	sts	0x00E2, r24
 392:	8c e0       	ldi	r24, 0x0C	; 12
 394:	80 93 e3 00 	sts	0x00E3, r24
 398:	8a e5       	ldi	r24, 0x5A	; 90
 39a:	80 93 e4 00 	sts	0x00E4, r24
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	cd ee       	ldi	r28, 0xED	; 237
 3a2:	d0 e0       	ldi	r29, 0x00	; 0
 3a4:	ae ee       	ldi	r26, 0xEE	; 238
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	ef ee       	ldi	r30, 0xEF	; 239
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	98 2f       	mov	r25, r24
 3ae:	92 95       	swap	r25
 3b0:	90 7f       	andi	r25, 0xF0	; 240
 3b2:	98 83       	st	Y, r25
 3b4:	1c 92       	st	X, r1
 3b6:	10 82       	st	Z, r1
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	8f 30       	cpi	r24, 0x0F	; 15
 3bc:	b9 f7       	brne	.-18     	; 0x3ac <can_init+0x24>
 3be:	e8 ed       	ldi	r30, 0xD8	; 216
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	80 83       	st	Z, r24
 3c8:	80 ea       	ldi	r24, 0xA0	; 160
 3ca:	80 93 db 00 	sts	0x00DB, r24
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <can_packet_send>:
	*/
}

BOOL can_packet_send(char mob, CAN_packet *packet) {
	/* Clear global interrupts */
	cli();
 3d4:	f8 94       	cli
	BOOL result = can_tx(mob, packet);
 3d6:	ef de       	rcall	.-546    	; 0x1b6 <can_tx>
	/* Set global interrupts */
	sei();
 3d8:	78 94       	sei
	return result;
}
 3da:	08 95       	ret

000003dc <front_lights_init>:
	return test_bit(PORTE, PE5);
}

BOOL get_angel( void) {
	return test_bit(PORTE, PE4);
}
 3dc:	6c 9a       	sbi	0x0d, 4	; 13
 3de:	6d 9a       	sbi	0x0d, 5	; 13
 3e0:	80 9a       	sbi	0x10, 0	; 16
 3e2:	81 9a       	sbi	0x10, 1	; 16
 3e4:	82 9a       	sbi	0x10, 2	; 16
 3e6:	73 98       	cbi	0x0e, 3	; 14
 3e8:	6b 9a       	sbi	0x0d, 3	; 13
 3ea:	e1 e9       	ldi	r30, 0x91	; 145
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 e1       	ldi	r24, 0x10	; 16
 3f0:	80 83       	st	Z, r24
 3f2:	a0 e9       	ldi	r26, 0x90	; 144
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	8c 91       	ld	r24, X
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	8c 93       	st	X, r24
 3fc:	80 81       	ld	r24, Z
 3fe:	82 60       	ori	r24, 0x02	; 2
 400:	80 83       	st	Z, r24
 402:	80 81       	ld	r24, Z
 404:	81 60       	ori	r24, 0x01	; 1
 406:	80 83       	st	Z, r24
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	80 93 96 00 	sts	0x0096, r24
 40e:	10 92 97 00 	sts	0x0097, r1
 412:	10 92 98 00 	sts	0x0098, r1
 416:	08 95       	ret

00000418 <front_lights_eyebrows>:
 418:	88 23       	and	r24, r24
 41a:	71 f0       	breq	.+28     	; 0x438 <front_lights_eyebrows+0x20>
 41c:	80 91 31 01 	lds	r24, 0x0131
 420:	81 11       	cpse	r24, r1
 422:	0a c0       	rjmp	.+20     	; 0x438 <front_lights_eyebrows+0x20>
 424:	80 91 30 01 	lds	r24, 0x0130
 428:	81 11       	cpse	r24, r1
 42a:	06 c0       	rjmp	.+12     	; 0x438 <front_lights_eyebrows+0x20>
 42c:	89 9a       	sbi	0x11, 1	; 17
 42e:	75 9a       	sbi	0x0e, 5	; 14
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 2f 01 	sts	0x012F, r24
 436:	08 95       	ret
 438:	89 98       	cbi	0x11, 1	; 17
 43a:	75 98       	cbi	0x0e, 5	; 14
 43c:	10 92 2f 01 	sts	0x012F, r1
 440:	08 95       	ret

00000442 <front_lights_angel_eyes>:
 442:	88 23       	and	r24, r24
 444:	11 f0       	breq	.+4      	; 0x44a <front_lights_angel_eyes+0x8>
 446:	74 9a       	sbi	0x0e, 4	; 14
 448:	08 95       	ret
 44a:	74 98       	cbi	0x0e, 4	; 14
 44c:	08 95       	ret

0000044e <front_lights_turn_left>:
 44e:	88 23       	and	r24, r24
 450:	39 f0       	breq	.+14     	; 0x460 <front_lights_turn_left+0x12>
 452:	8a 9a       	sbi	0x11, 2	; 17
 454:	80 91 2f 01 	lds	r24, 0x012F
 458:	81 11       	cpse	r24, r1
 45a:	08 c0       	rjmp	.+16     	; 0x46c <front_lights_turn_left+0x1e>
 45c:	89 9a       	sbi	0x11, 1	; 17
 45e:	08 95       	ret
 460:	8a 98       	cbi	0x11, 2	; 17
 462:	80 91 2f 01 	lds	r24, 0x012F
 466:	81 11       	cpse	r24, r1
 468:	01 c0       	rjmp	.+2      	; 0x46c <front_lights_turn_left+0x1e>
 46a:	89 98       	cbi	0x11, 1	; 17
 46c:	08 95       	ret

0000046e <front_lights_turn_right>:
 46e:	88 23       	and	r24, r24
 470:	39 f0       	breq	.+14     	; 0x480 <front_lights_turn_right+0x12>
 472:	88 9a       	sbi	0x11, 0	; 17
 474:	80 91 2f 01 	lds	r24, 0x012F
 478:	81 11       	cpse	r24, r1
 47a:	08 c0       	rjmp	.+16     	; 0x48c <front_lights_turn_right+0x1e>
 47c:	75 9a       	sbi	0x0e, 5	; 14
 47e:	08 95       	ret
 480:	88 98       	cbi	0x11, 0	; 17
 482:	80 91 2f 01 	lds	r24, 0x012F
 486:	81 11       	cpse	r24, r1
 488:	01 c0       	rjmp	.+2      	; 0x48c <front_lights_turn_right+0x1e>
 48a:	75 98       	cbi	0x0e, 5	; 14
 48c:	08 95       	ret

0000048e <front_light_handler>:
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	fc 01       	movw	r30, r24
 494:	20 81       	ld	r18, Z
 496:	31 81       	ldd	r19, Z+1	; 0x01
 498:	26 30       	cpi	r18, 0x06	; 6
 49a:	31 05       	cpc	r19, r1
 49c:	d1 f5       	brne	.+116    	; 0x512 <front_light_handler+0x84>
 49e:	23 81       	ldd	r18, Z+3	; 0x03
 4a0:	20 ff       	sbrs	r18, 0
 4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <front_light_handler+0x28>
 4a4:	24 e1       	ldi	r18, 0x14	; 20
 4a6:	20 93 98 00 	sts	0x0098, r18
 4aa:	21 e0       	ldi	r18, 0x01	; 1
 4ac:	20 93 2e 01 	sts	0x012E, r18
 4b0:	10 92 2d 01 	sts	0x012D, r1
 4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <front_light_handler+0x4a>
 4b6:	21 ff       	sbrs	r18, 1
 4b8:	09 c0       	rjmp	.+18     	; 0x4cc <front_light_handler+0x3e>
 4ba:	24 e6       	ldi	r18, 0x64	; 100
 4bc:	20 93 98 00 	sts	0x0098, r18
 4c0:	10 92 2e 01 	sts	0x012E, r1
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	20 93 2d 01 	sts	0x012D, r18
 4ca:	06 c0       	rjmp	.+12     	; 0x4d8 <front_light_handler+0x4a>
 4cc:	10 92 98 00 	sts	0x0098, r1
 4d0:	10 92 2e 01 	sts	0x012E, r1
 4d4:	10 92 2d 01 	sts	0x012D, r1
 4d8:	ec 01       	movw	r28, r24
 4da:	80 91 31 01 	lds	r24, 0x0131
 4de:	81 11       	cpse	r24, r1
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <front_light_handler+0x62>
 4e2:	80 91 30 01 	lds	r24, 0x0130
 4e6:	81 11       	cpse	r24, r1
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <front_light_handler+0x62>
 4ea:	8b 81       	ldd	r24, Y+3	; 0x03
 4ec:	88 70       	andi	r24, 0x08	; 8
 4ee:	94 df       	rcall	.-216    	; 0x418 <front_lights_eyebrows>
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	84 70       	andi	r24, 0x04	; 4
 4f4:	a6 df       	rcall	.-180    	; 0x442 <front_lights_angel_eyes>
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	84 ff       	sbrs	r24, 4
 4fa:	06 c0       	rjmp	.+12     	; 0x508 <front_light_handler+0x7a>
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	80 93 31 01 	sts	0x0131, r24
 502:	80 93 30 01 	sts	0x0130, r24
 506:	11 c0       	rjmp	.+34     	; 0x52a <front_light_handler+0x9c>
 508:	10 92 31 01 	sts	0x0131, r1
 50c:	10 92 30 01 	sts	0x0130, r1
 510:	0c c0       	rjmp	.+24     	; 0x52a <front_light_handler+0x9c>
 512:	2d 30       	cpi	r18, 0x0D	; 13
 514:	31 05       	cpc	r19, r1
 516:	49 f4       	brne	.+18     	; 0x52a <front_light_handler+0x9c>
 518:	fc 01       	movw	r30, r24
 51a:	83 81       	ldd	r24, Z+3	; 0x03
 51c:	98 2f       	mov	r25, r24
 51e:	91 70       	andi	r25, 0x01	; 1
 520:	90 93 30 01 	sts	0x0130, r25
 524:	82 70       	andi	r24, 0x02	; 2
 526:	80 93 31 01 	sts	0x0131, r24
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <front_toggle_ind_left>:
 530:	8a 9b       	sbis	0x11, 2	; 17
 532:	03 c0       	rjmp	.+6      	; 0x53a <front_toggle_ind_left+0xa>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	8b cf       	rjmp	.-234    	; 0x44e <front_lights_turn_left>
 538:	08 95       	ret
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	88 cf       	rjmp	.-240    	; 0x44e <front_lights_turn_left>
 53e:	08 95       	ret

00000540 <front_toggle_ind_right>:
 540:	88 9b       	sbis	0x11, 0	; 17
 542:	03 c0       	rjmp	.+6      	; 0x54a <front_toggle_ind_right+0xa>
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	93 cf       	rjmp	.-218    	; 0x46e <front_lights_turn_right>
 548:	08 95       	ret
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 cf       	rjmp	.-224    	; 0x46e <front_lights_turn_right>
 54e:	08 95       	ret

00000550 <get_light_status>:

void get_light_status(CAN_packet* p) {
 550:	fc 01       	movw	r30, r24
	p->data[0] = 0;
 552:	13 82       	std	Z+3, r1	; 0x03
	if(SHORT_LIGHT)
 554:	80 91 2e 01 	lds	r24, 0x012E
 558:	88 23       	and	r24, r24
 55a:	11 f0       	breq	.+4      	; 0x560 <get_light_status+0x10>
		p->data[0] |= (1<<0);
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	83 83       	std	Z+3, r24	; 0x03
	if(FAR_LIGHT)
 560:	80 91 2d 01 	lds	r24, 0x012D
 564:	88 23       	and	r24, r24
 566:	19 f0       	breq	.+6      	; 0x56e <get_light_status+0x1e>
		p->data[0] |= (1<<1);
 568:	83 81       	ldd	r24, Z+3	; 0x03
 56a:	82 60       	ori	r24, 0x02	; 2
 56c:	83 83       	std	Z+3, r24	; 0x03
	if(get_ind_left())
 56e:	8a 9b       	sbis	0x11, 2	; 17
 570:	03 c0       	rjmp	.+6      	; 0x578 <get_light_status+0x28>
		p->data[0] |= (1<<2);
 572:	83 81       	ldd	r24, Z+3	; 0x03
 574:	84 60       	ori	r24, 0x04	; 4
 576:	83 83       	std	Z+3, r24	; 0x03
	if(get_ind_right())
 578:	88 9b       	sbis	0x11, 0	; 17
 57a:	03 c0       	rjmp	.+6      	; 0x582 <get_light_status+0x32>
		p->data[0] |= (1<<3);
 57c:	83 81       	ldd	r24, Z+3	; 0x03
 57e:	88 60       	ori	r24, 0x08	; 8
 580:	83 83       	std	Z+3, r24	; 0x03
	if(get_eyebrows())
 582:	75 9b       	sbis	0x0e, 5	; 14
 584:	03 c0       	rjmp	.+6      	; 0x58c <get_light_status+0x3c>
		p->data[0] |= (1<<4);
 586:	83 81       	ldd	r24, Z+3	; 0x03
 588:	80 61       	ori	r24, 0x10	; 16
 58a:	83 83       	std	Z+3, r24	; 0x03
	if(get_angel())
 58c:	74 9b       	sbis	0x0e, 4	; 14
 58e:	03 c0       	rjmp	.+6      	; 0x596 <get_light_status+0x46>
		p->data[0] |= (1<<5);
 590:	83 81       	ldd	r24, Z+3	; 0x03
 592:	80 62       	ori	r24, 0x20	; 32
 594:	83 83       	std	Z+3, r24	; 0x03
	if(IND_LEFT && IND_RIGHT)
 596:	80 91 31 01 	lds	r24, 0x0131
 59a:	88 23       	and	r24, r24
 59c:	39 f0       	breq	.+14     	; 0x5ac <get_light_status+0x5c>
 59e:	80 91 30 01 	lds	r24, 0x0130
 5a2:	88 23       	and	r24, r24
 5a4:	19 f0       	breq	.+6      	; 0x5ac <get_light_status+0x5c>
		p->data[0] |= (1<<6);
 5a6:	83 81       	ldd	r24, Z+3	; 0x03
 5a8:	80 64       	ori	r24, 0x40	; 64
 5aa:	83 83       	std	Z+3, r24	; 0x03
 5ac:	08 95       	ret

000005ae <inits>:
#include "front_lights_module.h"
#include "timer1.h"
#include "timer0.h"

void inits(void) {
	can_init();
 5ae:	ec de       	rcall	.-552    	; 0x388 <can_init>
	USART_init(MYUBRR, true);
 5b0:	61 e0       	ldi	r22, 0x01	; 1
 5b2:	83 e3       	ldi	r24, 0x33	; 51
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	09 d1       	rcall	.+530    	; 0x7ca <USART_init>
	front_lights_init();
 5b8:	11 df       	rcall	.-478    	; 0x3dc <front_lights_init>
	timer1_init();
 5ba:	80 d0       	rcall	.+256    	; 0x6bc <timer1_init>
	timer0_init();
 5bc:	13 d0       	rcall	.+38     	; 0x5e4 <timer0_init>
	
	printf("\r\nFront lights initialized\n");
 5be:	86 e0       	ldi	r24, 0x06	; 6
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	71 d1       	rcall	.+738    	; 0x8a6 <puts>
	set_bit(DDRB, DDB6);
 5c4:	26 9a       	sbi	0x04, 6	; 4
	clear_bit(PORTB, PB6);
 5c6:	2e 98       	cbi	0x05, 6	; 5
 5c8:	08 95       	ret

000005ca <main>:
}

int main(void)
{
	cli();
 5ca:	f8 94       	cli
	inits();
 5cc:	f0 df       	rcall	.-32     	; 0x5ae <inits>
	prepare_rx(0, ID_steeringWheel, MASK_FRONT_LIGHTS, front_light_handler);
 5ce:	27 e4       	ldi	r18, 0x47	; 71
 5d0:	32 e0       	ldi	r19, 0x02	; 2
 5d2:	44 e0       	ldi	r20, 0x04	; 4
 5d4:	50 e0       	ldi	r21, 0x00	; 0
 5d6:	6d e0       	ldi	r22, 0x0D	; 13
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	61 de       	rcall	.-830    	; 0x2a0 <prepare_rx>
	/* Set global interrupts */
	sei();
 5de:	78 94       	sei
	
	for(;;) {
		asm("sleep");;
 5e0:	88 95       	sleep
	}
 5e2:	fe cf       	rjmp	.-4      	; 0x5e0 <main+0x16>

000005e4 <timer0_init>:
CAN_packet current_msg;
CAN_packet updated_msg;

void timer0_init( void) {
	/* clk/1024 */
	set_bit(TCCR0A, CS02);
 5e4:	84 b5       	in	r24, 0x24	; 36
 5e6:	84 60       	ori	r24, 0x04	; 4
 5e8:	84 bd       	out	0x24, r24	; 36
	set_bit(TCCR0A, CS00);
 5ea:	84 b5       	in	r24, 0x24	; 36
 5ec:	81 60       	ori	r24, 0x01	; 1
 5ee:	84 bd       	out	0x24, r24	; 36
	/* Enable timer overflow */
	set_bit(TIMSK0, TOIE0);
 5f0:	ee e6       	ldi	r30, 0x6E	; 110
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	81 60       	ori	r24, 0x01	; 1
 5f8:	80 83       	st	Z, r24
	
	current_msg.id = ID_lightsFront;
 5fa:	ee e5       	ldi	r30, 0x5E	; 94
 5fc:	f1 e0       	ldi	r31, 0x01	; 1
 5fe:	21 e5       	ldi	r18, 0x51	; 81
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	31 83       	std	Z+1, r19	; 0x01
 604:	20 83       	st	Z, r18
	current_msg.length = 1;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	82 83       	std	Z+2, r24	; 0x02
	current_msg.data[0] = 0;
 60a:	13 82       	std	Z+3, r1	; 0x03
	updated_msg.id = ID_lightsFront;
 60c:	e3 e5       	ldi	r30, 0x53	; 83
 60e:	f1 e0       	ldi	r31, 0x01	; 1
 610:	31 83       	std	Z+1, r19	; 0x01
 612:	20 83       	st	Z, r18
	updated_msg.length = 1;
 614:	82 83       	std	Z+2, r24	; 0x02
	updated_msg.data[0] = 0;
 616:	13 82       	std	Z+3, r1	; 0x03
 618:	08 95       	ret

0000061a <__vector_17>:
}

ISR(TIMER0_OVF_vect) {
 61a:	1f 92       	push	r1
 61c:	0f 92       	push	r0
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	0f 92       	push	r0
 622:	11 24       	eor	r1, r1
 624:	0b b6       	in	r0, 0x3b	; 59
 626:	0f 92       	push	r0
 628:	2f 93       	push	r18
 62a:	3f 93       	push	r19
 62c:	4f 93       	push	r20
 62e:	5f 93       	push	r21
 630:	6f 93       	push	r22
 632:	7f 93       	push	r23
 634:	8f 93       	push	r24
 636:	9f 93       	push	r25
 638:	af 93       	push	r26
 63a:	bf 93       	push	r27
 63c:	ef 93       	push	r30
 63e:	ff 93       	push	r31
	cli();
 640:	f8 94       	cli
	get_light_status(&updated_msg);
 642:	83 e5       	ldi	r24, 0x53	; 83
 644:	91 e0       	ldi	r25, 0x01	; 1
 646:	84 df       	rcall	.-248    	; 0x550 <get_light_status>
	sei();
 648:	78 94       	sei
	
	different = memcmp(current_msg.data, updated_msg.data, current_msg.length);
 64a:	40 91 60 01 	lds	r20, 0x0160
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	66 e5       	ldi	r22, 0x56	; 86
 652:	71 e0       	ldi	r23, 0x01	; 1
 654:	81 e6       	ldi	r24, 0x61	; 97
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	cf d0       	rcall	.+414    	; 0x7f8 <memcmp>
 65a:	90 93 51 01 	sts	0x0151, r25
 65e:	80 93 50 01 	sts	0x0150, r24
	if(different) {
 662:	89 2b       	or	r24, r25
 664:	79 f0       	breq	.+30     	; 0x684 <__vector_17+0x6a>
		/* Send a message with new data */
		ret = can_packet_send(1, &updated_msg);
 666:	63 e5       	ldi	r22, 0x53	; 83
 668:	71 e0       	ldi	r23, 0x01	; 1
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	b3 de       	rcall	.-666    	; 0x3d4 <can_packet_send>
 66e:	80 93 52 01 	sts	0x0152, r24
		current_msg = updated_msg;
 672:	8b e0       	ldi	r24, 0x0B	; 11
 674:	e3 e5       	ldi	r30, 0x53	; 83
 676:	f1 e0       	ldi	r31, 0x01	; 1
 678:	ae e5       	ldi	r26, 0x5E	; 94
 67a:	b1 e0       	ldi	r27, 0x01	; 1
 67c:	01 90       	ld	r0, Z+
 67e:	0d 92       	st	X+, r0
 680:	8a 95       	dec	r24
 682:	e1 f7       	brne	.-8      	; 0x67c <__vector_17+0x62>
	}
	if (ret) {
 684:	80 91 52 01 	lds	r24, 0x0152
 688:	88 23       	and	r24, r24
 68a:	21 f0       	breq	.+8      	; 0x694 <__vector_17+0x7a>
		set_bit(DDRB, PB7);
 68c:	27 9a       	sbi	0x04, 7	; 4
		ret = FALSE;
 68e:	10 92 52 01 	sts	0x0152, r1
 692:	01 c0       	rjmp	.+2      	; 0x696 <__vector_17+0x7c>
	} else
	clear_bit(DDRB, PB7);	
 694:	27 98       	cbi	0x04, 7	; 4
 696:	ff 91       	pop	r31
 698:	ef 91       	pop	r30
 69a:	bf 91       	pop	r27
 69c:	af 91       	pop	r26
 69e:	9f 91       	pop	r25
 6a0:	8f 91       	pop	r24
 6a2:	7f 91       	pop	r23
 6a4:	6f 91       	pop	r22
 6a6:	5f 91       	pop	r21
 6a8:	4f 91       	pop	r20
 6aa:	3f 91       	pop	r19
 6ac:	2f 91       	pop	r18
 6ae:	0f 90       	pop	r0
 6b0:	0b be       	out	0x3b, r0	; 59
 6b2:	0f 90       	pop	r0
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	0f 90       	pop	r0
 6b8:	1f 90       	pop	r1
 6ba:	18 95       	reti

000006bc <timer1_init>:
	/* DIsable interrupts */
	cli(); // same as cli()?
	/* Set TCNT1 to i */
	TCNT1 = i;
	/* Restore global interrupt flag */
	SREG = sreg;
 6bc:	e1 e8       	ldi	r30, 0x81	; 129
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	82 60       	ori	r24, 0x02	; 2
 6c4:	80 83       	st	Z, r24
 6c6:	80 81       	ld	r24, Z
 6c8:	81 60       	ori	r24, 0x01	; 1
 6ca:	80 83       	st	Z, r24
 6cc:	10 92 85 00 	sts	0x0085, r1
 6d0:	10 92 84 00 	sts	0x0084, r1
 6d4:	ef e6       	ldi	r30, 0x6F	; 111
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	81 60       	ori	r24, 0x01	; 1
 6dc:	80 83       	st	Z, r24
 6de:	78 94       	sei
 6e0:	e0 e8       	ldi	r30, 0x80	; 128
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	80 68       	ori	r24, 0x80	; 128
 6e8:	80 83       	st	Z, r24
 6ea:	80 81       	ld	r24, Z
 6ec:	8f 7b       	andi	r24, 0xBF	; 191
 6ee:	80 83       	st	Z, r24
 6f0:	08 95       	ret

000006f2 <__vector_15>:
}


ISR(TIMER1_OVF_vect) {
 6f2:	1f 92       	push	r1
 6f4:	0f 92       	push	r0
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	0f 92       	push	r0
 6fa:	11 24       	eor	r1, r1
 6fc:	0b b6       	in	r0, 0x3b	; 59
 6fe:	0f 92       	push	r0
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
 720:	2b 97       	sbiw	r28, 0x0b	; 11
 722:	de bf       	out	0x3e, r29	; 62
 724:	cd bf       	out	0x3d, r28	; 61
	/* Indicator and Emergency lights */
	/*if (IND_LEFT || EMERG) {*/
	if (IND_LEFT) {
 726:	80 91 31 01 	lds	r24, 0x0131
 72a:	88 23       	and	r24, r24
 72c:	11 f0       	breq	.+4      	; 0x732 <__vector_15+0x40>
		// toggle the left indicator
		front_toggle_ind_left();
 72e:	00 df       	rcall	.-512    	; 0x530 <front_toggle_ind_left>
 730:	02 c0       	rjmp	.+4      	; 0x736 <__vector_15+0x44>
	} else {
		front_lights_turn_left(FALSE);
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	8c de       	rcall	.-744    	; 0x44e <front_lights_turn_left>
	}
	/*if (IND_RIGHT || EMERG) {*/
	if (IND_RIGHT) {
 736:	80 91 30 01 	lds	r24, 0x0130
 73a:	88 23       	and	r24, r24
 73c:	11 f0       	breq	.+4      	; 0x742 <__vector_15+0x50>
		// toggle the right indicator
		front_toggle_ind_right();
 73e:	00 df       	rcall	.-512    	; 0x540 <front_toggle_ind_right>
 740:	02 c0       	rjmp	.+4      	; 0x746 <__vector_15+0x54>
	} else {
		front_lights_turn_right(FALSE);
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	94 de       	rcall	.-728    	; 0x46e <front_lights_turn_right>
	}
	/* Send a "I'm alive" message with the data */
	CAN_packet p;
	BOOL ret = FALSE;
	p.id = ID_lightsFront;
 746:	81 e5       	ldi	r24, 0x51	; 81
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	9a 83       	std	Y+2, r25	; 0x02
 74c:	89 83       	std	Y+1, r24	; 0x01
	p.length = 1;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	8b 83       	std	Y+3, r24	; 0x03
	cli();
 752:	f8 94       	cli
	get_light_status(&p);
 754:	ce 01       	movw	r24, r28
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	fb de       	rcall	.-522    	; 0x550 <get_light_status>
	ret = can_packet_send(5, &p);
 75a:	be 01       	movw	r22, r28
 75c:	6f 5f       	subi	r22, 0xFF	; 255
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	85 e0       	ldi	r24, 0x05	; 5
 762:	38 de       	rcall	.-912    	; 0x3d4 <can_packet_send>
	sei();
 764:	78 94       	sei
	if(ret)
 766:	88 23       	and	r24, r24
 768:	21 f0       	breq	.+8      	; 0x772 <__vector_15+0x80>
		toggle_bit(DDRB, PB5);
 76a:	94 b1       	in	r25, 0x04	; 4
 76c:	80 e2       	ldi	r24, 0x20	; 32
 76e:	89 27       	eor	r24, r25
 770:	84 b9       	out	0x04, r24	; 4
	ret = FALSE;
 772:	2b 96       	adiw	r28, 0x0b	; 11
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	f8 94       	cli
 778:	de bf       	out	0x3e, r29	; 62
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	cd bf       	out	0x3d, r28	; 61
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	bf 91       	pop	r27
 788:	af 91       	pop	r26
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	7f 91       	pop	r23
 790:	6f 91       	pop	r22
 792:	5f 91       	pop	r21
 794:	4f 91       	pop	r20
 796:	3f 91       	pop	r19
 798:	2f 91       	pop	r18
 79a:	0f 90       	pop	r0
 79c:	0b be       	out	0x3b, r0	; 59
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 7a8:	e0 ec       	ldi	r30, 0xC0	; 192
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	90 81       	ld	r25, Z
 7ae:	95 ff       	sbrs	r25, 5
 7b0:	fd cf       	rjmp	.-6      	; 0x7ac <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 7b2:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	08 95       	ret

000007ba <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 7ba:	e0 ec       	ldi	r30, 0xC0	; 192
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	88 23       	and	r24, r24
 7c2:	ec f7       	brge	.-6      	; 0x7be <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 7c4:	80 91 c6 00 	lds	r24, 0x00C6
}
 7c8:	08 95       	ret

000007ca <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 7ca:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 7ce:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 7d2:	86 e0       	ldi	r24, 0x06	; 6
 7d4:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 7d8:	66 23       	and	r22, r22
 7da:	41 f0       	breq	.+16     	; 0x7ec <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 7dc:	e1 ec       	ldi	r30, 0xC1	; 193
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	80 61       	ori	r24, 0x10	; 16
 7e4:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 7e6:	80 81       	ld	r24, Z
 7e8:	88 60       	ori	r24, 0x08	; 8
 7ea:	80 83       	st	Z, r24
	}
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 7ec:	6d ed       	ldi	r22, 0xDD	; 221
 7ee:	73 e0       	ldi	r23, 0x03	; 3
 7f0:	84 ed       	ldi	r24, 0xD4	; 212
 7f2:	93 e0       	ldi	r25, 0x03	; 3
 7f4:	0e c0       	rjmp	.+28     	; 0x812 <fdevopen>
 7f6:	08 95       	ret

000007f8 <memcmp>:
 7f8:	fb 01       	movw	r30, r22
 7fa:	dc 01       	movw	r26, r24
 7fc:	04 c0       	rjmp	.+8      	; 0x806 <memcmp+0xe>
 7fe:	8d 91       	ld	r24, X+
 800:	01 90       	ld	r0, Z+
 802:	80 19       	sub	r24, r0
 804:	21 f4       	brne	.+8      	; 0x80e <memcmp+0x16>
 806:	41 50       	subi	r20, 0x01	; 1
 808:	50 40       	sbci	r21, 0x00	; 0
 80a:	c8 f7       	brcc	.-14     	; 0x7fe <memcmp+0x6>
 80c:	88 1b       	sub	r24, r24
 80e:	99 0b       	sbc	r25, r25
 810:	08 95       	ret

00000812 <fdevopen>:
 812:	0f 93       	push	r16
 814:	1f 93       	push	r17
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	00 97       	sbiw	r24, 0x00	; 0
 81c:	31 f4       	brne	.+12     	; 0x82a <fdevopen+0x18>
 81e:	61 15       	cp	r22, r1
 820:	71 05       	cpc	r23, r1
 822:	19 f4       	brne	.+6      	; 0x82a <fdevopen+0x18>
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	39 c0       	rjmp	.+114    	; 0x89c <fdevopen+0x8a>
 82a:	8b 01       	movw	r16, r22
 82c:	ec 01       	movw	r28, r24
 82e:	6e e0       	ldi	r22, 0x0E	; 14
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	67 d0       	rcall	.+206    	; 0x906 <calloc>
 838:	fc 01       	movw	r30, r24
 83a:	89 2b       	or	r24, r25
 83c:	99 f3       	breq	.-26     	; 0x824 <fdevopen+0x12>
 83e:	80 e8       	ldi	r24, 0x80	; 128
 840:	83 83       	std	Z+3, r24	; 0x03
 842:	01 15       	cp	r16, r1
 844:	11 05       	cpc	r17, r1
 846:	71 f0       	breq	.+28     	; 0x864 <fdevopen+0x52>
 848:	13 87       	std	Z+11, r17	; 0x0b
 84a:	02 87       	std	Z+10, r16	; 0x0a
 84c:	81 e8       	ldi	r24, 0x81	; 129
 84e:	83 83       	std	Z+3, r24	; 0x03
 850:	80 91 69 01 	lds	r24, 0x0169
 854:	90 91 6a 01 	lds	r25, 0x016A
 858:	89 2b       	or	r24, r25
 85a:	21 f4       	brne	.+8      	; 0x864 <fdevopen+0x52>
 85c:	f0 93 6a 01 	sts	0x016A, r31
 860:	e0 93 69 01 	sts	0x0169, r30
 864:	20 97       	sbiw	r28, 0x00	; 0
 866:	c9 f0       	breq	.+50     	; 0x89a <fdevopen+0x88>
 868:	d1 87       	std	Z+9, r29	; 0x09
 86a:	c0 87       	std	Z+8, r28	; 0x08
 86c:	83 81       	ldd	r24, Z+3	; 0x03
 86e:	82 60       	ori	r24, 0x02	; 2
 870:	83 83       	std	Z+3, r24	; 0x03
 872:	80 91 6b 01 	lds	r24, 0x016B
 876:	90 91 6c 01 	lds	r25, 0x016C
 87a:	89 2b       	or	r24, r25
 87c:	71 f4       	brne	.+28     	; 0x89a <fdevopen+0x88>
 87e:	f0 93 6c 01 	sts	0x016C, r31
 882:	e0 93 6b 01 	sts	0x016B, r30
 886:	80 91 6d 01 	lds	r24, 0x016D
 88a:	90 91 6e 01 	lds	r25, 0x016E
 88e:	89 2b       	or	r24, r25
 890:	21 f4       	brne	.+8      	; 0x89a <fdevopen+0x88>
 892:	f0 93 6e 01 	sts	0x016E, r31
 896:	e0 93 6d 01 	sts	0x016D, r30
 89a:	cf 01       	movw	r24, r30
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	0f 91       	pop	r16
 8a4:	08 95       	ret

000008a6 <puts>:
 8a6:	0f 93       	push	r16
 8a8:	1f 93       	push	r17
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	e0 91 6b 01 	lds	r30, 0x016B
 8b2:	f0 91 6c 01 	lds	r31, 0x016C
 8b6:	23 81       	ldd	r18, Z+3	; 0x03
 8b8:	21 ff       	sbrs	r18, 1
 8ba:	1b c0       	rjmp	.+54     	; 0x8f2 <puts+0x4c>
 8bc:	8c 01       	movw	r16, r24
 8be:	d0 e0       	ldi	r29, 0x00	; 0
 8c0:	c0 e0       	ldi	r28, 0x00	; 0
 8c2:	f8 01       	movw	r30, r16
 8c4:	81 91       	ld	r24, Z+
 8c6:	8f 01       	movw	r16, r30
 8c8:	60 91 6b 01 	lds	r22, 0x016B
 8cc:	70 91 6c 01 	lds	r23, 0x016C
 8d0:	db 01       	movw	r26, r22
 8d2:	18 96       	adiw	r26, 0x08	; 8
 8d4:	ed 91       	ld	r30, X+
 8d6:	fc 91       	ld	r31, X
 8d8:	19 97       	sbiw	r26, 0x09	; 9
 8da:	88 23       	and	r24, r24
 8dc:	31 f0       	breq	.+12     	; 0x8ea <puts+0x44>
 8de:	09 95       	icall
 8e0:	89 2b       	or	r24, r25
 8e2:	79 f3       	breq	.-34     	; 0x8c2 <puts+0x1c>
 8e4:	df ef       	ldi	r29, 0xFF	; 255
 8e6:	cf ef       	ldi	r28, 0xFF	; 255
 8e8:	ec cf       	rjmp	.-40     	; 0x8c2 <puts+0x1c>
 8ea:	8a e0       	ldi	r24, 0x0A	; 10
 8ec:	09 95       	icall
 8ee:	89 2b       	or	r24, r25
 8f0:	19 f0       	breq	.+6      	; 0x8f8 <puts+0x52>
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	9f ef       	ldi	r25, 0xFF	; 255
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <puts+0x56>
 8f8:	8d 2f       	mov	r24, r29
 8fa:	9c 2f       	mov	r25, r28
 8fc:	df 91       	pop	r29
 8fe:	cf 91       	pop	r28
 900:	1f 91       	pop	r17
 902:	0f 91       	pop	r16
 904:	08 95       	ret

00000906 <calloc>:
 906:	0f 93       	push	r16
 908:	1f 93       	push	r17
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	86 9f       	mul	r24, r22
 910:	80 01       	movw	r16, r0
 912:	87 9f       	mul	r24, r23
 914:	10 0d       	add	r17, r0
 916:	96 9f       	mul	r25, r22
 918:	10 0d       	add	r17, r0
 91a:	11 24       	eor	r1, r1
 91c:	c8 01       	movw	r24, r16
 91e:	0d d0       	rcall	.+26     	; 0x93a <malloc>
 920:	ec 01       	movw	r28, r24
 922:	00 97       	sbiw	r24, 0x00	; 0
 924:	21 f0       	breq	.+8      	; 0x92e <calloc+0x28>
 926:	a8 01       	movw	r20, r16
 928:	60 e0       	ldi	r22, 0x00	; 0
 92a:	70 e0       	ldi	r23, 0x00	; 0
 92c:	33 d1       	rcall	.+614    	; 0xb94 <memset>
 92e:	ce 01       	movw	r24, r28
 930:	df 91       	pop	r29
 932:	cf 91       	pop	r28
 934:	1f 91       	pop	r17
 936:	0f 91       	pop	r16
 938:	08 95       	ret

0000093a <malloc>:
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	82 30       	cpi	r24, 0x02	; 2
 940:	91 05       	cpc	r25, r1
 942:	10 f4       	brcc	.+4      	; 0x948 <malloc+0xe>
 944:	82 e0       	ldi	r24, 0x02	; 2
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	e0 91 71 01 	lds	r30, 0x0171
 94c:	f0 91 72 01 	lds	r31, 0x0172
 950:	20 e0       	ldi	r18, 0x00	; 0
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	c0 e0       	ldi	r28, 0x00	; 0
 956:	d0 e0       	ldi	r29, 0x00	; 0
 958:	30 97       	sbiw	r30, 0x00	; 0
 95a:	11 f1       	breq	.+68     	; 0x9a0 <malloc+0x66>
 95c:	40 81       	ld	r20, Z
 95e:	51 81       	ldd	r21, Z+1	; 0x01
 960:	48 17       	cp	r20, r24
 962:	59 07       	cpc	r21, r25
 964:	c0 f0       	brcs	.+48     	; 0x996 <malloc+0x5c>
 966:	48 17       	cp	r20, r24
 968:	59 07       	cpc	r21, r25
 96a:	61 f4       	brne	.+24     	; 0x984 <malloc+0x4a>
 96c:	82 81       	ldd	r24, Z+2	; 0x02
 96e:	93 81       	ldd	r25, Z+3	; 0x03
 970:	20 97       	sbiw	r28, 0x00	; 0
 972:	19 f0       	breq	.+6      	; 0x97a <malloc+0x40>
 974:	9b 83       	std	Y+3, r25	; 0x03
 976:	8a 83       	std	Y+2, r24	; 0x02
 978:	2b c0       	rjmp	.+86     	; 0x9d0 <malloc+0x96>
 97a:	90 93 72 01 	sts	0x0172, r25
 97e:	80 93 71 01 	sts	0x0171, r24
 982:	26 c0       	rjmp	.+76     	; 0x9d0 <malloc+0x96>
 984:	21 15       	cp	r18, r1
 986:	31 05       	cpc	r19, r1
 988:	19 f0       	breq	.+6      	; 0x990 <malloc+0x56>
 98a:	42 17       	cp	r20, r18
 98c:	53 07       	cpc	r21, r19
 98e:	18 f4       	brcc	.+6      	; 0x996 <malloc+0x5c>
 990:	9a 01       	movw	r18, r20
 992:	be 01       	movw	r22, r28
 994:	df 01       	movw	r26, r30
 996:	ef 01       	movw	r28, r30
 998:	02 80       	ldd	r0, Z+2	; 0x02
 99a:	f3 81       	ldd	r31, Z+3	; 0x03
 99c:	e0 2d       	mov	r30, r0
 99e:	dc cf       	rjmp	.-72     	; 0x958 <malloc+0x1e>
 9a0:	21 15       	cp	r18, r1
 9a2:	31 05       	cpc	r19, r1
 9a4:	09 f1       	breq	.+66     	; 0x9e8 <malloc+0xae>
 9a6:	28 1b       	sub	r18, r24
 9a8:	39 0b       	sbc	r19, r25
 9aa:	24 30       	cpi	r18, 0x04	; 4
 9ac:	31 05       	cpc	r19, r1
 9ae:	90 f4       	brcc	.+36     	; 0x9d4 <malloc+0x9a>
 9b0:	12 96       	adiw	r26, 0x02	; 2
 9b2:	8d 91       	ld	r24, X+
 9b4:	9c 91       	ld	r25, X
 9b6:	13 97       	sbiw	r26, 0x03	; 3
 9b8:	61 15       	cp	r22, r1
 9ba:	71 05       	cpc	r23, r1
 9bc:	21 f0       	breq	.+8      	; 0x9c6 <malloc+0x8c>
 9be:	fb 01       	movw	r30, r22
 9c0:	93 83       	std	Z+3, r25	; 0x03
 9c2:	82 83       	std	Z+2, r24	; 0x02
 9c4:	04 c0       	rjmp	.+8      	; 0x9ce <malloc+0x94>
 9c6:	90 93 72 01 	sts	0x0172, r25
 9ca:	80 93 71 01 	sts	0x0171, r24
 9ce:	fd 01       	movw	r30, r26
 9d0:	32 96       	adiw	r30, 0x02	; 2
 9d2:	44 c0       	rjmp	.+136    	; 0xa5c <malloc+0x122>
 9d4:	fd 01       	movw	r30, r26
 9d6:	e2 0f       	add	r30, r18
 9d8:	f3 1f       	adc	r31, r19
 9da:	81 93       	st	Z+, r24
 9dc:	91 93       	st	Z+, r25
 9de:	22 50       	subi	r18, 0x02	; 2
 9e0:	31 09       	sbc	r19, r1
 9e2:	2d 93       	st	X+, r18
 9e4:	3c 93       	st	X, r19
 9e6:	3a c0       	rjmp	.+116    	; 0xa5c <malloc+0x122>
 9e8:	20 91 6f 01 	lds	r18, 0x016F
 9ec:	30 91 70 01 	lds	r19, 0x0170
 9f0:	23 2b       	or	r18, r19
 9f2:	41 f4       	brne	.+16     	; 0xa04 <malloc+0xca>
 9f4:	20 91 02 01 	lds	r18, 0x0102
 9f8:	30 91 03 01 	lds	r19, 0x0103
 9fc:	30 93 70 01 	sts	0x0170, r19
 a00:	20 93 6f 01 	sts	0x016F, r18
 a04:	20 91 00 01 	lds	r18, 0x0100
 a08:	30 91 01 01 	lds	r19, 0x0101
 a0c:	21 15       	cp	r18, r1
 a0e:	31 05       	cpc	r19, r1
 a10:	41 f4       	brne	.+16     	; 0xa22 <malloc+0xe8>
 a12:	2d b7       	in	r18, 0x3d	; 61
 a14:	3e b7       	in	r19, 0x3e	; 62
 a16:	40 91 04 01 	lds	r20, 0x0104
 a1a:	50 91 05 01 	lds	r21, 0x0105
 a1e:	24 1b       	sub	r18, r20
 a20:	35 0b       	sbc	r19, r21
 a22:	e0 91 6f 01 	lds	r30, 0x016F
 a26:	f0 91 70 01 	lds	r31, 0x0170
 a2a:	e2 17       	cp	r30, r18
 a2c:	f3 07       	cpc	r31, r19
 a2e:	a0 f4       	brcc	.+40     	; 0xa58 <malloc+0x11e>
 a30:	2e 1b       	sub	r18, r30
 a32:	3f 0b       	sbc	r19, r31
 a34:	28 17       	cp	r18, r24
 a36:	39 07       	cpc	r19, r25
 a38:	78 f0       	brcs	.+30     	; 0xa58 <malloc+0x11e>
 a3a:	ac 01       	movw	r20, r24
 a3c:	4e 5f       	subi	r20, 0xFE	; 254
 a3e:	5f 4f       	sbci	r21, 0xFF	; 255
 a40:	24 17       	cp	r18, r20
 a42:	35 07       	cpc	r19, r21
 a44:	48 f0       	brcs	.+18     	; 0xa58 <malloc+0x11e>
 a46:	4e 0f       	add	r20, r30
 a48:	5f 1f       	adc	r21, r31
 a4a:	50 93 70 01 	sts	0x0170, r21
 a4e:	40 93 6f 01 	sts	0x016F, r20
 a52:	81 93       	st	Z+, r24
 a54:	91 93       	st	Z+, r25
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <malloc+0x122>
 a58:	e0 e0       	ldi	r30, 0x00	; 0
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	cf 01       	movw	r24, r30
 a5e:	df 91       	pop	r29
 a60:	cf 91       	pop	r28
 a62:	08 95       	ret

00000a64 <free>:
 a64:	0f 93       	push	r16
 a66:	1f 93       	push	r17
 a68:	cf 93       	push	r28
 a6a:	df 93       	push	r29
 a6c:	00 97       	sbiw	r24, 0x00	; 0
 a6e:	09 f4       	brne	.+2      	; 0xa72 <free+0xe>
 a70:	8c c0       	rjmp	.+280    	; 0xb8a <free+0x126>
 a72:	fc 01       	movw	r30, r24
 a74:	32 97       	sbiw	r30, 0x02	; 2
 a76:	13 82       	std	Z+3, r1	; 0x03
 a78:	12 82       	std	Z+2, r1	; 0x02
 a7a:	00 91 71 01 	lds	r16, 0x0171
 a7e:	10 91 72 01 	lds	r17, 0x0172
 a82:	01 15       	cp	r16, r1
 a84:	11 05       	cpc	r17, r1
 a86:	81 f4       	brne	.+32     	; 0xaa8 <free+0x44>
 a88:	20 81       	ld	r18, Z
 a8a:	31 81       	ldd	r19, Z+1	; 0x01
 a8c:	82 0f       	add	r24, r18
 a8e:	93 1f       	adc	r25, r19
 a90:	20 91 6f 01 	lds	r18, 0x016F
 a94:	30 91 70 01 	lds	r19, 0x0170
 a98:	28 17       	cp	r18, r24
 a9a:	39 07       	cpc	r19, r25
 a9c:	79 f5       	brne	.+94     	; 0xafc <free+0x98>
 a9e:	f0 93 70 01 	sts	0x0170, r31
 aa2:	e0 93 6f 01 	sts	0x016F, r30
 aa6:	71 c0       	rjmp	.+226    	; 0xb8a <free+0x126>
 aa8:	d8 01       	movw	r26, r16
 aaa:	40 e0       	ldi	r20, 0x00	; 0
 aac:	50 e0       	ldi	r21, 0x00	; 0
 aae:	ae 17       	cp	r26, r30
 ab0:	bf 07       	cpc	r27, r31
 ab2:	50 f4       	brcc	.+20     	; 0xac8 <free+0x64>
 ab4:	12 96       	adiw	r26, 0x02	; 2
 ab6:	2d 91       	ld	r18, X+
 ab8:	3c 91       	ld	r19, X
 aba:	13 97       	sbiw	r26, 0x03	; 3
 abc:	ad 01       	movw	r20, r26
 abe:	21 15       	cp	r18, r1
 ac0:	31 05       	cpc	r19, r1
 ac2:	09 f1       	breq	.+66     	; 0xb06 <free+0xa2>
 ac4:	d9 01       	movw	r26, r18
 ac6:	f3 cf       	rjmp	.-26     	; 0xaae <free+0x4a>
 ac8:	9d 01       	movw	r18, r26
 aca:	da 01       	movw	r26, r20
 acc:	33 83       	std	Z+3, r19	; 0x03
 ace:	22 83       	std	Z+2, r18	; 0x02
 ad0:	60 81       	ld	r22, Z
 ad2:	71 81       	ldd	r23, Z+1	; 0x01
 ad4:	86 0f       	add	r24, r22
 ad6:	97 1f       	adc	r25, r23
 ad8:	82 17       	cp	r24, r18
 ada:	93 07       	cpc	r25, r19
 adc:	69 f4       	brne	.+26     	; 0xaf8 <free+0x94>
 ade:	ec 01       	movw	r28, r24
 ae0:	28 81       	ld	r18, Y
 ae2:	39 81       	ldd	r19, Y+1	; 0x01
 ae4:	26 0f       	add	r18, r22
 ae6:	37 1f       	adc	r19, r23
 ae8:	2e 5f       	subi	r18, 0xFE	; 254
 aea:	3f 4f       	sbci	r19, 0xFF	; 255
 aec:	31 83       	std	Z+1, r19	; 0x01
 aee:	20 83       	st	Z, r18
 af0:	8a 81       	ldd	r24, Y+2	; 0x02
 af2:	9b 81       	ldd	r25, Y+3	; 0x03
 af4:	93 83       	std	Z+3, r25	; 0x03
 af6:	82 83       	std	Z+2, r24	; 0x02
 af8:	45 2b       	or	r20, r21
 afa:	29 f4       	brne	.+10     	; 0xb06 <free+0xa2>
 afc:	f0 93 72 01 	sts	0x0172, r31
 b00:	e0 93 71 01 	sts	0x0171, r30
 b04:	42 c0       	rjmp	.+132    	; 0xb8a <free+0x126>
 b06:	13 96       	adiw	r26, 0x03	; 3
 b08:	fc 93       	st	X, r31
 b0a:	ee 93       	st	-X, r30
 b0c:	12 97       	sbiw	r26, 0x02	; 2
 b0e:	ed 01       	movw	r28, r26
 b10:	49 91       	ld	r20, Y+
 b12:	59 91       	ld	r21, Y+
 b14:	9e 01       	movw	r18, r28
 b16:	24 0f       	add	r18, r20
 b18:	35 1f       	adc	r19, r21
 b1a:	e2 17       	cp	r30, r18
 b1c:	f3 07       	cpc	r31, r19
 b1e:	71 f4       	brne	.+28     	; 0xb3c <free+0xd8>
 b20:	80 81       	ld	r24, Z
 b22:	91 81       	ldd	r25, Z+1	; 0x01
 b24:	84 0f       	add	r24, r20
 b26:	95 1f       	adc	r25, r21
 b28:	02 96       	adiw	r24, 0x02	; 2
 b2a:	11 96       	adiw	r26, 0x01	; 1
 b2c:	9c 93       	st	X, r25
 b2e:	8e 93       	st	-X, r24
 b30:	82 81       	ldd	r24, Z+2	; 0x02
 b32:	93 81       	ldd	r25, Z+3	; 0x03
 b34:	13 96       	adiw	r26, 0x03	; 3
 b36:	9c 93       	st	X, r25
 b38:	8e 93       	st	-X, r24
 b3a:	12 97       	sbiw	r26, 0x02	; 2
 b3c:	e0 e0       	ldi	r30, 0x00	; 0
 b3e:	f0 e0       	ldi	r31, 0x00	; 0
 b40:	d8 01       	movw	r26, r16
 b42:	12 96       	adiw	r26, 0x02	; 2
 b44:	8d 91       	ld	r24, X+
 b46:	9c 91       	ld	r25, X
 b48:	13 97       	sbiw	r26, 0x03	; 3
 b4a:	00 97       	sbiw	r24, 0x00	; 0
 b4c:	19 f0       	breq	.+6      	; 0xb54 <free+0xf0>
 b4e:	f8 01       	movw	r30, r16
 b50:	8c 01       	movw	r16, r24
 b52:	f6 cf       	rjmp	.-20     	; 0xb40 <free+0xdc>
 b54:	8d 91       	ld	r24, X+
 b56:	9c 91       	ld	r25, X
 b58:	98 01       	movw	r18, r16
 b5a:	2e 5f       	subi	r18, 0xFE	; 254
 b5c:	3f 4f       	sbci	r19, 0xFF	; 255
 b5e:	82 0f       	add	r24, r18
 b60:	93 1f       	adc	r25, r19
 b62:	20 91 6f 01 	lds	r18, 0x016F
 b66:	30 91 70 01 	lds	r19, 0x0170
 b6a:	28 17       	cp	r18, r24
 b6c:	39 07       	cpc	r19, r25
 b6e:	69 f4       	brne	.+26     	; 0xb8a <free+0x126>
 b70:	30 97       	sbiw	r30, 0x00	; 0
 b72:	29 f4       	brne	.+10     	; 0xb7e <free+0x11a>
 b74:	10 92 72 01 	sts	0x0172, r1
 b78:	10 92 71 01 	sts	0x0171, r1
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <free+0x11e>
 b7e:	13 82       	std	Z+3, r1	; 0x03
 b80:	12 82       	std	Z+2, r1	; 0x02
 b82:	10 93 70 01 	sts	0x0170, r17
 b86:	00 93 6f 01 	sts	0x016F, r16
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	1f 91       	pop	r17
 b90:	0f 91       	pop	r16
 b92:	08 95       	ret

00000b94 <memset>:
 b94:	dc 01       	movw	r26, r24
 b96:	01 c0       	rjmp	.+2      	; 0xb9a <memset+0x6>
 b98:	6d 93       	st	X+, r22
 b9a:	41 50       	subi	r20, 0x01	; 1
 b9c:	50 40       	sbci	r21, 0x00	; 0
 b9e:	e0 f7       	brcc	.-8      	; 0xb98 <memset+0x4>
 ba0:	08 95       	ret

00000ba2 <_exit>:
 ba2:	f8 94       	cli

00000ba4 <__stop_program>:
 ba4:	ff cf       	rjmp	.-2      	; 0xba4 <__stop_program>
