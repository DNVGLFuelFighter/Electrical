
Front_lights_module2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000e34  00000ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800120  00800120  00000ee8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001058  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000855  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce7  00000000  00000000  000029c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  000036b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bc  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a62  00000000  00000000  00003f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000496e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	38 c2       	rjmp	.+1136   	; 0x4ae <__vector_15>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c2       	rjmp	.+1054   	; 0x464 <__vector_17>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e4 e3       	ldi	r30, 0x34	; 52
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 32       	cpi	r26, 0x20	; 32
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a0 e2       	ldi	r26, 0x20	; 32
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a7 35       	cpi	r26, 0x57	; 87
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	c0 d1       	rcall	.+896    	; 0x44c <main>
  cc:	b1 c6       	rjmp	.+3426   	; 0xe30 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <__vector_18>:
        CANIDT4 = 1<<RTRTAG;
		CANCDMOB|=packet->length;
		}
    CANCDMOB|=0x40; //enable TX
	return TRUE;
	}
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	cf 93       	push	r28
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
  f8:	ed ee       	ldi	r30, 0xED	; 237
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	c0 81       	ld	r28, Z
  fe:	80 91 ec 00 	lds	r24, 0x00EC
 102:	68 2f       	mov	r22, r24
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	80 83       	st	Z, r24
 10a:	72 95       	swap	r23
 10c:	62 95       	swap	r22
 10e:	6f 70       	andi	r22, 0x0F	; 15
 110:	67 27       	eor	r22, r23
 112:	7f 70       	andi	r23, 0x0F	; 15
 114:	67 27       	eor	r22, r23
 116:	80 91 ee 00 	lds	r24, 0x00EE
 11a:	8f 75       	andi	r24, 0x5F	; 95
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_18+0x50>
 11e:	98 95       	break
 120:	20 91 f2 00 	lds	r18, 0x00F2
 124:	80 91 f3 00 	lds	r24, 0x00F3
 128:	e0 e2       	ldi	r30, 0x20	; 32
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	22 95       	swap	r18
 13c:	26 95       	lsr	r18
 13e:	27 70       	andi	r18, 0x07	; 7
 140:	82 2b       	or	r24, r18
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
 146:	80 91 ef 00 	lds	r24, 0x00EF
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	59 f0       	breq	.+22     	; 0x16a <__vector_18+0x9a>
 154:	e3 e2       	ldi	r30, 0x23	; 35
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	8d 5d       	subi	r24, 0xDD	; 221
 15a:	9e 4f       	sbci	r25, 0xFE	; 254
 15c:	aa ef       	ldi	r26, 0xFA	; 250
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	2c 91       	ld	r18, X
 162:	21 93       	st	Z+, r18
 164:	e8 17       	cp	r30, r24
 166:	f9 07       	cpc	r31, r25
 168:	d9 f7       	brne	.-10     	; 0x160 <__vector_18+0x90>
 16a:	10 92 ee 00 	sts	0x00EE, r1
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 ef 00 	sts	0x00EF, r24
 174:	fb 01       	movw	r30, r22
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e1 5d       	subi	r30, 0xD1	; 209
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	01 90       	ld	r0, Z+
 180:	f0 81       	ld	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	80 e2       	ldi	r24, 0x20	; 32
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	09 95       	icall
 18a:	c0 93 ed 00 	sts	0x00ED, r28
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <prepare_rx>:

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
 1b6:	8f 30       	cpi	r24, 0x0F	; 15
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <prepare_rx+0x6>
 1ba:	6d c0       	rjmp	.+218    	; 0x296 <prepare_rx+0xe0>
		return TRUE;
	canlist[ (unsigned)mob]=callback;
 1bc:	e8 2f       	mov	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e1 5d       	subi	r30, 0xD1	; 209
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	31 83       	std	Z+1, r19	; 0x01
 1ca:	20 83       	st	Z, r18
    CANPAGE = mob << 4;
 1cc:	98 2f       	mov	r25, r24
 1ce:	92 95       	swap	r25
 1d0:	90 7f       	andi	r25, 0xF0	; 240
 1d2:	90 93 ed 00 	sts	0x00ED, r25
	if( callback==0)			// release this MOB 
 1d6:	23 2b       	or	r18, r19
 1d8:	d9 f4       	brne	.+54     	; 0x210 <prepare_rx+0x5a>
		{
		CANSTMOB = 0x00;    	// cancel pending operation
 1da:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0x00;
 1de:	10 92 ef 00 	sts	0x00EF, r1
		unsigned mask=1<<mob;
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	a9 01       	movw	r20, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <prepare_rx+0x38>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <prepare_rx+0x34>
 1f2:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
 1f4:	ee ed       	ldi	r30, 0xDE	; 222
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	20 81       	ld	r18, Z
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
 200:	ef ed       	ldi	r30, 0xDF	; 223
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	90 95       	com	r25
 208:	89 23       	and	r24, r25
 20a:	80 83       	st	Z, r24
		return FALSE;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
 210:	90 91 ef 00 	lds	r25, 0x00EF
 214:	90 7c       	andi	r25, 0xC0	; 192
 216:	09 f0       	breq	.+2      	; 0x21a <prepare_rx+0x64>
 218:	40 c0       	rjmp	.+128    	; 0x29a <prepare_rx+0xe4>
		return TRUE;			// no vacancy ...
	CANSTMOB = 0x00;    	// cancel pending operation 
 21a:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;		
 21e:	ef ee       	ldi	r30, 0xEF	; 239
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	10 82       	st	Z, r1
	CANHPMOB = 0x00;		// enable direct mob indexing, see doc
 224:	10 92 ec 00 	sts	0x00EC, r1
	CANIDT1=id >>3;
 228:	9b 01       	movw	r18, r22
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	36 95       	lsr	r19
 234:	27 95       	ror	r18
 236:	20 93 f3 00 	sts	0x00F3, r18
	CANIDT2=id <<5;
 23a:	62 95       	swap	r22
 23c:	66 0f       	add	r22, r22
 23e:	60 7e       	andi	r22, 0xE0	; 224
 240:	60 93 f2 00 	sts	0x00F2, r22
	CANIDM1=idmask >>3;
 244:	9a 01       	movw	r18, r20
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	20 93 f7 00 	sts	0x00F7, r18
	CANIDM2=idmask <<5;
 256:	42 95       	swap	r20
 258:	44 0f       	add	r20, r20
 25a:	40 7e       	andi	r20, 0xE0	; 224
 25c:	40 93 f6 00 	sts	0x00F6, r20
	CANIDM3=0;
 260:	10 92 f5 00 	sts	0x00F5, r1
	CANIDM4=0;
 264:	10 92 f4 00 	sts	0x00F4, r1
	CANCDMOB=0x80; // enable RX
 268:	90 e8       	ldi	r25, 0x80	; 128
 26a:	90 83       	st	Z, r25
	unsigned mask=1<<mob;
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	a9 01       	movw	r20, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <prepare_rx+0xc2>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <prepare_rx+0xbe>
 27c:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
 27e:	ee ed       	ldi	r30, 0xDE	; 222
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	20 81       	ld	r18, Z
 284:	82 2b       	or	r24, r18
 286:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
 288:	ef ed       	ldi	r30, 0xDF	; 223
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	89 2b       	or	r24, r25
 290:	80 83       	st	Z, r24
	return FALSE;
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
	}

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
		return TRUE;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return FALSE;
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
		return TRUE;			// no vacancy ...
 29a:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return FALSE;
	}
 29c:	08 95       	ret

0000029e <can_init>:

void can_init( void)
	{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	unsigned mob;
//! \bug different baud rate support not implemented yet 
#if F_CPU == 8000000
	//Old implementation
	CANBT1=0x06;	// 8MHz, 100kbit/s
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2=0x0c;
 2a8:	8c e0       	ldi	r24, 0x0C	; 12
 2aa:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3=0x5a;
 2ae:	8a e5       	ldi	r24, 0x5A	; 90
 2b0:	80 93 e4 00 	sts	0x00E4, r24
 2b4:	80 e0       	ldi	r24, 0x00	; 0
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2b6:	cd ee       	ldi	r28, 0xED	; 237
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
 2ba:	ae ee       	ldi	r26, 0xEE	; 238
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
 2be:	ef ee       	ldi	r30, 0xEF	; 239
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2c2:	98 2f       	mov	r25, r24
 2c4:	92 95       	swap	r25
 2c6:	90 7f       	andi	r25, 0xF0	; 240
 2c8:	98 83       	st	Y, r25
		CANSTMOB = 0;
 2ca:	1c 92       	st	X, r1
		CANCDMOB = 0;
 2cc:	10 82       	st	Z, r1
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
#else
	CANBT1=0x26;	// 16 MHz, 100kbit/s
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
 2d0:	8f 30       	cpi	r24, 0x0F	; 15
 2d2:	b9 f7       	brne	.-18     	; 0x2c2 <can_init+0x24>
		{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
		}
	CANGCON |= 0x02;
 2d4:	e8 ed       	ldi	r30, 0xD8	; 216
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX);
 2de:	80 ea       	ldi	r24, 0xA0	; 160
 2e0:	80 93 db 00 	sts	0x00DB, r24
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <front_lights_init>:
void front_lights_headlights( int power) {
	if (power > HEADLIGHT_POWER_LIMIT) {
		OCR3AL = HEADLIGHT_POWER_LIMIT;
		return;
	}
	OCR3AL = power;
 2ea:	6c 9a       	sbi	0x0d, 4	; 13
 2ec:	6d 9a       	sbi	0x0d, 5	; 13
 2ee:	80 9a       	sbi	0x10, 0	; 16
 2f0:	81 9a       	sbi	0x10, 1	; 16
 2f2:	82 9a       	sbi	0x10, 2	; 16
 2f4:	73 98       	cbi	0x0e, 3	; 14
 2f6:	6b 9a       	sbi	0x0d, 3	; 13
 2f8:	e1 e9       	ldi	r30, 0x91	; 145
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 e1       	ldi	r24, 0x10	; 16
 2fe:	80 83       	st	Z, r24
 300:	a0 e9       	ldi	r26, 0x90	; 144
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	8c 91       	ld	r24, X
 306:	80 68       	ori	r24, 0x80	; 128
 308:	8c 93       	st	X, r24
 30a:	80 81       	ld	r24, Z
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	80 83       	st	Z, r24
 310:	80 81       	ld	r24, Z
 312:	81 60       	ori	r24, 0x01	; 1
 314:	80 83       	st	Z, r24
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	80 93 96 00 	sts	0x0096, r24
 31c:	10 92 97 00 	sts	0x0097, r1
 320:	10 92 98 00 	sts	0x0098, r1
 324:	08 95       	ret

00000326 <front_lights_eyebrows>:
}

void front_lights_eyebrows( BOOL on) {
	if (on & !IND_LEFT &!IND_RIGHT) {
 326:	48 2f       	mov	r20, r24
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	80 91 2c 01 	lds	r24, 0x012C
 330:	81 11       	cpse	r24, r1
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	80 91 2d 01 	lds	r24, 0x012D
 33a:	81 11       	cpse	r24, r1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	92 23       	and	r25, r18
 340:	29 2f       	mov	r18, r25
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	ca 01       	movw	r24, r20
 346:	82 23       	and	r24, r18
 348:	93 23       	and	r25, r19
 34a:	89 2b       	or	r24, r25
 34c:	19 f0       	breq	.+6      	; 0x354 <front_lights_eyebrows+0x2e>
		set_bit(PORTF, PF1);
 34e:	89 9a       	sbi	0x11, 1	; 17
		set_bit(PORTE, PE5);
 350:	75 9a       	sbi	0x0e, 5	; 14
		return;
 352:	08 95       	ret
	}
	clear_bit(PORTF, PF1);
 354:	89 98       	cbi	0x11, 1	; 17
	clear_bit(PORTE, PE5);
 356:	75 98       	cbi	0x0e, 5	; 14
 358:	08 95       	ret

0000035a <front_lights_angel_eyes>:
}

void front_lights_angel_eyes( BOOL on) {
	if (on) {
 35a:	88 23       	and	r24, r24
 35c:	11 f0       	breq	.+4      	; 0x362 <front_lights_angel_eyes+0x8>
		set_bit(PORTE, PE4);
 35e:	74 9a       	sbi	0x0e, 4	; 14
		return;
 360:	08 95       	ret
	}
	clear_bit(PORTE, PE4);
 362:	74 98       	cbi	0x0e, 4	; 14
 364:	08 95       	ret

00000366 <front_lights_turn_left>:
}

void front_lights_turn_left( BOOL on) {
	if (on) {
 366:	88 23       	and	r24, r24
 368:	39 f0       	breq	.+14     	; 0x378 <front_lights_turn_left+0x12>
		set_bit(PORTF, PF2);
 36a:	8a 9a       	sbi	0x11, 2	; 17
		if (!EYEBROWS_ON)
 36c:	80 91 2b 01 	lds	r24, 0x012B
 370:	81 11       	cpse	r24, r1
 372:	08 c0       	rjmp	.+16     	; 0x384 <front_lights_turn_left+0x1e>
			set_bit(PORTF, PF1);
 374:	89 9a       	sbi	0x11, 1	; 17
 376:	08 95       	ret
		return;
	}
	clear_bit(PORTF, PF2);
 378:	8a 98       	cbi	0x11, 2	; 17
	if(!EYEBROWS_ON)
 37a:	80 91 2b 01 	lds	r24, 0x012B
 37e:	81 11       	cpse	r24, r1
 380:	01 c0       	rjmp	.+2      	; 0x384 <front_lights_turn_left+0x1e>
		clear_bit(PORTF, PF1);
 382:	89 98       	cbi	0x11, 1	; 17
 384:	08 95       	ret

00000386 <front_lights_turn_right>:
}

void front_lights_turn_right( BOOL on) {
	if (on) {
 386:	88 23       	and	r24, r24
 388:	39 f0       	breq	.+14     	; 0x398 <front_lights_turn_right+0x12>
		set_bit(PORTF, PF0);
 38a:	88 9a       	sbi	0x11, 0	; 17
		if (!EYEBROWS_ON)
 38c:	80 91 2b 01 	lds	r24, 0x012B
 390:	81 11       	cpse	r24, r1
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <front_lights_turn_right+0x1e>
			set_bit(PORTE, PE5);
 394:	75 9a       	sbi	0x0e, 5	; 14
 396:	08 95       	ret
		return;
	}
	clear_bit(PORTF, PF0);
 398:	88 98       	cbi	0x11, 0	; 17
	if(!EYEBROWS_ON)
 39a:	80 91 2b 01 	lds	r24, 0x012B
 39e:	81 11       	cpse	r24, r1
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <front_lights_turn_right+0x1e>
		clear_bit(PORTE, PE5);	
 3a2:	75 98       	cbi	0x0e, 5	; 14
 3a4:	08 95       	ret

000003a6 <front_light_handler>:
}

void front_light_handler(CAN_packet *p, unsigned char mob) {
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
	(void)mob;
	if (p->id == ID_dashboard) {
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 81       	ld	r18, Z
 3ae:	31 81       	ldd	r19, Z+1	; 0x01
 3b0:	26 30       	cpi	r18, 0x06	; 6
 3b2:	31 05       	cpc	r19, r1
 3b4:	d9 f4       	brne	.+54     	; 0x3ec <front_light_handler+0x46>
		/* Headlights near and far */
		if (p->data[0] & HEADLIGHTS_NEAR)
 3b6:	23 81       	ldd	r18, Z+3	; 0x03
 3b8:	20 ff       	sbrs	r18, 0
 3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <front_light_handler+0x1e>
void front_lights_headlights( int power) {
	if (power > HEADLIGHT_POWER_LIMIT) {
		OCR3AL = HEADLIGHT_POWER_LIMIT;
		return;
	}
	OCR3AL = power;
 3bc:	29 e6       	ldi	r18, 0x69	; 105
 3be:	20 93 98 00 	sts	0x0098, r18
 3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <front_light_handler+0x2e>
	(void)mob;
	if (p->id == ID_dashboard) {
		/* Headlights near and far */
		if (p->data[0] & HEADLIGHTS_NEAR)
			front_lights_headlights(HEADLIGHT_POWER_LIMIT/2);
		else if (p->data[0] & HEADLIGHTS_FAR)
 3c4:	21 ff       	sbrs	r18, 1
 3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <front_light_handler+0x2a>
void front_lights_headlights( int power) {
	if (power > HEADLIGHT_POWER_LIMIT) {
		OCR3AL = HEADLIGHT_POWER_LIMIT;
		return;
	}
	OCR3AL = power;
 3c8:	22 ed       	ldi	r18, 0xD2	; 210
 3ca:	20 93 98 00 	sts	0x0098, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <front_light_handler+0x2e>
 3d0:	10 92 98 00 	sts	0x0098, r1
 3d4:	ec 01       	movw	r28, r24
			front_lights_headlights(HEADLIGHT_POWER_LIMIT/2);
		else if (p->data[0] & HEADLIGHTS_FAR)
			front_lights_headlights(HEADLIGHT_POWER_LIMIT);
		else front_lights_headlights(0);
		/* Eyebrows */
		front_lights_eyebrows(p->data[0] & EYEBROWS);
 3d6:	8b 81       	ldd	r24, Y+3	; 0x03
 3d8:	88 70       	andi	r24, 0x08	; 8
 3da:	a5 df       	rcall	.-182    	; 0x326 <front_lights_eyebrows>
		/* Angel eyes */
		front_lights_angel_eyes(p->data[0] & ANGEL_EYES);
 3dc:	8b 81       	ldd	r24, Y+3	; 0x03
 3de:	84 70       	andi	r24, 0x04	; 4
 3e0:	bc df       	rcall	.-136    	; 0x35a <front_lights_angel_eyes>
		/* Emergency lights */
		front_emergency(p->data[7] & EMERGENCY);
 3e2:	8a 85       	ldd	r24, Y+10	; 0x0a
 3e4:	80 71       	andi	r24, 0x10	; 16
	else
	front_lights_turn_right(TRUE);
}

void front_emergency( BOOL on) {
	EMERG = on;
 3e6:	80 93 2e 01 	sts	0x012E, r24
 3ea:	0c c0       	rjmp	.+24     	; 0x404 <front_light_handler+0x5e>
		front_lights_eyebrows(p->data[0] & EYEBROWS);
		/* Angel eyes */
		front_lights_angel_eyes(p->data[0] & ANGEL_EYES);
		/* Emergency lights */
		front_emergency(p->data[7] & EMERGENCY);
	} else if (p->id == ID_steeringWheel) {
 3ec:	25 30       	cpi	r18, 0x05	; 5
 3ee:	31 05       	cpc	r19, r1
 3f0:	49 f4       	brne	.+18     	; 0x404 <front_light_handler+0x5e>
		/* Right turn signal */
		front_ind_right(p->data[0] & INDICATOR_RIGHT);
 3f2:	fc 01       	movw	r30, r24
 3f4:	83 81       	ldd	r24, Z+3	; 0x03
 3f6:	98 2f       	mov	r25, r24
 3f8:	91 70       	andi	r25, 0x01	; 1
void front_ind_left( BOOL on) {
	IND_LEFT = on;
}

void front_ind_right( BOOL on) {
	IND_RIGHT = on;
 3fa:	90 93 2c 01 	sts	0x012C, r25
	} else if (p->id == ID_steeringWheel) {
		/* Right turn signal */
		front_ind_right(p->data[0] & INDICATOR_RIGHT);
	
		/* Left turn signal */
		front_ind_left(p->data[0] & INDICATOR_LEFT);
 3fe:	82 70       	andi	r24, 0x02	; 2
void front_emergency( BOOL on) {
	EMERG = on;
}

void front_ind_left( BOOL on) {
	IND_LEFT = on;
 400:	80 93 2d 01 	sts	0x012D, r24
		front_ind_right(p->data[0] & INDICATOR_RIGHT);
	
		/* Left turn signal */
		front_ind_left(p->data[0] & INDICATOR_LEFT);
	}
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <front_toggle_ind_left>:

void front_toggle_ind_left( void) {
	if (get_ind_left())
 40a:	8a 9b       	sbis	0x11, 2	; 17
 40c:	03 c0       	rjmp	.+6      	; 0x414 <front_toggle_ind_left+0xa>
		front_lights_turn_left(FALSE);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	aa cf       	rjmp	.-172    	; 0x366 <front_lights_turn_left>
 412:	08 95       	ret
	else
		front_lights_turn_left(TRUE);
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	a7 cf       	rjmp	.-178    	; 0x366 <front_lights_turn_left>
 418:	08 95       	ret

0000041a <front_toggle_ind_right>:
}

void front_toggle_ind_right( void) {
	if (get_ind_right())
 41a:	88 9b       	sbis	0x11, 0	; 17
 41c:	03 c0       	rjmp	.+6      	; 0x424 <front_toggle_ind_right+0xa>
	front_lights_turn_right(FALSE);
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	b2 cf       	rjmp	.-156    	; 0x386 <front_lights_turn_right>
 422:	08 95       	ret
	else
	front_lights_turn_right(TRUE);
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	af cf       	rjmp	.-162    	; 0x386 <front_lights_turn_right>
 428:	08 95       	ret

0000042a <inits>:
#include <stdio.h>
#include "front_lights_module.h"
#include "timer1.h"

void inits(void) {
	can_init();
 42a:	39 df       	rcall	.-398    	; 0x29e <can_init>
	USART_init(MYUBRR, true);
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	83 e3       	ldi	r24, 0x33	; 51
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	a2 d0       	rcall	.+324    	; 0x578 <USART_init>
	front_lights_init();
 434:	5a df       	rcall	.-332    	; 0x2ea <front_lights_init>
	timer1_init();
 436:	20 d0       	rcall	.+64     	; 0x478 <timer1_init>
	
	printf("\r\nInitialization complete");
 438:	86 e0       	ldi	r24, 0x06	; 6
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	9f 93       	push	r25
 43e:	8f 93       	push	r24
 440:	fc d0       	rcall	.+504    	; 0x63a <printf>
	set_bit(DDRB, DDB6);
 442:	26 9a       	sbi	0x04, 6	; 4
	clear_bit(PORTB, PB6);
 444:	2e 98       	cbi	0x05, 6	; 5
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	08 95       	ret

0000044c <main>:

int main(void)
{
	BOOL ret;

	inits();
 44c:	ee df       	rcall	.-36     	; 0x42a <inits>
	
	ret = prepare_rx(0, ID_steeringWheel, MASK_FRONT_LIGHTS, front_light_handler);
 44e:	23 ed       	ldi	r18, 0xD3	; 211
 450:	31 e0       	ldi	r19, 0x01	; 1
 452:	44 e0       	ldi	r20, 0x04	; 4
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	65 e0       	ldi	r22, 0x05	; 5
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	ac de       	rcall	.-680    	; 0x1b6 <prepare_rx>
	
	/* Set global interrupts */
	sei();
 45e:	78 94       	sei
	
	for(;;)
		asm("sleep");;
 460:	88 95       	sleep
 462:	fe cf       	rjmp	.-4      	; 0x460 <main+0x14>

00000464 <__vector_17>:
	set_bit(TCCR0A, CS00);
	/* Enable timer overflow */
	set_bit(TIMSK0, TOIE0);
}

ISR(TIMER0_OVF_vect) {
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
	
	
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <timer1_init>:
	/* DIsable interrupts */
	cli(); // same as cli()?
	/* Set TCNT1 to i */
	TCNT1 = i;
	/* Restore global interrupt flag */
	SREG = sreg;
 478:	e1 e8       	ldi	r30, 0x81	; 129
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	82 60       	ori	r24, 0x02	; 2
 480:	80 83       	st	Z, r24
 482:	80 81       	ld	r24, Z
 484:	81 60       	ori	r24, 0x01	; 1
 486:	80 83       	st	Z, r24
 488:	10 92 85 00 	sts	0x0085, r1
 48c:	10 92 84 00 	sts	0x0084, r1
 490:	ef e6       	ldi	r30, 0x6F	; 111
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	81 60       	ori	r24, 0x01	; 1
 498:	80 83       	st	Z, r24
 49a:	78 94       	sei
 49c:	e0 e8       	ldi	r30, 0x80	; 128
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	80 68       	ori	r24, 0x80	; 128
 4a4:	80 83       	st	Z, r24
 4a6:	80 81       	ld	r24, Z
 4a8:	8f 7b       	andi	r24, 0xBF	; 191
 4aa:	80 83       	st	Z, r24
 4ac:	08 95       	ret

000004ae <__vector_15>:
}


ISR(TIMER1_OVF_vect) {
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	0b b6       	in	r0, 0x3b	; 59
 4ba:	0f 92       	push	r0
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	ef 93       	push	r30
 4d2:	ff 93       	push	r31
	if (EMERG) {
 4d4:	80 91 2e 01 	lds	r24, 0x012E
 4d8:	88 23       	and	r24, r24
 4da:	11 f0       	breq	.+4      	; 0x4e0 <__vector_15+0x32>
		front_toggle_ind_left();
 4dc:	96 df       	rcall	.-212    	; 0x40a <front_toggle_ind_left>
		front_toggle_ind_right();
 4de:	9d df       	rcall	.-198    	; 0x41a <front_toggle_ind_right>
	}
	if ((!EMERG) & IND_LEFT) {
 4e0:	21 e0       	ldi	r18, 0x01	; 1
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	80 91 2e 01 	lds	r24, 0x012E
 4e8:	88 23       	and	r24, r24
 4ea:	11 f0       	breq	.+4      	; 0x4f0 <__vector_15+0x42>
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	90 91 2d 01 	lds	r25, 0x012D
 4f4:	89 2f       	mov	r24, r25
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	82 23       	and	r24, r18
 4fa:	93 23       	and	r25, r19
 4fc:	89 2b       	or	r24, r25
 4fe:	11 f0       	breq	.+4      	; 0x504 <__vector_15+0x56>
		// toggle the left indicator
		front_toggle_ind_left();
 500:	84 df       	rcall	.-248    	; 0x40a <front_toggle_ind_left>
 502:	02 c0       	rjmp	.+4      	; 0x508 <__vector_15+0x5a>
	} else
		front_lights_turn_left(FALSE);
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	2f df       	rcall	.-418    	; 0x366 <front_lights_turn_left>
	if ((!EMERG) & IND_RIGHT) {
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	80 91 2e 01 	lds	r24, 0x012E
 510:	88 23       	and	r24, r24
 512:	11 f0       	breq	.+4      	; 0x518 <__vector_15+0x6a>
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	90 91 2c 01 	lds	r25, 0x012C
 51c:	89 2f       	mov	r24, r25
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	82 23       	and	r24, r18
 522:	93 23       	and	r25, r19
 524:	89 2b       	or	r24, r25
 526:	11 f0       	breq	.+4      	; 0x52c <__vector_15+0x7e>
		// toggle the right indicator
		front_toggle_ind_right();
 528:	78 df       	rcall	.-272    	; 0x41a <front_toggle_ind_right>
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__vector_15+0x82>
	} else
		front_lights_turn_right(FALSE);
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	2b df       	rcall	.-426    	; 0x386 <front_lights_turn_right>
 530:	ff 91       	pop	r31
 532:	ef 91       	pop	r30
 534:	bf 91       	pop	r27
 536:	af 91       	pop	r26
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	7f 91       	pop	r23
 53e:	6f 91       	pop	r22
 540:	5f 91       	pop	r21
 542:	4f 91       	pop	r20
 544:	3f 91       	pop	r19
 546:	2f 91       	pop	r18
 548:	0f 90       	pop	r0
 54a:	0b be       	out	0x3b, r0	; 59
 54c:	0f 90       	pop	r0
 54e:	0f be       	out	0x3f, r0	; 63
 550:	0f 90       	pop	r0
 552:	1f 90       	pop	r1
 554:	18 95       	reti

00000556 <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 556:	e0 ec       	ldi	r30, 0xC0	; 192
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	90 81       	ld	r25, Z
 55c:	95 ff       	sbrs	r25, 5
 55e:	fd cf       	rjmp	.-6      	; 0x55a <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 560:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	08 95       	ret

00000568 <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 568:	e0 ec       	ldi	r30, 0xC0	; 192
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	88 23       	and	r24, r24
 570:	ec f7       	brge	.-6      	; 0x56c <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 572:	80 91 c6 00 	lds	r24, 0x00C6
}
 576:	08 95       	ret

00000578 <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 578:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 57c:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 580:	86 e0       	ldi	r24, 0x06	; 6
 582:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 586:	66 23       	and	r22, r22
 588:	41 f0       	breq	.+16     	; 0x59a <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 58a:	e1 ec       	ldi	r30, 0xC1	; 193
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	80 61       	ori	r24, 0x10	; 16
 592:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 594:	80 81       	ld	r24, Z
 596:	88 60       	ori	r24, 0x08	; 8
 598:	80 83       	st	Z, r24
	}
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 59a:	64 eb       	ldi	r22, 0xB4	; 180
 59c:	72 e0       	ldi	r23, 0x02	; 2
 59e:	8b ea       	ldi	r24, 0xAB	; 171
 5a0:	92 e0       	ldi	r25, 0x02	; 2
 5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <fdevopen>
 5a4:	08 95       	ret

000005a6 <fdevopen>:
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	00 97       	sbiw	r24, 0x00	; 0
 5b0:	31 f4       	brne	.+12     	; 0x5be <fdevopen+0x18>
 5b2:	61 15       	cp	r22, r1
 5b4:	71 05       	cpc	r23, r1
 5b6:	19 f4       	brne	.+6      	; 0x5be <fdevopen+0x18>
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	39 c0       	rjmp	.+114    	; 0x630 <fdevopen+0x8a>
 5be:	8b 01       	movw	r16, r22
 5c0:	ec 01       	movw	r28, r24
 5c2:	6e e0       	ldi	r22, 0x0E	; 14
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	38 d2       	rcall	.+1136   	; 0xa3c <calloc>
 5cc:	fc 01       	movw	r30, r24
 5ce:	89 2b       	or	r24, r25
 5d0:	99 f3       	breq	.-26     	; 0x5b8 <fdevopen+0x12>
 5d2:	80 e8       	ldi	r24, 0x80	; 128
 5d4:	83 83       	std	Z+3, r24	; 0x03
 5d6:	01 15       	cp	r16, r1
 5d8:	11 05       	cpc	r17, r1
 5da:	71 f0       	breq	.+28     	; 0x5f8 <fdevopen+0x52>
 5dc:	13 87       	std	Z+11, r17	; 0x0b
 5de:	02 87       	std	Z+10, r16	; 0x0a
 5e0:	81 e8       	ldi	r24, 0x81	; 129
 5e2:	83 83       	std	Z+3, r24	; 0x03
 5e4:	80 91 4d 01 	lds	r24, 0x014D
 5e8:	90 91 4e 01 	lds	r25, 0x014E
 5ec:	89 2b       	or	r24, r25
 5ee:	21 f4       	brne	.+8      	; 0x5f8 <fdevopen+0x52>
 5f0:	f0 93 4e 01 	sts	0x014E, r31
 5f4:	e0 93 4d 01 	sts	0x014D, r30
 5f8:	20 97       	sbiw	r28, 0x00	; 0
 5fa:	c9 f0       	breq	.+50     	; 0x62e <fdevopen+0x88>
 5fc:	d1 87       	std	Z+9, r29	; 0x09
 5fe:	c0 87       	std	Z+8, r28	; 0x08
 600:	83 81       	ldd	r24, Z+3	; 0x03
 602:	82 60       	ori	r24, 0x02	; 2
 604:	83 83       	std	Z+3, r24	; 0x03
 606:	80 91 4f 01 	lds	r24, 0x014F
 60a:	90 91 50 01 	lds	r25, 0x0150
 60e:	89 2b       	or	r24, r25
 610:	71 f4       	brne	.+28     	; 0x62e <fdevopen+0x88>
 612:	f0 93 50 01 	sts	0x0150, r31
 616:	e0 93 4f 01 	sts	0x014F, r30
 61a:	80 91 51 01 	lds	r24, 0x0151
 61e:	90 91 52 01 	lds	r25, 0x0152
 622:	89 2b       	or	r24, r25
 624:	21 f4       	brne	.+8      	; 0x62e <fdevopen+0x88>
 626:	f0 93 52 01 	sts	0x0152, r31
 62a:	e0 93 51 01 	sts	0x0151, r30
 62e:	cf 01       	movw	r24, r30
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	1f 91       	pop	r17
 636:	0f 91       	pop	r16
 638:	08 95       	ret

0000063a <printf>:
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
 642:	ae 01       	movw	r20, r28
 644:	4b 5f       	subi	r20, 0xFB	; 251
 646:	5f 4f       	sbci	r21, 0xFF	; 255
 648:	fa 01       	movw	r30, r20
 64a:	61 91       	ld	r22, Z+
 64c:	71 91       	ld	r23, Z+
 64e:	af 01       	movw	r20, r30
 650:	80 91 4f 01 	lds	r24, 0x014F
 654:	90 91 50 01 	lds	r25, 0x0150
 658:	03 d0       	rcall	.+6      	; 0x660 <vfprintf>
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <vfprintf>:
 660:	2f 92       	push	r2
 662:	3f 92       	push	r3
 664:	4f 92       	push	r4
 666:	5f 92       	push	r5
 668:	6f 92       	push	r6
 66a:	7f 92       	push	r7
 66c:	8f 92       	push	r8
 66e:	9f 92       	push	r9
 670:	af 92       	push	r10
 672:	bf 92       	push	r11
 674:	cf 92       	push	r12
 676:	df 92       	push	r13
 678:	ef 92       	push	r14
 67a:	ff 92       	push	r15
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	2c 97       	sbiw	r28, 0x0c	; 12
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	f8 94       	cli
 68e:	de bf       	out	0x3e, r29	; 62
 690:	0f be       	out	0x3f, r0	; 63
 692:	cd bf       	out	0x3d, r28	; 61
 694:	7c 01       	movw	r14, r24
 696:	6b 01       	movw	r12, r22
 698:	8a 01       	movw	r16, r20
 69a:	fc 01       	movw	r30, r24
 69c:	17 82       	std	Z+7, r1	; 0x07
 69e:	16 82       	std	Z+6, r1	; 0x06
 6a0:	83 81       	ldd	r24, Z+3	; 0x03
 6a2:	81 ff       	sbrs	r24, 1
 6a4:	b0 c1       	rjmp	.+864    	; 0xa06 <vfprintf+0x3a6>
 6a6:	ce 01       	movw	r24, r28
 6a8:	01 96       	adiw	r24, 0x01	; 1
 6aa:	4c 01       	movw	r8, r24
 6ac:	f7 01       	movw	r30, r14
 6ae:	93 81       	ldd	r25, Z+3	; 0x03
 6b0:	f6 01       	movw	r30, r12
 6b2:	93 fd       	sbrc	r25, 3
 6b4:	85 91       	lpm	r24, Z+
 6b6:	93 ff       	sbrs	r25, 3
 6b8:	81 91       	ld	r24, Z+
 6ba:	6f 01       	movw	r12, r30
 6bc:	88 23       	and	r24, r24
 6be:	09 f4       	brne	.+2      	; 0x6c2 <vfprintf+0x62>
 6c0:	9e c1       	rjmp	.+828    	; 0x9fe <vfprintf+0x39e>
 6c2:	85 32       	cpi	r24, 0x25	; 37
 6c4:	39 f4       	brne	.+14     	; 0x6d4 <vfprintf+0x74>
 6c6:	93 fd       	sbrc	r25, 3
 6c8:	85 91       	lpm	r24, Z+
 6ca:	93 ff       	sbrs	r25, 3
 6cc:	81 91       	ld	r24, Z+
 6ce:	6f 01       	movw	r12, r30
 6d0:	85 32       	cpi	r24, 0x25	; 37
 6d2:	21 f4       	brne	.+8      	; 0x6dc <vfprintf+0x7c>
 6d4:	b7 01       	movw	r22, r14
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	15 d3       	rcall	.+1578   	; 0xd04 <fputc>
 6da:	e8 cf       	rjmp	.-48     	; 0x6ac <vfprintf+0x4c>
 6dc:	51 2c       	mov	r5, r1
 6de:	31 2c       	mov	r3, r1
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	20 32       	cpi	r18, 0x20	; 32
 6e4:	a0 f4       	brcc	.+40     	; 0x70e <vfprintf+0xae>
 6e6:	8b 32       	cpi	r24, 0x2B	; 43
 6e8:	69 f0       	breq	.+26     	; 0x704 <vfprintf+0xa4>
 6ea:	30 f4       	brcc	.+12     	; 0x6f8 <vfprintf+0x98>
 6ec:	80 32       	cpi	r24, 0x20	; 32
 6ee:	59 f0       	breq	.+22     	; 0x706 <vfprintf+0xa6>
 6f0:	83 32       	cpi	r24, 0x23	; 35
 6f2:	69 f4       	brne	.+26     	; 0x70e <vfprintf+0xae>
 6f4:	20 61       	ori	r18, 0x10	; 16
 6f6:	2c c0       	rjmp	.+88     	; 0x750 <vfprintf+0xf0>
 6f8:	8d 32       	cpi	r24, 0x2D	; 45
 6fa:	39 f0       	breq	.+14     	; 0x70a <vfprintf+0xaa>
 6fc:	80 33       	cpi	r24, 0x30	; 48
 6fe:	39 f4       	brne	.+14     	; 0x70e <vfprintf+0xae>
 700:	21 60       	ori	r18, 0x01	; 1
 702:	26 c0       	rjmp	.+76     	; 0x750 <vfprintf+0xf0>
 704:	22 60       	ori	r18, 0x02	; 2
 706:	24 60       	ori	r18, 0x04	; 4
 708:	23 c0       	rjmp	.+70     	; 0x750 <vfprintf+0xf0>
 70a:	28 60       	ori	r18, 0x08	; 8
 70c:	21 c0       	rjmp	.+66     	; 0x750 <vfprintf+0xf0>
 70e:	27 fd       	sbrc	r18, 7
 710:	27 c0       	rjmp	.+78     	; 0x760 <vfprintf+0x100>
 712:	30 ed       	ldi	r19, 0xD0	; 208
 714:	38 0f       	add	r19, r24
 716:	3a 30       	cpi	r19, 0x0A	; 10
 718:	78 f4       	brcc	.+30     	; 0x738 <vfprintf+0xd8>
 71a:	26 ff       	sbrs	r18, 6
 71c:	06 c0       	rjmp	.+12     	; 0x72a <vfprintf+0xca>
 71e:	fa e0       	ldi	r31, 0x0A	; 10
 720:	5f 9e       	mul	r5, r31
 722:	30 0d       	add	r19, r0
 724:	11 24       	eor	r1, r1
 726:	53 2e       	mov	r5, r19
 728:	13 c0       	rjmp	.+38     	; 0x750 <vfprintf+0xf0>
 72a:	8a e0       	ldi	r24, 0x0A	; 10
 72c:	38 9e       	mul	r3, r24
 72e:	30 0d       	add	r19, r0
 730:	11 24       	eor	r1, r1
 732:	33 2e       	mov	r3, r19
 734:	20 62       	ori	r18, 0x20	; 32
 736:	0c c0       	rjmp	.+24     	; 0x750 <vfprintf+0xf0>
 738:	8e 32       	cpi	r24, 0x2E	; 46
 73a:	21 f4       	brne	.+8      	; 0x744 <vfprintf+0xe4>
 73c:	26 fd       	sbrc	r18, 6
 73e:	5f c1       	rjmp	.+702    	; 0x9fe <vfprintf+0x39e>
 740:	20 64       	ori	r18, 0x40	; 64
 742:	06 c0       	rjmp	.+12     	; 0x750 <vfprintf+0xf0>
 744:	8c 36       	cpi	r24, 0x6C	; 108
 746:	11 f4       	brne	.+4      	; 0x74c <vfprintf+0xec>
 748:	20 68       	ori	r18, 0x80	; 128
 74a:	02 c0       	rjmp	.+4      	; 0x750 <vfprintf+0xf0>
 74c:	88 36       	cpi	r24, 0x68	; 104
 74e:	41 f4       	brne	.+16     	; 0x760 <vfprintf+0x100>
 750:	f6 01       	movw	r30, r12
 752:	93 fd       	sbrc	r25, 3
 754:	85 91       	lpm	r24, Z+
 756:	93 ff       	sbrs	r25, 3
 758:	81 91       	ld	r24, Z+
 75a:	6f 01       	movw	r12, r30
 75c:	81 11       	cpse	r24, r1
 75e:	c1 cf       	rjmp	.-126    	; 0x6e2 <vfprintf+0x82>
 760:	98 2f       	mov	r25, r24
 762:	9f 7d       	andi	r25, 0xDF	; 223
 764:	95 54       	subi	r25, 0x45	; 69
 766:	93 30       	cpi	r25, 0x03	; 3
 768:	28 f4       	brcc	.+10     	; 0x774 <vfprintf+0x114>
 76a:	0c 5f       	subi	r16, 0xFC	; 252
 76c:	1f 4f       	sbci	r17, 0xFF	; 255
 76e:	ff e3       	ldi	r31, 0x3F	; 63
 770:	f9 83       	std	Y+1, r31	; 0x01
 772:	0d c0       	rjmp	.+26     	; 0x78e <vfprintf+0x12e>
 774:	83 36       	cpi	r24, 0x63	; 99
 776:	31 f0       	breq	.+12     	; 0x784 <vfprintf+0x124>
 778:	83 37       	cpi	r24, 0x73	; 115
 77a:	71 f0       	breq	.+28     	; 0x798 <vfprintf+0x138>
 77c:	83 35       	cpi	r24, 0x53	; 83
 77e:	09 f0       	breq	.+2      	; 0x782 <vfprintf+0x122>
 780:	57 c0       	rjmp	.+174    	; 0x830 <vfprintf+0x1d0>
 782:	21 c0       	rjmp	.+66     	; 0x7c6 <vfprintf+0x166>
 784:	f8 01       	movw	r30, r16
 786:	80 81       	ld	r24, Z
 788:	89 83       	std	Y+1, r24	; 0x01
 78a:	0e 5f       	subi	r16, 0xFE	; 254
 78c:	1f 4f       	sbci	r17, 0xFF	; 255
 78e:	44 24       	eor	r4, r4
 790:	43 94       	inc	r4
 792:	51 2c       	mov	r5, r1
 794:	54 01       	movw	r10, r8
 796:	14 c0       	rjmp	.+40     	; 0x7c0 <vfprintf+0x160>
 798:	38 01       	movw	r6, r16
 79a:	f2 e0       	ldi	r31, 0x02	; 2
 79c:	6f 0e       	add	r6, r31
 79e:	71 1c       	adc	r7, r1
 7a0:	f8 01       	movw	r30, r16
 7a2:	a0 80       	ld	r10, Z
 7a4:	b1 80       	ldd	r11, Z+1	; 0x01
 7a6:	26 ff       	sbrs	r18, 6
 7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <vfprintf+0x150>
 7aa:	65 2d       	mov	r22, r5
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <vfprintf+0x154>
 7b0:	6f ef       	ldi	r22, 0xFF	; 255
 7b2:	7f ef       	ldi	r23, 0xFF	; 255
 7b4:	c5 01       	movw	r24, r10
 7b6:	2c 87       	std	Y+12, r18	; 0x0c
 7b8:	9a d2       	rcall	.+1332   	; 0xcee <strnlen>
 7ba:	2c 01       	movw	r4, r24
 7bc:	83 01       	movw	r16, r6
 7be:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c0:	2f 77       	andi	r18, 0x7F	; 127
 7c2:	22 2e       	mov	r2, r18
 7c4:	16 c0       	rjmp	.+44     	; 0x7f2 <vfprintf+0x192>
 7c6:	38 01       	movw	r6, r16
 7c8:	f2 e0       	ldi	r31, 0x02	; 2
 7ca:	6f 0e       	add	r6, r31
 7cc:	71 1c       	adc	r7, r1
 7ce:	f8 01       	movw	r30, r16
 7d0:	a0 80       	ld	r10, Z
 7d2:	b1 80       	ldd	r11, Z+1	; 0x01
 7d4:	26 ff       	sbrs	r18, 6
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x17e>
 7d8:	65 2d       	mov	r22, r5
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <vfprintf+0x182>
 7de:	6f ef       	ldi	r22, 0xFF	; 255
 7e0:	7f ef       	ldi	r23, 0xFF	; 255
 7e2:	c5 01       	movw	r24, r10
 7e4:	2c 87       	std	Y+12, r18	; 0x0c
 7e6:	71 d2       	rcall	.+1250   	; 0xcca <strnlen_P>
 7e8:	2c 01       	movw	r4, r24
 7ea:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ec:	20 68       	ori	r18, 0x80	; 128
 7ee:	22 2e       	mov	r2, r18
 7f0:	83 01       	movw	r16, r6
 7f2:	23 fc       	sbrc	r2, 3
 7f4:	19 c0       	rjmp	.+50     	; 0x828 <vfprintf+0x1c8>
 7f6:	83 2d       	mov	r24, r3
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	48 16       	cp	r4, r24
 7fc:	59 06       	cpc	r5, r25
 7fe:	a0 f4       	brcc	.+40     	; 0x828 <vfprintf+0x1c8>
 800:	b7 01       	movw	r22, r14
 802:	80 e2       	ldi	r24, 0x20	; 32
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	7e d2       	rcall	.+1276   	; 0xd04 <fputc>
 808:	3a 94       	dec	r3
 80a:	f5 cf       	rjmp	.-22     	; 0x7f6 <vfprintf+0x196>
 80c:	f5 01       	movw	r30, r10
 80e:	27 fc       	sbrc	r2, 7
 810:	85 91       	lpm	r24, Z+
 812:	27 fe       	sbrs	r2, 7
 814:	81 91       	ld	r24, Z+
 816:	5f 01       	movw	r10, r30
 818:	b7 01       	movw	r22, r14
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	73 d2       	rcall	.+1254   	; 0xd04 <fputc>
 81e:	31 10       	cpse	r3, r1
 820:	3a 94       	dec	r3
 822:	f1 e0       	ldi	r31, 0x01	; 1
 824:	4f 1a       	sub	r4, r31
 826:	51 08       	sbc	r5, r1
 828:	41 14       	cp	r4, r1
 82a:	51 04       	cpc	r5, r1
 82c:	79 f7       	brne	.-34     	; 0x80c <vfprintf+0x1ac>
 82e:	de c0       	rjmp	.+444    	; 0x9ec <vfprintf+0x38c>
 830:	84 36       	cpi	r24, 0x64	; 100
 832:	11 f0       	breq	.+4      	; 0x838 <vfprintf+0x1d8>
 834:	89 36       	cpi	r24, 0x69	; 105
 836:	31 f5       	brne	.+76     	; 0x884 <vfprintf+0x224>
 838:	f8 01       	movw	r30, r16
 83a:	27 ff       	sbrs	r18, 7
 83c:	07 c0       	rjmp	.+14     	; 0x84c <vfprintf+0x1ec>
 83e:	60 81       	ld	r22, Z
 840:	71 81       	ldd	r23, Z+1	; 0x01
 842:	82 81       	ldd	r24, Z+2	; 0x02
 844:	93 81       	ldd	r25, Z+3	; 0x03
 846:	0c 5f       	subi	r16, 0xFC	; 252
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	08 c0       	rjmp	.+16     	; 0x85c <vfprintf+0x1fc>
 84c:	60 81       	ld	r22, Z
 84e:	71 81       	ldd	r23, Z+1	; 0x01
 850:	07 2e       	mov	r0, r23
 852:	00 0c       	add	r0, r0
 854:	88 0b       	sbc	r24, r24
 856:	99 0b       	sbc	r25, r25
 858:	0e 5f       	subi	r16, 0xFE	; 254
 85a:	1f 4f       	sbci	r17, 0xFF	; 255
 85c:	2f 76       	andi	r18, 0x6F	; 111
 85e:	72 2e       	mov	r7, r18
 860:	97 ff       	sbrs	r25, 7
 862:	09 c0       	rjmp	.+18     	; 0x876 <vfprintf+0x216>
 864:	90 95       	com	r25
 866:	80 95       	com	r24
 868:	70 95       	com	r23
 86a:	61 95       	neg	r22
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	20 68       	ori	r18, 0x80	; 128
 874:	72 2e       	mov	r7, r18
 876:	2a e0       	ldi	r18, 0x0A	; 10
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	a4 01       	movw	r20, r8
 87c:	7b d2       	rcall	.+1270   	; 0xd74 <__ultoa_invert>
 87e:	a8 2e       	mov	r10, r24
 880:	a8 18       	sub	r10, r8
 882:	43 c0       	rjmp	.+134    	; 0x90a <vfprintf+0x2aa>
 884:	85 37       	cpi	r24, 0x75	; 117
 886:	29 f4       	brne	.+10     	; 0x892 <vfprintf+0x232>
 888:	2f 7e       	andi	r18, 0xEF	; 239
 88a:	b2 2e       	mov	r11, r18
 88c:	2a e0       	ldi	r18, 0x0A	; 10
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	25 c0       	rjmp	.+74     	; 0x8dc <vfprintf+0x27c>
 892:	f2 2f       	mov	r31, r18
 894:	f9 7f       	andi	r31, 0xF9	; 249
 896:	bf 2e       	mov	r11, r31
 898:	8f 36       	cpi	r24, 0x6F	; 111
 89a:	c1 f0       	breq	.+48     	; 0x8cc <vfprintf+0x26c>
 89c:	18 f4       	brcc	.+6      	; 0x8a4 <vfprintf+0x244>
 89e:	88 35       	cpi	r24, 0x58	; 88
 8a0:	79 f0       	breq	.+30     	; 0x8c0 <vfprintf+0x260>
 8a2:	ad c0       	rjmp	.+346    	; 0x9fe <vfprintf+0x39e>
 8a4:	80 37       	cpi	r24, 0x70	; 112
 8a6:	19 f0       	breq	.+6      	; 0x8ae <vfprintf+0x24e>
 8a8:	88 37       	cpi	r24, 0x78	; 120
 8aa:	21 f0       	breq	.+8      	; 0x8b4 <vfprintf+0x254>
 8ac:	a8 c0       	rjmp	.+336    	; 0x9fe <vfprintf+0x39e>
 8ae:	2f 2f       	mov	r18, r31
 8b0:	20 61       	ori	r18, 0x10	; 16
 8b2:	b2 2e       	mov	r11, r18
 8b4:	b4 fe       	sbrs	r11, 4
 8b6:	0d c0       	rjmp	.+26     	; 0x8d2 <vfprintf+0x272>
 8b8:	8b 2d       	mov	r24, r11
 8ba:	84 60       	ori	r24, 0x04	; 4
 8bc:	b8 2e       	mov	r11, r24
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <vfprintf+0x272>
 8c0:	24 ff       	sbrs	r18, 4
 8c2:	0a c0       	rjmp	.+20     	; 0x8d8 <vfprintf+0x278>
 8c4:	9f 2f       	mov	r25, r31
 8c6:	96 60       	ori	r25, 0x06	; 6
 8c8:	b9 2e       	mov	r11, r25
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <vfprintf+0x278>
 8cc:	28 e0       	ldi	r18, 0x08	; 8
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	05 c0       	rjmp	.+10     	; 0x8dc <vfprintf+0x27c>
 8d2:	20 e1       	ldi	r18, 0x10	; 16
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0x27c>
 8d8:	20 e1       	ldi	r18, 0x10	; 16
 8da:	32 e0       	ldi	r19, 0x02	; 2
 8dc:	f8 01       	movw	r30, r16
 8de:	b7 fe       	sbrs	r11, 7
 8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <vfprintf+0x290>
 8e2:	60 81       	ld	r22, Z
 8e4:	71 81       	ldd	r23, Z+1	; 0x01
 8e6:	82 81       	ldd	r24, Z+2	; 0x02
 8e8:	93 81       	ldd	r25, Z+3	; 0x03
 8ea:	0c 5f       	subi	r16, 0xFC	; 252
 8ec:	1f 4f       	sbci	r17, 0xFF	; 255
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <vfprintf+0x29c>
 8f0:	60 81       	ld	r22, Z
 8f2:	71 81       	ldd	r23, Z+1	; 0x01
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 5f       	subi	r16, 0xFE	; 254
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
 8fc:	a4 01       	movw	r20, r8
 8fe:	3a d2       	rcall	.+1140   	; 0xd74 <__ultoa_invert>
 900:	a8 2e       	mov	r10, r24
 902:	a8 18       	sub	r10, r8
 904:	fb 2d       	mov	r31, r11
 906:	ff 77       	andi	r31, 0x7F	; 127
 908:	7f 2e       	mov	r7, r31
 90a:	76 fe       	sbrs	r7, 6
 90c:	0b c0       	rjmp	.+22     	; 0x924 <vfprintf+0x2c4>
 90e:	37 2d       	mov	r19, r7
 910:	3e 7f       	andi	r19, 0xFE	; 254
 912:	a5 14       	cp	r10, r5
 914:	50 f4       	brcc	.+20     	; 0x92a <vfprintf+0x2ca>
 916:	74 fe       	sbrs	r7, 4
 918:	0a c0       	rjmp	.+20     	; 0x92e <vfprintf+0x2ce>
 91a:	72 fc       	sbrc	r7, 2
 91c:	08 c0       	rjmp	.+16     	; 0x92e <vfprintf+0x2ce>
 91e:	37 2d       	mov	r19, r7
 920:	3e 7e       	andi	r19, 0xEE	; 238
 922:	05 c0       	rjmp	.+10     	; 0x92e <vfprintf+0x2ce>
 924:	ba 2c       	mov	r11, r10
 926:	37 2d       	mov	r19, r7
 928:	03 c0       	rjmp	.+6      	; 0x930 <vfprintf+0x2d0>
 92a:	ba 2c       	mov	r11, r10
 92c:	01 c0       	rjmp	.+2      	; 0x930 <vfprintf+0x2d0>
 92e:	b5 2c       	mov	r11, r5
 930:	34 ff       	sbrs	r19, 4
 932:	0d c0       	rjmp	.+26     	; 0x94e <vfprintf+0x2ee>
 934:	fe 01       	movw	r30, r28
 936:	ea 0d       	add	r30, r10
 938:	f1 1d       	adc	r31, r1
 93a:	80 81       	ld	r24, Z
 93c:	80 33       	cpi	r24, 0x30	; 48
 93e:	11 f4       	brne	.+4      	; 0x944 <vfprintf+0x2e4>
 940:	39 7e       	andi	r19, 0xE9	; 233
 942:	09 c0       	rjmp	.+18     	; 0x956 <vfprintf+0x2f6>
 944:	32 ff       	sbrs	r19, 2
 946:	06 c0       	rjmp	.+12     	; 0x954 <vfprintf+0x2f4>
 948:	b3 94       	inc	r11
 94a:	b3 94       	inc	r11
 94c:	04 c0       	rjmp	.+8      	; 0x956 <vfprintf+0x2f6>
 94e:	83 2f       	mov	r24, r19
 950:	86 78       	andi	r24, 0x86	; 134
 952:	09 f0       	breq	.+2      	; 0x956 <vfprintf+0x2f6>
 954:	b3 94       	inc	r11
 956:	33 fd       	sbrc	r19, 3
 958:	12 c0       	rjmp	.+36     	; 0x97e <vfprintf+0x31e>
 95a:	30 ff       	sbrs	r19, 0
 95c:	06 c0       	rjmp	.+12     	; 0x96a <vfprintf+0x30a>
 95e:	5a 2c       	mov	r5, r10
 960:	b3 14       	cp	r11, r3
 962:	18 f4       	brcc	.+6      	; 0x96a <vfprintf+0x30a>
 964:	53 0c       	add	r5, r3
 966:	5b 18       	sub	r5, r11
 968:	b3 2c       	mov	r11, r3
 96a:	b3 14       	cp	r11, r3
 96c:	60 f4       	brcc	.+24     	; 0x986 <vfprintf+0x326>
 96e:	b7 01       	movw	r22, r14
 970:	80 e2       	ldi	r24, 0x20	; 32
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	3c 87       	std	Y+12, r19	; 0x0c
 976:	c6 d1       	rcall	.+908    	; 0xd04 <fputc>
 978:	b3 94       	inc	r11
 97a:	3c 85       	ldd	r19, Y+12	; 0x0c
 97c:	f6 cf       	rjmp	.-20     	; 0x96a <vfprintf+0x30a>
 97e:	b3 14       	cp	r11, r3
 980:	10 f4       	brcc	.+4      	; 0x986 <vfprintf+0x326>
 982:	3b 18       	sub	r3, r11
 984:	01 c0       	rjmp	.+2      	; 0x988 <vfprintf+0x328>
 986:	31 2c       	mov	r3, r1
 988:	34 ff       	sbrs	r19, 4
 98a:	11 c0       	rjmp	.+34     	; 0x9ae <vfprintf+0x34e>
 98c:	b7 01       	movw	r22, r14
 98e:	80 e3       	ldi	r24, 0x30	; 48
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	3c 87       	std	Y+12, r19	; 0x0c
 994:	b7 d1       	rcall	.+878    	; 0xd04 <fputc>
 996:	3c 85       	ldd	r19, Y+12	; 0x0c
 998:	32 ff       	sbrs	r19, 2
 99a:	16 c0       	rjmp	.+44     	; 0x9c8 <vfprintf+0x368>
 99c:	31 fd       	sbrc	r19, 1
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <vfprintf+0x346>
 9a0:	88 e7       	ldi	r24, 0x78	; 120
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <vfprintf+0x34a>
 9a6:	88 e5       	ldi	r24, 0x58	; 88
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	b7 01       	movw	r22, r14
 9ac:	0c c0       	rjmp	.+24     	; 0x9c6 <vfprintf+0x366>
 9ae:	83 2f       	mov	r24, r19
 9b0:	86 78       	andi	r24, 0x86	; 134
 9b2:	51 f0       	breq	.+20     	; 0x9c8 <vfprintf+0x368>
 9b4:	31 ff       	sbrs	r19, 1
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0x35c>
 9b8:	8b e2       	ldi	r24, 0x2B	; 43
 9ba:	01 c0       	rjmp	.+2      	; 0x9be <vfprintf+0x35e>
 9bc:	80 e2       	ldi	r24, 0x20	; 32
 9be:	37 fd       	sbrc	r19, 7
 9c0:	8d e2       	ldi	r24, 0x2D	; 45
 9c2:	b7 01       	movw	r22, r14
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	9e d1       	rcall	.+828    	; 0xd04 <fputc>
 9c8:	a5 14       	cp	r10, r5
 9ca:	30 f4       	brcc	.+12     	; 0x9d8 <vfprintf+0x378>
 9cc:	b7 01       	movw	r22, r14
 9ce:	80 e3       	ldi	r24, 0x30	; 48
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	98 d1       	rcall	.+816    	; 0xd04 <fputc>
 9d4:	5a 94       	dec	r5
 9d6:	f8 cf       	rjmp	.-16     	; 0x9c8 <vfprintf+0x368>
 9d8:	aa 94       	dec	r10
 9da:	f4 01       	movw	r30, r8
 9dc:	ea 0d       	add	r30, r10
 9de:	f1 1d       	adc	r31, r1
 9e0:	80 81       	ld	r24, Z
 9e2:	b7 01       	movw	r22, r14
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	8e d1       	rcall	.+796    	; 0xd04 <fputc>
 9e8:	a1 10       	cpse	r10, r1
 9ea:	f6 cf       	rjmp	.-20     	; 0x9d8 <vfprintf+0x378>
 9ec:	33 20       	and	r3, r3
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <vfprintf+0x392>
 9f0:	5d ce       	rjmp	.-838    	; 0x6ac <vfprintf+0x4c>
 9f2:	b7 01       	movw	r22, r14
 9f4:	80 e2       	ldi	r24, 0x20	; 32
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	85 d1       	rcall	.+778    	; 0xd04 <fputc>
 9fa:	3a 94       	dec	r3
 9fc:	f7 cf       	rjmp	.-18     	; 0x9ec <vfprintf+0x38c>
 9fe:	f7 01       	movw	r30, r14
 a00:	86 81       	ldd	r24, Z+6	; 0x06
 a02:	97 81       	ldd	r25, Z+7	; 0x07
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <vfprintf+0x3aa>
 a06:	8f ef       	ldi	r24, 0xFF	; 255
 a08:	9f ef       	ldi	r25, 0xFF	; 255
 a0a:	2c 96       	adiw	r28, 0x0c	; 12
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	f8 94       	cli
 a10:	de bf       	out	0x3e, r29	; 62
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	cd bf       	out	0x3d, r28	; 61
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	ff 90       	pop	r15
 a20:	ef 90       	pop	r14
 a22:	df 90       	pop	r13
 a24:	cf 90       	pop	r12
 a26:	bf 90       	pop	r11
 a28:	af 90       	pop	r10
 a2a:	9f 90       	pop	r9
 a2c:	8f 90       	pop	r8
 a2e:	7f 90       	pop	r7
 a30:	6f 90       	pop	r6
 a32:	5f 90       	pop	r5
 a34:	4f 90       	pop	r4
 a36:	3f 90       	pop	r3
 a38:	2f 90       	pop	r2
 a3a:	08 95       	ret

00000a3c <calloc>:
 a3c:	0f 93       	push	r16
 a3e:	1f 93       	push	r17
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	86 9f       	mul	r24, r22
 a46:	80 01       	movw	r16, r0
 a48:	87 9f       	mul	r24, r23
 a4a:	10 0d       	add	r17, r0
 a4c:	96 9f       	mul	r25, r22
 a4e:	10 0d       	add	r17, r0
 a50:	11 24       	eor	r1, r1
 a52:	c8 01       	movw	r24, r16
 a54:	0d d0       	rcall	.+26     	; 0xa70 <malloc>
 a56:	ec 01       	movw	r28, r24
 a58:	00 97       	sbiw	r24, 0x00	; 0
 a5a:	21 f0       	breq	.+8      	; 0xa64 <calloc+0x28>
 a5c:	a8 01       	movw	r20, r16
 a5e:	60 e0       	ldi	r22, 0x00	; 0
 a60:	70 e0       	ldi	r23, 0x00	; 0
 a62:	3e d1       	rcall	.+636    	; 0xce0 <memset>
 a64:	ce 01       	movw	r24, r28
 a66:	df 91       	pop	r29
 a68:	cf 91       	pop	r28
 a6a:	1f 91       	pop	r17
 a6c:	0f 91       	pop	r16
 a6e:	08 95       	ret

00000a70 <malloc>:
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
 a74:	82 30       	cpi	r24, 0x02	; 2
 a76:	91 05       	cpc	r25, r1
 a78:	10 f4       	brcc	.+4      	; 0xa7e <malloc+0xe>
 a7a:	82 e0       	ldi	r24, 0x02	; 2
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	e0 91 55 01 	lds	r30, 0x0155
 a82:	f0 91 56 01 	lds	r31, 0x0156
 a86:	20 e0       	ldi	r18, 0x00	; 0
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	c0 e0       	ldi	r28, 0x00	; 0
 a8c:	d0 e0       	ldi	r29, 0x00	; 0
 a8e:	30 97       	sbiw	r30, 0x00	; 0
 a90:	11 f1       	breq	.+68     	; 0xad6 <malloc+0x66>
 a92:	40 81       	ld	r20, Z
 a94:	51 81       	ldd	r21, Z+1	; 0x01
 a96:	48 17       	cp	r20, r24
 a98:	59 07       	cpc	r21, r25
 a9a:	c0 f0       	brcs	.+48     	; 0xacc <malloc+0x5c>
 a9c:	48 17       	cp	r20, r24
 a9e:	59 07       	cpc	r21, r25
 aa0:	61 f4       	brne	.+24     	; 0xaba <malloc+0x4a>
 aa2:	82 81       	ldd	r24, Z+2	; 0x02
 aa4:	93 81       	ldd	r25, Z+3	; 0x03
 aa6:	20 97       	sbiw	r28, 0x00	; 0
 aa8:	19 f0       	breq	.+6      	; 0xab0 <malloc+0x40>
 aaa:	9b 83       	std	Y+3, r25	; 0x03
 aac:	8a 83       	std	Y+2, r24	; 0x02
 aae:	2b c0       	rjmp	.+86     	; 0xb06 <malloc+0x96>
 ab0:	90 93 56 01 	sts	0x0156, r25
 ab4:	80 93 55 01 	sts	0x0155, r24
 ab8:	26 c0       	rjmp	.+76     	; 0xb06 <malloc+0x96>
 aba:	21 15       	cp	r18, r1
 abc:	31 05       	cpc	r19, r1
 abe:	19 f0       	breq	.+6      	; 0xac6 <malloc+0x56>
 ac0:	42 17       	cp	r20, r18
 ac2:	53 07       	cpc	r21, r19
 ac4:	18 f4       	brcc	.+6      	; 0xacc <malloc+0x5c>
 ac6:	9a 01       	movw	r18, r20
 ac8:	be 01       	movw	r22, r28
 aca:	df 01       	movw	r26, r30
 acc:	ef 01       	movw	r28, r30
 ace:	02 80       	ldd	r0, Z+2	; 0x02
 ad0:	f3 81       	ldd	r31, Z+3	; 0x03
 ad2:	e0 2d       	mov	r30, r0
 ad4:	dc cf       	rjmp	.-72     	; 0xa8e <malloc+0x1e>
 ad6:	21 15       	cp	r18, r1
 ad8:	31 05       	cpc	r19, r1
 ada:	09 f1       	breq	.+66     	; 0xb1e <malloc+0xae>
 adc:	28 1b       	sub	r18, r24
 ade:	39 0b       	sbc	r19, r25
 ae0:	24 30       	cpi	r18, 0x04	; 4
 ae2:	31 05       	cpc	r19, r1
 ae4:	90 f4       	brcc	.+36     	; 0xb0a <malloc+0x9a>
 ae6:	12 96       	adiw	r26, 0x02	; 2
 ae8:	8d 91       	ld	r24, X+
 aea:	9c 91       	ld	r25, X
 aec:	13 97       	sbiw	r26, 0x03	; 3
 aee:	61 15       	cp	r22, r1
 af0:	71 05       	cpc	r23, r1
 af2:	21 f0       	breq	.+8      	; 0xafc <malloc+0x8c>
 af4:	fb 01       	movw	r30, r22
 af6:	93 83       	std	Z+3, r25	; 0x03
 af8:	82 83       	std	Z+2, r24	; 0x02
 afa:	04 c0       	rjmp	.+8      	; 0xb04 <malloc+0x94>
 afc:	90 93 56 01 	sts	0x0156, r25
 b00:	80 93 55 01 	sts	0x0155, r24
 b04:	fd 01       	movw	r30, r26
 b06:	32 96       	adiw	r30, 0x02	; 2
 b08:	44 c0       	rjmp	.+136    	; 0xb92 <malloc+0x122>
 b0a:	fd 01       	movw	r30, r26
 b0c:	e2 0f       	add	r30, r18
 b0e:	f3 1f       	adc	r31, r19
 b10:	81 93       	st	Z+, r24
 b12:	91 93       	st	Z+, r25
 b14:	22 50       	subi	r18, 0x02	; 2
 b16:	31 09       	sbc	r19, r1
 b18:	2d 93       	st	X+, r18
 b1a:	3c 93       	st	X, r19
 b1c:	3a c0       	rjmp	.+116    	; 0xb92 <malloc+0x122>
 b1e:	20 91 53 01 	lds	r18, 0x0153
 b22:	30 91 54 01 	lds	r19, 0x0154
 b26:	23 2b       	or	r18, r19
 b28:	41 f4       	brne	.+16     	; 0xb3a <malloc+0xca>
 b2a:	20 91 02 01 	lds	r18, 0x0102
 b2e:	30 91 03 01 	lds	r19, 0x0103
 b32:	30 93 54 01 	sts	0x0154, r19
 b36:	20 93 53 01 	sts	0x0153, r18
 b3a:	20 91 00 01 	lds	r18, 0x0100
 b3e:	30 91 01 01 	lds	r19, 0x0101
 b42:	21 15       	cp	r18, r1
 b44:	31 05       	cpc	r19, r1
 b46:	41 f4       	brne	.+16     	; 0xb58 <malloc+0xe8>
 b48:	2d b7       	in	r18, 0x3d	; 61
 b4a:	3e b7       	in	r19, 0x3e	; 62
 b4c:	40 91 04 01 	lds	r20, 0x0104
 b50:	50 91 05 01 	lds	r21, 0x0105
 b54:	24 1b       	sub	r18, r20
 b56:	35 0b       	sbc	r19, r21
 b58:	e0 91 53 01 	lds	r30, 0x0153
 b5c:	f0 91 54 01 	lds	r31, 0x0154
 b60:	e2 17       	cp	r30, r18
 b62:	f3 07       	cpc	r31, r19
 b64:	a0 f4       	brcc	.+40     	; 0xb8e <malloc+0x11e>
 b66:	2e 1b       	sub	r18, r30
 b68:	3f 0b       	sbc	r19, r31
 b6a:	28 17       	cp	r18, r24
 b6c:	39 07       	cpc	r19, r25
 b6e:	78 f0       	brcs	.+30     	; 0xb8e <malloc+0x11e>
 b70:	ac 01       	movw	r20, r24
 b72:	4e 5f       	subi	r20, 0xFE	; 254
 b74:	5f 4f       	sbci	r21, 0xFF	; 255
 b76:	24 17       	cp	r18, r20
 b78:	35 07       	cpc	r19, r21
 b7a:	48 f0       	brcs	.+18     	; 0xb8e <malloc+0x11e>
 b7c:	4e 0f       	add	r20, r30
 b7e:	5f 1f       	adc	r21, r31
 b80:	50 93 54 01 	sts	0x0154, r21
 b84:	40 93 53 01 	sts	0x0153, r20
 b88:	81 93       	st	Z+, r24
 b8a:	91 93       	st	Z+, r25
 b8c:	02 c0       	rjmp	.+4      	; 0xb92 <malloc+0x122>
 b8e:	e0 e0       	ldi	r30, 0x00	; 0
 b90:	f0 e0       	ldi	r31, 0x00	; 0
 b92:	cf 01       	movw	r24, r30
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	08 95       	ret

00000b9a <free>:
 b9a:	0f 93       	push	r16
 b9c:	1f 93       	push	r17
 b9e:	cf 93       	push	r28
 ba0:	df 93       	push	r29
 ba2:	00 97       	sbiw	r24, 0x00	; 0
 ba4:	09 f4       	brne	.+2      	; 0xba8 <free+0xe>
 ba6:	8c c0       	rjmp	.+280    	; 0xcc0 <free+0x126>
 ba8:	fc 01       	movw	r30, r24
 baa:	32 97       	sbiw	r30, 0x02	; 2
 bac:	13 82       	std	Z+3, r1	; 0x03
 bae:	12 82       	std	Z+2, r1	; 0x02
 bb0:	00 91 55 01 	lds	r16, 0x0155
 bb4:	10 91 56 01 	lds	r17, 0x0156
 bb8:	01 15       	cp	r16, r1
 bba:	11 05       	cpc	r17, r1
 bbc:	81 f4       	brne	.+32     	; 0xbde <free+0x44>
 bbe:	20 81       	ld	r18, Z
 bc0:	31 81       	ldd	r19, Z+1	; 0x01
 bc2:	82 0f       	add	r24, r18
 bc4:	93 1f       	adc	r25, r19
 bc6:	20 91 53 01 	lds	r18, 0x0153
 bca:	30 91 54 01 	lds	r19, 0x0154
 bce:	28 17       	cp	r18, r24
 bd0:	39 07       	cpc	r19, r25
 bd2:	79 f5       	brne	.+94     	; 0xc32 <free+0x98>
 bd4:	f0 93 54 01 	sts	0x0154, r31
 bd8:	e0 93 53 01 	sts	0x0153, r30
 bdc:	71 c0       	rjmp	.+226    	; 0xcc0 <free+0x126>
 bde:	d8 01       	movw	r26, r16
 be0:	40 e0       	ldi	r20, 0x00	; 0
 be2:	50 e0       	ldi	r21, 0x00	; 0
 be4:	ae 17       	cp	r26, r30
 be6:	bf 07       	cpc	r27, r31
 be8:	50 f4       	brcc	.+20     	; 0xbfe <free+0x64>
 bea:	12 96       	adiw	r26, 0x02	; 2
 bec:	2d 91       	ld	r18, X+
 bee:	3c 91       	ld	r19, X
 bf0:	13 97       	sbiw	r26, 0x03	; 3
 bf2:	ad 01       	movw	r20, r26
 bf4:	21 15       	cp	r18, r1
 bf6:	31 05       	cpc	r19, r1
 bf8:	09 f1       	breq	.+66     	; 0xc3c <free+0xa2>
 bfa:	d9 01       	movw	r26, r18
 bfc:	f3 cf       	rjmp	.-26     	; 0xbe4 <free+0x4a>
 bfe:	9d 01       	movw	r18, r26
 c00:	da 01       	movw	r26, r20
 c02:	33 83       	std	Z+3, r19	; 0x03
 c04:	22 83       	std	Z+2, r18	; 0x02
 c06:	60 81       	ld	r22, Z
 c08:	71 81       	ldd	r23, Z+1	; 0x01
 c0a:	86 0f       	add	r24, r22
 c0c:	97 1f       	adc	r25, r23
 c0e:	82 17       	cp	r24, r18
 c10:	93 07       	cpc	r25, r19
 c12:	69 f4       	brne	.+26     	; 0xc2e <free+0x94>
 c14:	ec 01       	movw	r28, r24
 c16:	28 81       	ld	r18, Y
 c18:	39 81       	ldd	r19, Y+1	; 0x01
 c1a:	26 0f       	add	r18, r22
 c1c:	37 1f       	adc	r19, r23
 c1e:	2e 5f       	subi	r18, 0xFE	; 254
 c20:	3f 4f       	sbci	r19, 0xFF	; 255
 c22:	31 83       	std	Z+1, r19	; 0x01
 c24:	20 83       	st	Z, r18
 c26:	8a 81       	ldd	r24, Y+2	; 0x02
 c28:	9b 81       	ldd	r25, Y+3	; 0x03
 c2a:	93 83       	std	Z+3, r25	; 0x03
 c2c:	82 83       	std	Z+2, r24	; 0x02
 c2e:	45 2b       	or	r20, r21
 c30:	29 f4       	brne	.+10     	; 0xc3c <free+0xa2>
 c32:	f0 93 56 01 	sts	0x0156, r31
 c36:	e0 93 55 01 	sts	0x0155, r30
 c3a:	42 c0       	rjmp	.+132    	; 0xcc0 <free+0x126>
 c3c:	13 96       	adiw	r26, 0x03	; 3
 c3e:	fc 93       	st	X, r31
 c40:	ee 93       	st	-X, r30
 c42:	12 97       	sbiw	r26, 0x02	; 2
 c44:	ed 01       	movw	r28, r26
 c46:	49 91       	ld	r20, Y+
 c48:	59 91       	ld	r21, Y+
 c4a:	9e 01       	movw	r18, r28
 c4c:	24 0f       	add	r18, r20
 c4e:	35 1f       	adc	r19, r21
 c50:	e2 17       	cp	r30, r18
 c52:	f3 07       	cpc	r31, r19
 c54:	71 f4       	brne	.+28     	; 0xc72 <free+0xd8>
 c56:	80 81       	ld	r24, Z
 c58:	91 81       	ldd	r25, Z+1	; 0x01
 c5a:	84 0f       	add	r24, r20
 c5c:	95 1f       	adc	r25, r21
 c5e:	02 96       	adiw	r24, 0x02	; 2
 c60:	11 96       	adiw	r26, 0x01	; 1
 c62:	9c 93       	st	X, r25
 c64:	8e 93       	st	-X, r24
 c66:	82 81       	ldd	r24, Z+2	; 0x02
 c68:	93 81       	ldd	r25, Z+3	; 0x03
 c6a:	13 96       	adiw	r26, 0x03	; 3
 c6c:	9c 93       	st	X, r25
 c6e:	8e 93       	st	-X, r24
 c70:	12 97       	sbiw	r26, 0x02	; 2
 c72:	e0 e0       	ldi	r30, 0x00	; 0
 c74:	f0 e0       	ldi	r31, 0x00	; 0
 c76:	d8 01       	movw	r26, r16
 c78:	12 96       	adiw	r26, 0x02	; 2
 c7a:	8d 91       	ld	r24, X+
 c7c:	9c 91       	ld	r25, X
 c7e:	13 97       	sbiw	r26, 0x03	; 3
 c80:	00 97       	sbiw	r24, 0x00	; 0
 c82:	19 f0       	breq	.+6      	; 0xc8a <free+0xf0>
 c84:	f8 01       	movw	r30, r16
 c86:	8c 01       	movw	r16, r24
 c88:	f6 cf       	rjmp	.-20     	; 0xc76 <free+0xdc>
 c8a:	8d 91       	ld	r24, X+
 c8c:	9c 91       	ld	r25, X
 c8e:	98 01       	movw	r18, r16
 c90:	2e 5f       	subi	r18, 0xFE	; 254
 c92:	3f 4f       	sbci	r19, 0xFF	; 255
 c94:	82 0f       	add	r24, r18
 c96:	93 1f       	adc	r25, r19
 c98:	20 91 53 01 	lds	r18, 0x0153
 c9c:	30 91 54 01 	lds	r19, 0x0154
 ca0:	28 17       	cp	r18, r24
 ca2:	39 07       	cpc	r19, r25
 ca4:	69 f4       	brne	.+26     	; 0xcc0 <free+0x126>
 ca6:	30 97       	sbiw	r30, 0x00	; 0
 ca8:	29 f4       	brne	.+10     	; 0xcb4 <free+0x11a>
 caa:	10 92 56 01 	sts	0x0156, r1
 cae:	10 92 55 01 	sts	0x0155, r1
 cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <free+0x11e>
 cb4:	13 82       	std	Z+3, r1	; 0x03
 cb6:	12 82       	std	Z+2, r1	; 0x02
 cb8:	10 93 54 01 	sts	0x0154, r17
 cbc:	00 93 53 01 	sts	0x0153, r16
 cc0:	df 91       	pop	r29
 cc2:	cf 91       	pop	r28
 cc4:	1f 91       	pop	r17
 cc6:	0f 91       	pop	r16
 cc8:	08 95       	ret

00000cca <strnlen_P>:
 cca:	fc 01       	movw	r30, r24
 ccc:	05 90       	lpm	r0, Z+
 cce:	61 50       	subi	r22, 0x01	; 1
 cd0:	70 40       	sbci	r23, 0x00	; 0
 cd2:	01 10       	cpse	r0, r1
 cd4:	d8 f7       	brcc	.-10     	; 0xccc <strnlen_P+0x2>
 cd6:	80 95       	com	r24
 cd8:	90 95       	com	r25
 cda:	8e 0f       	add	r24, r30
 cdc:	9f 1f       	adc	r25, r31
 cde:	08 95       	ret

00000ce0 <memset>:
 ce0:	dc 01       	movw	r26, r24
 ce2:	01 c0       	rjmp	.+2      	; 0xce6 <memset+0x6>
 ce4:	6d 93       	st	X+, r22
 ce6:	41 50       	subi	r20, 0x01	; 1
 ce8:	50 40       	sbci	r21, 0x00	; 0
 cea:	e0 f7       	brcc	.-8      	; 0xce4 <memset+0x4>
 cec:	08 95       	ret

00000cee <strnlen>:
 cee:	fc 01       	movw	r30, r24
 cf0:	61 50       	subi	r22, 0x01	; 1
 cf2:	70 40       	sbci	r23, 0x00	; 0
 cf4:	01 90       	ld	r0, Z+
 cf6:	01 10       	cpse	r0, r1
 cf8:	d8 f7       	brcc	.-10     	; 0xcf0 <strnlen+0x2>
 cfa:	80 95       	com	r24
 cfc:	90 95       	com	r25
 cfe:	8e 0f       	add	r24, r30
 d00:	9f 1f       	adc	r25, r31
 d02:	08 95       	ret

00000d04 <fputc>:
 d04:	0f 93       	push	r16
 d06:	1f 93       	push	r17
 d08:	cf 93       	push	r28
 d0a:	df 93       	push	r29
 d0c:	fb 01       	movw	r30, r22
 d0e:	23 81       	ldd	r18, Z+3	; 0x03
 d10:	21 fd       	sbrc	r18, 1
 d12:	03 c0       	rjmp	.+6      	; 0xd1a <fputc+0x16>
 d14:	8f ef       	ldi	r24, 0xFF	; 255
 d16:	9f ef       	ldi	r25, 0xFF	; 255
 d18:	28 c0       	rjmp	.+80     	; 0xd6a <fputc+0x66>
 d1a:	22 ff       	sbrs	r18, 2
 d1c:	16 c0       	rjmp	.+44     	; 0xd4a <fputc+0x46>
 d1e:	46 81       	ldd	r20, Z+6	; 0x06
 d20:	57 81       	ldd	r21, Z+7	; 0x07
 d22:	24 81       	ldd	r18, Z+4	; 0x04
 d24:	35 81       	ldd	r19, Z+5	; 0x05
 d26:	42 17       	cp	r20, r18
 d28:	53 07       	cpc	r21, r19
 d2a:	44 f4       	brge	.+16     	; 0xd3c <fputc+0x38>
 d2c:	a0 81       	ld	r26, Z
 d2e:	b1 81       	ldd	r27, Z+1	; 0x01
 d30:	9d 01       	movw	r18, r26
 d32:	2f 5f       	subi	r18, 0xFF	; 255
 d34:	3f 4f       	sbci	r19, 0xFF	; 255
 d36:	31 83       	std	Z+1, r19	; 0x01
 d38:	20 83       	st	Z, r18
 d3a:	8c 93       	st	X, r24
 d3c:	26 81       	ldd	r18, Z+6	; 0x06
 d3e:	37 81       	ldd	r19, Z+7	; 0x07
 d40:	2f 5f       	subi	r18, 0xFF	; 255
 d42:	3f 4f       	sbci	r19, 0xFF	; 255
 d44:	37 83       	std	Z+7, r19	; 0x07
 d46:	26 83       	std	Z+6, r18	; 0x06
 d48:	10 c0       	rjmp	.+32     	; 0xd6a <fputc+0x66>
 d4a:	eb 01       	movw	r28, r22
 d4c:	09 2f       	mov	r16, r25
 d4e:	18 2f       	mov	r17, r24
 d50:	00 84       	ldd	r0, Z+8	; 0x08
 d52:	f1 85       	ldd	r31, Z+9	; 0x09
 d54:	e0 2d       	mov	r30, r0
 d56:	09 95       	icall
 d58:	89 2b       	or	r24, r25
 d5a:	e1 f6       	brne	.-72     	; 0xd14 <fputc+0x10>
 d5c:	8e 81       	ldd	r24, Y+6	; 0x06
 d5e:	9f 81       	ldd	r25, Y+7	; 0x07
 d60:	01 96       	adiw	r24, 0x01	; 1
 d62:	9f 83       	std	Y+7, r25	; 0x07
 d64:	8e 83       	std	Y+6, r24	; 0x06
 d66:	81 2f       	mov	r24, r17
 d68:	90 2f       	mov	r25, r16
 d6a:	df 91       	pop	r29
 d6c:	cf 91       	pop	r28
 d6e:	1f 91       	pop	r17
 d70:	0f 91       	pop	r16
 d72:	08 95       	ret

00000d74 <__ultoa_invert>:
 d74:	fa 01       	movw	r30, r20
 d76:	aa 27       	eor	r26, r26
 d78:	28 30       	cpi	r18, 0x08	; 8
 d7a:	51 f1       	breq	.+84     	; 0xdd0 <__ultoa_invert+0x5c>
 d7c:	20 31       	cpi	r18, 0x10	; 16
 d7e:	81 f1       	breq	.+96     	; 0xde0 <__ultoa_invert+0x6c>
 d80:	e8 94       	clt
 d82:	6f 93       	push	r22
 d84:	6e 7f       	andi	r22, 0xFE	; 254
 d86:	6e 5f       	subi	r22, 0xFE	; 254
 d88:	7f 4f       	sbci	r23, 0xFF	; 255
 d8a:	8f 4f       	sbci	r24, 0xFF	; 255
 d8c:	9f 4f       	sbci	r25, 0xFF	; 255
 d8e:	af 4f       	sbci	r26, 0xFF	; 255
 d90:	b1 e0       	ldi	r27, 0x01	; 1
 d92:	3e d0       	rcall	.+124    	; 0xe10 <__ultoa_invert+0x9c>
 d94:	b4 e0       	ldi	r27, 0x04	; 4
 d96:	3c d0       	rcall	.+120    	; 0xe10 <__ultoa_invert+0x9c>
 d98:	67 0f       	add	r22, r23
 d9a:	78 1f       	adc	r23, r24
 d9c:	89 1f       	adc	r24, r25
 d9e:	9a 1f       	adc	r25, r26
 da0:	a1 1d       	adc	r26, r1
 da2:	68 0f       	add	r22, r24
 da4:	79 1f       	adc	r23, r25
 da6:	8a 1f       	adc	r24, r26
 da8:	91 1d       	adc	r25, r1
 daa:	a1 1d       	adc	r26, r1
 dac:	6a 0f       	add	r22, r26
 dae:	71 1d       	adc	r23, r1
 db0:	81 1d       	adc	r24, r1
 db2:	91 1d       	adc	r25, r1
 db4:	a1 1d       	adc	r26, r1
 db6:	20 d0       	rcall	.+64     	; 0xdf8 <__ultoa_invert+0x84>
 db8:	09 f4       	brne	.+2      	; 0xdbc <__ultoa_invert+0x48>
 dba:	68 94       	set
 dbc:	3f 91       	pop	r19
 dbe:	2a e0       	ldi	r18, 0x0A	; 10
 dc0:	26 9f       	mul	r18, r22
 dc2:	11 24       	eor	r1, r1
 dc4:	30 19       	sub	r19, r0
 dc6:	30 5d       	subi	r19, 0xD0	; 208
 dc8:	31 93       	st	Z+, r19
 dca:	de f6       	brtc	.-74     	; 0xd82 <__ultoa_invert+0xe>
 dcc:	cf 01       	movw	r24, r30
 dce:	08 95       	ret
 dd0:	46 2f       	mov	r20, r22
 dd2:	47 70       	andi	r20, 0x07	; 7
 dd4:	40 5d       	subi	r20, 0xD0	; 208
 dd6:	41 93       	st	Z+, r20
 dd8:	b3 e0       	ldi	r27, 0x03	; 3
 dda:	0f d0       	rcall	.+30     	; 0xdfa <__ultoa_invert+0x86>
 ddc:	c9 f7       	brne	.-14     	; 0xdd0 <__ultoa_invert+0x5c>
 dde:	f6 cf       	rjmp	.-20     	; 0xdcc <__ultoa_invert+0x58>
 de0:	46 2f       	mov	r20, r22
 de2:	4f 70       	andi	r20, 0x0F	; 15
 de4:	40 5d       	subi	r20, 0xD0	; 208
 de6:	4a 33       	cpi	r20, 0x3A	; 58
 de8:	18 f0       	brcs	.+6      	; 0xdf0 <__ultoa_invert+0x7c>
 dea:	49 5d       	subi	r20, 0xD9	; 217
 dec:	31 fd       	sbrc	r19, 1
 dee:	40 52       	subi	r20, 0x20	; 32
 df0:	41 93       	st	Z+, r20
 df2:	02 d0       	rcall	.+4      	; 0xdf8 <__ultoa_invert+0x84>
 df4:	a9 f7       	brne	.-22     	; 0xde0 <__ultoa_invert+0x6c>
 df6:	ea cf       	rjmp	.-44     	; 0xdcc <__ultoa_invert+0x58>
 df8:	b4 e0       	ldi	r27, 0x04	; 4
 dfa:	a6 95       	lsr	r26
 dfc:	97 95       	ror	r25
 dfe:	87 95       	ror	r24
 e00:	77 95       	ror	r23
 e02:	67 95       	ror	r22
 e04:	ba 95       	dec	r27
 e06:	c9 f7       	brne	.-14     	; 0xdfa <__ultoa_invert+0x86>
 e08:	00 97       	sbiw	r24, 0x00	; 0
 e0a:	61 05       	cpc	r22, r1
 e0c:	71 05       	cpc	r23, r1
 e0e:	08 95       	ret
 e10:	9b 01       	movw	r18, r22
 e12:	ac 01       	movw	r20, r24
 e14:	0a 2e       	mov	r0, r26
 e16:	06 94       	lsr	r0
 e18:	57 95       	ror	r21
 e1a:	47 95       	ror	r20
 e1c:	37 95       	ror	r19
 e1e:	27 95       	ror	r18
 e20:	ba 95       	dec	r27
 e22:	c9 f7       	brne	.-14     	; 0xe16 <__ultoa_invert+0xa2>
 e24:	62 0f       	add	r22, r18
 e26:	73 1f       	adc	r23, r19
 e28:	84 1f       	adc	r24, r20
 e2a:	95 1f       	adc	r25, r21
 e2c:	a0 1d       	adc	r26, r0
 e2e:	08 95       	ret

00000e30 <_exit>:
 e30:	f8 94       	cli

00000e32 <__stop_program>:
 e32:	ff cf       	rjmp	.-2      	; 0xe32 <__stop_program>
