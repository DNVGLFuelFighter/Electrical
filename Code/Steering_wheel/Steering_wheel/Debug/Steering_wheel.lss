
Steering_wheel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000f3c  00000fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  00800124  00800124  00000ff4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e0e  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087c  00000000  00000000  00001ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7e  00000000  00000000  0000287a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  000034f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038f  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077f  00000000  00000000  00003b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000431e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ba c2       	rjmp	.+1396   	; 0x5b2 <__vector_15>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	0b c2       	rjmp	.+1046   	; 0x45c <__vector_17>
  46:	00 00       	nop
  48:	87 c0       	rjmp	.+270    	; 0x158 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ec e3       	ldi	r30, 0x3C	; 60
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a4 32       	cpi	r26, 0x24	; 36
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a4 e2       	ldi	r26, 0x24	; 36
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a3 37       	cpi	r26, 0x73	; 115
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	6b d1       	rcall	.+726    	; 0x3a2 <main>
  cc:	35 c7       	rjmp	.+3690   	; 0xf38 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_init>:
 *  Author: Vilius
 */ 
#include "adc.h"

void adc_init( void) {
	clear_bit(DDRF, DDF0);
  d0:	80 98       	cbi	0x10, 0	; 16
	/* Voltage ref AVcc with external capacitor on AREF pin */
	set_bit(ADMUX, REFS0);
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	/* Select prescaler to 64 --> conversion f= 125kHz */
	set_bit(ADCSRA, ADPS2);
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
	/* Enable the ADC */
	set_bit(ADCSRA, ADEN);
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <adc_sleep>:
	//set_bit(ADCSRA, ADIE);
}

void adc_sleep( void) {
	/* Wait for the conversion to complete */
	while(test_bit(ADCSRA, ADSC));
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	86 fd       	sbrc	r24, 6
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <adc_sleep+0x4>
	/* Turn off the ADC */
	clear_bit(ADCSRA, ADEN);
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8f 77       	andi	r24, 0x7F	; 127
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <adc_input>:
}

void adc_input( int chan, CAN_packet* p) {
 10a:	9c 01       	movw	r18, r24
	/*Select the reference channel. 1 = speed, 2 = acc */
	if(chan == 1)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	29 f4       	brne	.+10     	; 0x11c <adc_input+0x12>
		ADMUX |= 0x00;
 112:	ec e7       	ldi	r30, 0x7C	; 124
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 83       	st	Z, r24
 11a:	07 c0       	rjmp	.+14     	; 0x12a <adc_input+0x20>
	else if (chan == 2)
 11c:	02 97       	sbiw	r24, 0x02	; 2
 11e:	29 f4       	brne	.+10     	; 0x12a <adc_input+0x20>
		ADMUX |= 0x01;
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
	/* Start the conversion */
	set_bit(ADCSRA, ADSC);
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	90 64       	ori	r25, 0x40	; 64
 132:	90 83       	st	Z, r25
	/* Wait for the conversion to complete */
	while(test_bit(ADCSRA, ADSC));
 134:	90 81       	ld	r25, Z
 136:	96 fd       	sbrc	r25, 6
 138:	fd cf       	rjmp	.-6      	; 0x134 <adc_input+0x2a>
	
	unsigned int full_value = 0;
	full_value = ADC;
 13a:	80 91 78 00 	lds	r24, 0x0078
 13e:	90 91 79 00 	lds	r25, 0x0079
// 	p->data[3] = (int)floor(temp_val);
// 	p->data[4] = (int)floor(temp_val);
// 	p->data[5] = (int)floor(temp_val);
// 	if(value_over_half)
// 		p->data[3] = (int)ceil(temp_val);
	p->data[chan] = (full_value);
 142:	fb 01       	movw	r30, r22
 144:	e2 0f       	add	r30, r18
 146:	f3 1f       	adc	r31, r19
 148:	8f 3f       	cpi	r24, 0xFF	; 255
 14a:	91 05       	cpc	r25, r1
 14c:	19 f0       	breq	.+6      	; 0x154 <adc_input+0x4a>
 14e:	10 f0       	brcs	.+4      	; 0x154 <adc_input+0x4a>
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	83 83       	std	Z+3, r24	; 0x03
 156:	08 95       	ret

00000158 <__vector_18>:
		}
	CANGCON |= 0x02;
	CANGIE=(1<<ENIT) | (1<< ENRX);
}
	
void can_health(void) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	0b b6       	in	r0, 0x3b	; 59
 164:	0f 92       	push	r0
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	cf 93       	push	r28
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
 180:	ed ee       	ldi	r30, 0xED	; 237
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	c0 81       	ld	r28, Z
 186:	80 91 ec 00 	lds	r24, 0x00EC
 18a:	68 2f       	mov	r22, r24
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	80 83       	st	Z, r24
 192:	72 95       	swap	r23
 194:	62 95       	swap	r22
 196:	6f 70       	andi	r22, 0x0F	; 15
 198:	67 27       	eor	r22, r23
 19a:	7f 70       	andi	r23, 0x0F	; 15
 19c:	67 27       	eor	r22, r23
 19e:	80 91 ee 00 	lds	r24, 0x00EE
 1a2:	8f 75       	andi	r24, 0x5F	; 95
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <__vector_18+0x50>
 1a6:	98 95       	break
 1a8:	20 91 f2 00 	lds	r18, 0x00F2
 1ac:	80 91 f3 00 	lds	r24, 0x00F3
 1b0:	e4 e2       	ldi	r30, 0x24	; 36
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	22 95       	swap	r18
 1c4:	26 95       	lsr	r18
 1c6:	27 70       	andi	r18, 0x07	; 7
 1c8:	82 2b       	or	r24, r18
 1ca:	91 83       	std	Z+1, r25	; 0x01
 1cc:	80 83       	st	Z, r24
 1ce:	80 91 ef 00 	lds	r24, 0x00EF
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	82 83       	std	Z+2, r24	; 0x02
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	59 f0       	breq	.+22     	; 0x1f2 <__vector_18+0x9a>
 1dc:	e7 e2       	ldi	r30, 0x27	; 39
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	89 5d       	subi	r24, 0xD9	; 217
 1e2:	9e 4f       	sbci	r25, 0xFE	; 254
 1e4:	aa ef       	ldi	r26, 0xFA	; 250
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	2c 91       	ld	r18, X
 1ea:	21 93       	st	Z+, r18
 1ec:	e8 17       	cp	r30, r24
 1ee:	f9 07       	cpc	r31, r25
 1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__vector_18+0x90>
 1f2:	10 92 ee 00 	sts	0x00EE, r1
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	80 93 ef 00 	sts	0x00EF, r24
 1fc:	fb 01       	movw	r30, r22
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e1 5d       	subi	r30, 0xD1	; 209
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	01 90       	ld	r0, Z+
 208:	f0 81       	ld	r31, Z
 20a:	e0 2d       	mov	r30, r0
 20c:	84 e2       	ldi	r24, 0x24	; 36
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	09 95       	icall
 212:	c0 93 ed 00 	sts	0x00ED, r28
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	cf 91       	pop	r28
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0b be       	out	0x3b, r0	; 59
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <can_tx>:
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	fb 01       	movw	r30, r22
 244:	20 81       	ld	r18, Z
 246:	31 81       	ldd	r19, Z+1	; 0x01
 248:	21 15       	cp	r18, r1
 24a:	38 40       	sbci	r19, 0x08	; 8
 24c:	08 f0       	brcs	.+2      	; 0x250 <can_tx+0x12>
 24e:	98 95       	break
 250:	92 81       	ldd	r25, Z+2	; 0x02
 252:	99 30       	cpi	r25, 0x09	; 9
 254:	08 f0       	brcs	.+2      	; 0x258 <can_tx+0x1a>
 256:	98 95       	break
 258:	8f 30       	cpi	r24, 0x0F	; 15
 25a:	08 f0       	brcs	.+2      	; 0x25e <can_tx+0x20>
 25c:	98 95       	break
 25e:	82 95       	swap	r24
 260:	80 7f       	andi	r24, 0xF0	; 240
 262:	80 93 ed 00 	sts	0x00ED, r24
 266:	80 91 ef 00 	lds	r24, 0x00EF
 26a:	80 7c       	andi	r24, 0xC0	; 192
 26c:	21 f0       	breq	.+8      	; 0x276 <can_tx+0x38>
 26e:	80 91 ee 00 	lds	r24, 0x00EE
 272:	86 ff       	sbrs	r24, 6
 274:	55 c0       	rjmp	.+170    	; 0x320 <can_tx+0xe2>
 276:	10 92 ee 00 	sts	0x00EE, r1
 27a:	10 92 ef 00 	sts	0x00EF, r1
 27e:	82 81       	ldd	r24, Z+2	; 0x02
 280:	8f 3f       	cpi	r24, 0xFF	; 255
 282:	61 f1       	breq	.+88     	; 0x2dc <can_tx+0x9e>
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	80 93 f3 00 	sts	0x00F3, r24
 298:	80 81       	ld	r24, Z
 29a:	82 95       	swap	r24
 29c:	88 0f       	add	r24, r24
 29e:	80 7e       	andi	r24, 0xE0	; 224
 2a0:	80 93 f2 00 	sts	0x00F2, r24
 2a4:	10 92 f1 00 	sts	0x00F1, r1
 2a8:	10 92 f0 00 	sts	0x00F0, r1
 2ac:	22 81       	ldd	r18, Z+2	; 0x02
 2ae:	22 23       	and	r18, r18
 2b0:	79 f0       	breq	.+30     	; 0x2d0 <can_tx+0x92>
 2b2:	df 01       	movw	r26, r30
 2b4:	13 96       	adiw	r26, 0x03	; 3
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	ca ef       	ldi	r28, 0xFA	; 250
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
 2be:	2d 91       	ld	r18, X+
 2c0:	28 83       	st	Y, r18
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	22 81       	ldd	r18, Z+2	; 0x02
 2c6:	42 2f       	mov	r20, r18
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	84 17       	cp	r24, r20
 2cc:	95 07       	cpc	r25, r21
 2ce:	b8 f3       	brcs	.-18     	; 0x2be <can_tx+0x80>
 2d0:	ef ee       	ldi	r30, 0xEF	; 239
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	28 2b       	or	r18, r24
 2d8:	20 83       	st	Z, r18
 2da:	1b c0       	rjmp	.+54     	; 0x312 <can_tx+0xd4>
 2dc:	80 81       	ld	r24, Z
 2de:	91 81       	ldd	r25, Z+1	; 0x01
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	96 95       	lsr	r25
 2e6:	87 95       	ror	r24
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
 2ec:	80 93 f3 00 	sts	0x00F3, r24
 2f0:	80 81       	ld	r24, Z
 2f2:	82 95       	swap	r24
 2f4:	88 0f       	add	r24, r24
 2f6:	80 7e       	andi	r24, 0xE0	; 224
 2f8:	80 93 f2 00 	sts	0x00F2, r24
 2fc:	10 92 f1 00 	sts	0x00F1, r1
 300:	84 e0       	ldi	r24, 0x04	; 4
 302:	80 93 f0 00 	sts	0x00F0, r24
 306:	af ee       	ldi	r26, 0xEF	; 239
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	9c 91       	ld	r25, X
 30c:	82 81       	ldd	r24, Z+2	; 0x02
 30e:	89 2b       	or	r24, r25
 310:	8c 93       	st	X, r24
 312:	ef ee       	ldi	r30, 0xEF	; 239
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	80 64       	ori	r24, 0x40	; 64
 31a:	80 83       	st	Z, r24
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	01 c0       	rjmp	.+2      	; 0x322 <can_tx+0xe4>
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <can_init>:
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	86 e0       	ldi	r24, 0x06	; 6
 32e:	80 93 e2 00 	sts	0x00E2, r24
 332:	8c e0       	ldi	r24, 0x0C	; 12
 334:	80 93 e3 00 	sts	0x00E3, r24
 338:	8a e5       	ldi	r24, 0x5A	; 90
 33a:	80 93 e4 00 	sts	0x00E4, r24
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	cd ee       	ldi	r28, 0xED	; 237
 342:	d0 e0       	ldi	r29, 0x00	; 0
 344:	ae ee       	ldi	r26, 0xEE	; 238
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	ef ee       	ldi	r30, 0xEF	; 239
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	98 2f       	mov	r25, r24
 34e:	92 95       	swap	r25
 350:	90 7f       	andi	r25, 0xF0	; 240
 352:	98 83       	st	Y, r25
 354:	1c 92       	st	X, r1
 356:	10 82       	st	Z, r1
 358:	8f 5f       	subi	r24, 0xFF	; 255
 35a:	8f 30       	cpi	r24, 0x0F	; 15
 35c:	b9 f7       	brne	.-18     	; 0x34c <can_init+0x24>
 35e:	e8 ed       	ldi	r30, 0xD8	; 216
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	82 60       	ori	r24, 0x02	; 2
 366:	80 83       	st	Z, r24
 368:	80 ea       	ldi	r24, 0xA0	; 160
 36a:	80 93 db 00 	sts	0x00DB, r24
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <can_packet_send>:
	*/
}

BOOL can_packet_send(char mob, CAN_packet *packet) {
	/* Clear global interrupts */
	cli();
 374:	f8 94       	cli
	BOOL result = can_tx(mob, packet);
 376:	63 df       	rcall	.-314    	; 0x23e <can_tx>
	/* Set global interrupts */
	sei();
 378:	78 94       	sei
	return result;
}
 37a:	08 95       	ret

0000037c <inits>:
#include <stdio.h>
#include "timer1.h"
#include "timer0.h"

void inits( void) {
	can_init();
 37c:	d5 df       	rcall	.-86     	; 0x328 <can_init>
	USART_init(MYUBRR, true);
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	83 e3       	ldi	r24, 0x33	; 51
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	7d d1       	rcall	.+762    	; 0x680 <USART_init>
	sw_init();
 386:	10 d0       	rcall	.+32     	; 0x3a8 <sw_init>
	adc_init();
 388:	a3 de       	rcall	.-698    	; 0xd0 <adc_init>
	timer1_init();
 38a:	f8 d0       	rcall	.+496    	; 0x57c <timer1_init>
	timer0_init();
 38c:	44 d0       	rcall	.+136    	; 0x416 <timer0_init>
	printf("\r\nSteering wheel initialized");
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	d5 d1       	rcall	.+938    	; 0x742 <printf>
	sei();
 398:	78 94       	sei
	/* I'm alive LED */
	set_bit(DDRB, PB6);
 39a:	26 9a       	sbi	0x04, 6	; 4
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	08 95       	ret

000003a2 <main>:
}

int main(void)
{
	/* Initialize module */
	inits();
 3a2:	ec df       	rcall	.-40     	; 0x37c <inits>

    for(;;) {
		asm("sleep");;
 3a4:	88 95       	sleep
	}
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <main+0x2>

000003a8 <sw_init>:
#include "steering_wheel.h"

void sw_init( void) {	
	/* Indicators init */
	/* Set PE4 and PD0 as inputs */
	clear_bit(DDRD, DDD0);
 3a8:	50 98       	cbi	0x0a, 0	; 10
	clear_bit(DDRE, DDE4);
 3aa:	6c 98       	cbi	0x0d, 4	; 13
	/* Set PE4 and PD0 as high (pull up res) */
	set_bit(PORTD, PD0);
 3ac:	58 9a       	sbi	0x0b, 0	; 11
	set_bit(PORTE, PE4);	
 3ae:	74 9a       	sbi	0x0e, 4	; 14
	
	/* Wipers init */
	clear_bit(DDRE, DDE5);
 3b0:	6d 98       	cbi	0x0d, 5	; 13
	set_bit(PORTE, PE5);
 3b2:	75 9a       	sbi	0x0e, 5	; 14
	
	/* Horn init */
	clear_bit(DDRB, DDB0);
 3b4:	20 98       	cbi	0x04, 0	; 4
	set_bit(PORTB, PB0);
 3b6:	28 9a       	sbi	0x05, 0	; 5
	
	/* Deadman */
	clear_bit(DDRB, DDB4);
 3b8:	24 98       	cbi	0x04, 4	; 4
	set_bit(PORTB, PB4);
 3ba:	2c 9a       	sbi	0x05, 4	; 5
	
	/* Speed potentiometer uses adc_init() */
	
	/* Cruise control */
	clear_bit(DDRB, DDB2);
 3bc:	22 98       	cbi	0x04, 2	; 4
	clear_bit(DDRB, DDB1);
 3be:	21 98       	cbi	0x04, 1	; 4
	set_bit(PORTB, PB2);
 3c0:	2a 9a       	sbi	0x05, 2	; 5
	set_bit(PORTB, PB1);	
 3c2:	29 9a       	sbi	0x05, 1	; 5
 3c4:	08 95       	ret

000003c6 <sw_input>:
}

void sw_input( CAN_packet* p) {	
 3c6:	fc 01       	movw	r30, r24
	/* Initialize data */
	p->data[0] = 0;
 3c8:	13 82       	std	Z+3, r1	; 0x03
	p->data[1] = 0;
 3ca:	14 82       	std	Z+4, r1	; 0x04
	p->data[2] = 0;
 3cc:	15 82       	std	Z+5, r1	; 0x05
	/* Read right/left indicator */
	if(!test_bit(PIND, PD0))
 3ce:	48 99       	sbic	0x09, 0	; 9
 3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <sw_input+0x12>
		p->data[0] |= (1<<0);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	83 83       	std	Z+3, r24	; 0x03
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <sw_input+0x1a>
	else if (!test_bit(PINE, PE4))
 3d8:	64 99       	sbic	0x0c, 4	; 12
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <sw_input+0x1a>
		p->data[0] |= (1<<1);
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	83 83       	std	Z+3, r24	; 0x03
	/* Read cruise control */
	if(!test_bit(PINB, PB2)) // CC plus
 3e0:	1a 99       	sbic	0x03, 2	; 3
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <sw_input+0x26>
		p->data[0] |= (1<<2);
 3e4:	83 81       	ldd	r24, Z+3	; 0x03
 3e6:	84 60       	ori	r24, 0x04	; 4
 3e8:	83 83       	std	Z+3, r24	; 0x03
 3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <sw_input+0x30>
	else if(!test_bit(PINB, PB1)) // CC minus
 3ec:	19 99       	sbic	0x03, 1	; 3
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <sw_input+0x30>
		p->data[0] |= (1<<3);	
 3f0:	83 81       	ldd	r24, Z+3	; 0x03
 3f2:	88 60       	ori	r24, 0x08	; 8
 3f4:	83 83       	std	Z+3, r24	; 0x03
	/* Read horn */
	if (!test_bit(PINB, PB0))
 3f6:	18 99       	sbic	0x03, 0	; 3
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <sw_input+0x3a>
		p->data[0] |= (1<<4);
 3fa:	83 81       	ldd	r24, Z+3	; 0x03
 3fc:	80 61       	ori	r24, 0x10	; 16
 3fe:	83 83       	std	Z+3, r24	; 0x03
	/* Read whiper */
	if (!test_bit(PINE, PE5))
 400:	65 99       	sbic	0x0c, 5	; 12
 402:	03 c0       	rjmp	.+6      	; 0x40a <sw_input+0x44>
		p->data[0] |= (1<<5);
 404:	83 81       	ldd	r24, Z+3	; 0x03
 406:	80 62       	ori	r24, 0x20	; 32
 408:	83 83       	std	Z+3, r24	; 0x03
	/* Read CC deadman */
	if (!test_bit(PINB, PB4))
 40a:	1c 99       	sbic	0x03, 4	; 3
 40c:	03 c0       	rjmp	.+6      	; 0x414 <sw_input+0x4e>
		p->data[0] |= (1<<6);
 40e:	83 81       	ldd	r24, Z+3	; 0x03
 410:	80 64       	ori	r24, 0x40	; 64
 412:	83 83       	std	Z+3, r24	; 0x03
 414:	08 95       	ret

00000416 <timer0_init>:
CAN_packet updated_msg;


void timer0_init( void) {
	/* clk/1024 */
	set_bit(TCCR0A, CS02);
 416:	84 b5       	in	r24, 0x24	; 36
 418:	84 60       	ori	r24, 0x04	; 4
 41a:	84 bd       	out	0x24, r24	; 36
	set_bit(TCCR0A, CS00);
 41c:	84 b5       	in	r24, 0x24	; 36
 41e:	81 60       	ori	r24, 0x01	; 1
 420:	84 bd       	out	0x24, r24	; 36
	/* Enable timer overflow */
	set_bit(TIMSK0, TOIE0);
 422:	ee e6       	ldi	r30, 0x6E	; 110
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	80 83       	st	Z, r24
	
	current_msg.id = ID_steeringWheel;
 42c:	ee e5       	ldi	r30, 0x5E	; 94
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	2d e0       	ldi	r18, 0x0D	; 13
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	31 83       	std	Z+1, r19	; 0x01
 436:	20 83       	st	Z, r18
	current_msg.length = 3;
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	82 83       	std	Z+2, r24	; 0x02
	current_msg.data[0] = 0;
 43c:	13 82       	std	Z+3, r1	; 0x03
	current_msg.data[1] = 0;
 43e:	14 82       	std	Z+4, r1	; 0x04
	current_msg.data[2] = 0;
 440:	15 82       	std	Z+5, r1	; 0x05
	updated_msg.id = ID_steeringWheel;
 442:	e3 e5       	ldi	r30, 0x53	; 83
 444:	f1 e0       	ldi	r31, 0x01	; 1
 446:	31 83       	std	Z+1, r19	; 0x01
 448:	20 83       	st	Z, r18
	updated_msg.length = 3;
 44a:	82 83       	std	Z+2, r24	; 0x02
	updated_msg.data[0] = 0;
 44c:	13 82       	std	Z+3, r1	; 0x03
	updated_msg.data[1] = 0;
 44e:	14 82       	std	Z+4, r1	; 0x04
	current_msg.data[2] = 0;
	ret = FALSE;
 450:	10 92 52 01 	sts	0x0152, r1
	turned = TRUE;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	80 93 51 01 	sts	0x0151, r24
 45a:	08 95       	ret

0000045c <__vector_17>:
}

ISR(TIMER0_OVF_vect) {
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	0b b6       	in	r0, 0x3b	; 59
 468:	0f 92       	push	r0
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	4f 93       	push	r20
 470:	5f 93       	push	r21
 472:	6f 93       	push	r22
 474:	7f 93       	push	r23
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	af 93       	push	r26
 47c:	bf 93       	push	r27
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
	/* Update one CAN_packet */
	cli();
 482:	f8 94       	cli
	sw_input(&updated_msg);	
 484:	83 e5       	ldi	r24, 0x53	; 83
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	9e df       	rcall	.-196    	; 0x3c6 <sw_input>
	adc_init();
 48a:	22 de       	rcall	.-956    	; 0xd0 <adc_init>
	adc_input(1, &updated_msg);
 48c:	63 e5       	ldi	r22, 0x53	; 83
 48e:	71 e0       	ldi	r23, 0x01	; 1
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	3a de       	rcall	.-908    	; 0x10a <adc_input>
	//adc_input(2, &updated_msg);
	adc_sleep();
 496:	2e de       	rcall	.-932    	; 0xf4 <adc_sleep>
	if(((test_bit(updated_msg.data[0], 0)) || (test_bit(updated_msg.data[0], 1))) && (updated_msg.data[2] > 30) && !turned)
 498:	80 91 56 01 	lds	r24, 0x0156
 49c:	98 2f       	mov	r25, r24
 49e:	93 70       	andi	r25, 0x03	; 3
 4a0:	61 f0       	breq	.+24     	; 0x4ba <__vector_17+0x5e>
 4a2:	90 91 58 01 	lds	r25, 0x0158
 4a6:	9f 31       	cpi	r25, 0x1F	; 31
 4a8:	40 f0       	brcs	.+16     	; 0x4ba <__vector_17+0x5e>
 4aa:	90 91 51 01 	lds	r25, 0x0151
 4ae:	91 11       	cpse	r25, r1
 4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__vector_17+0x66>
		turned = TRUE;
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	90 93 51 01 	sts	0x0151, r25
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <__vector_17+0x66>
	if(turned && (updated_msg.data[2] < 10)) {
 4ba:	90 91 51 01 	lds	r25, 0x0151
 4be:	99 23       	and	r25, r25
 4c0:	49 f0       	breq	.+18     	; 0x4d4 <__vector_17+0x78>
 4c2:	90 91 58 01 	lds	r25, 0x0158
 4c6:	9a 30       	cpi	r25, 0x0A	; 10
 4c8:	28 f4       	brcc	.+10     	; 0x4d4 <__vector_17+0x78>
		turned = FALSE;
 4ca:	10 92 51 01 	sts	0x0151, r1
		clear_bit(updated_msg.data[0], 0);
		clear_bit(updated_msg.data[0], 1);
 4ce:	8c 7f       	andi	r24, 0xFC	; 252
 4d0:	80 93 56 01 	sts	0x0156, r24
	}		
	sei();
 4d4:	78 94       	sei
	/* Compare the two packets */
	diff_buttons = memcmp(&current_msg.data[0], &updated_msg.data[0], 1);
 4d6:	ee e5       	ldi	r30, 0x5E	; 94
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	23 81       	ldd	r18, Z+3	; 0x03
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	a3 e5       	ldi	r26, 0x53	; 83
 4e0:	b1 e0       	ldi	r27, 0x01	; 1
 4e2:	13 96       	adiw	r26, 0x03	; 3
 4e4:	8c 91       	ld	r24, X
 4e6:	13 97       	sbiw	r26, 0x03	; 3
 4e8:	28 1b       	sub	r18, r24
 4ea:	31 09       	sbc	r19, r1
 4ec:	30 93 4e 01 	sts	0x014E, r19
 4f0:	20 93 4d 01 	sts	0x014D, r18
	diff_speed = memcmp(&updated_msg.data[1], &current_msg.data[1], 1);
 4f4:	14 96       	adiw	r26, 0x04	; 4
 4f6:	8c 91       	ld	r24, X
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	44 81       	ldd	r20, Z+4	; 0x04
 4fc:	84 1b       	sub	r24, r20
 4fe:	91 09       	sbc	r25, r1
 500:	90 93 50 01 	sts	0x0150, r25
 504:	80 93 4f 01 	sts	0x014F, r24

	if (((diff_speed < 100) &&(abs(diff_speed) > 3)) || abs(diff_buttons)) {
 508:	84 36       	cpi	r24, 0x64	; 100
 50a:	91 05       	cpc	r25, r1
 50c:	54 f4       	brge	.+20     	; 0x522 <__vector_17+0xc6>
 50e:	ac 01       	movw	r20, r24
 510:	99 23       	and	r25, r25
 512:	24 f4       	brge	.+8      	; 0x51c <__vector_17+0xc0>
 514:	44 27       	eor	r20, r20
 516:	55 27       	eor	r21, r21
 518:	48 1b       	sub	r20, r24
 51a:	59 0b       	sbc	r21, r25
 51c:	44 30       	cpi	r20, 0x04	; 4
 51e:	51 05       	cpc	r21, r1
 520:	14 f4       	brge	.+4      	; 0x526 <__vector_17+0xca>
 522:	23 2b       	or	r18, r19
 524:	79 f0       	breq	.+30     	; 0x544 <__vector_17+0xe8>
// 		printf("\r\nCurrent ID %d, d[0] %d, d[1] %d", current_msg.id, current_msg.data[0], current_msg.data[1]);
// 		printf("\r\nUpdated ID %d, d[0] %d, d[1] %d", updated_msg.id, updated_msg.data[0], updated_msg.data[1]);
// 		printf("\r\ndiff_buttons - %d", diff_buttons);
// 		printf("\r\ndiff_speed - %d\n", diff_speed);
		/* Send a message with new data */
		ret = can_packet_send(0, &updated_msg);
 526:	63 e5       	ldi	r22, 0x53	; 83
 528:	71 e0       	ldi	r23, 0x01	; 1
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	23 df       	rcall	.-442    	; 0x374 <can_packet_send>
 52e:	80 93 52 01 	sts	0x0152, r24
		current_msg = updated_msg;	
 532:	8b e0       	ldi	r24, 0x0B	; 11
 534:	e3 e5       	ldi	r30, 0x53	; 83
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	ae e5       	ldi	r26, 0x5E	; 94
 53a:	b1 e0       	ldi	r27, 0x01	; 1
 53c:	01 90       	ld	r0, Z+
 53e:	0d 92       	st	X+, r0
 540:	8a 95       	dec	r24
 542:	e1 f7       	brne	.-8      	; 0x53c <__vector_17+0xe0>
// 	printf("\r\nMessage ID - %d", updated_msg.id);
// 	printf("\r\nMessage length - %d", updated_msg.length);
// 	for(int i = 0; i < 3; i++)
// 	printf("\r\nData[%d] received - %u", i, updated_msg.data[i]);
// 	printf("\n");
	if (ret) {
 544:	80 91 52 01 	lds	r24, 0x0152
 548:	88 23       	and	r24, r24
 54a:	21 f0       	breq	.+8      	; 0x554 <__vector_17+0xf8>
		set_bit(DDRB, PB7);
 54c:	27 9a       	sbi	0x04, 7	; 4
		ret = FALSE;
 54e:	10 92 52 01 	sts	0x0152, r1
 552:	01 c0       	rjmp	.+2      	; 0x556 <__vector_17+0xfa>
	} else
	clear_bit(DDRB, PB7);
 554:	27 98       	cbi	0x04, 7	; 4
 556:	ff 91       	pop	r31
 558:	ef 91       	pop	r30
 55a:	bf 91       	pop	r27
 55c:	af 91       	pop	r26
 55e:	9f 91       	pop	r25
 560:	8f 91       	pop	r24
 562:	7f 91       	pop	r23
 564:	6f 91       	pop	r22
 566:	5f 91       	pop	r21
 568:	4f 91       	pop	r20
 56a:	3f 91       	pop	r19
 56c:	2f 91       	pop	r18
 56e:	0f 90       	pop	r0
 570:	0b be       	out	0x3b, r0	; 59
 572:	0f 90       	pop	r0
 574:	0f be       	out	0x3f, r0	; 63
 576:	0f 90       	pop	r0
 578:	1f 90       	pop	r1
 57a:	18 95       	reti

0000057c <timer1_init>:
	/* DIsable interrupts */
	cli(); // same as cli()?
	/* Set TCNT1 to i */
	TCNT1 = i;
	/* Restore global interrupt flag */
	SREG = sreg;
 57c:	e1 e8       	ldi	r30, 0x81	; 129
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	82 60       	ori	r24, 0x02	; 2
 584:	80 83       	st	Z, r24
 586:	80 81       	ld	r24, Z
 588:	81 60       	ori	r24, 0x01	; 1
 58a:	80 83       	st	Z, r24
 58c:	10 92 85 00 	sts	0x0085, r1
 590:	10 92 84 00 	sts	0x0084, r1
 594:	ef e6       	ldi	r30, 0x6F	; 111
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	81 60       	ori	r24, 0x01	; 1
 59c:	80 83       	st	Z, r24
 59e:	78 94       	sei
 5a0:	e0 e8       	ldi	r30, 0x80	; 128
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	80 68       	ori	r24, 0x80	; 128
 5a8:	80 83       	st	Z, r24
 5aa:	80 81       	ld	r24, Z
 5ac:	8f 7b       	andi	r24, 0xBF	; 191
 5ae:	80 83       	st	Z, r24
 5b0:	08 95       	ret

000005b2 <__vector_15>:
}


ISR(TIMER1_OVF_vect) {
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	0b b6       	in	r0, 0x3b	; 59
 5be:	0f 92       	push	r0
 5c0:	2f 93       	push	r18
 5c2:	3f 93       	push	r19
 5c4:	4f 93       	push	r20
 5c6:	5f 93       	push	r21
 5c8:	6f 93       	push	r22
 5ca:	7f 93       	push	r23
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	af 93       	push	r26
 5d2:	bf 93       	push	r27
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
 5e0:	2b 97       	sbiw	r28, 0x0b	; 11
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	cd bf       	out	0x3d, r28	; 61
	/* Send a "I'm alive" message with the data */
	CAN_packet msg;
	BOOL ret = FALSE;
	msg.id = ID_steeringWheel;
 5e6:	8d e0       	ldi	r24, 0x0D	; 13
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	9a 83       	std	Y+2, r25	; 0x02
 5ec:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 3;
 5ee:	83 e0       	ldi	r24, 0x03	; 3
 5f0:	8b 83       	std	Y+3, r24	; 0x03
	/* Initialize data */
	msg.data[0] = 0;
 5f2:	1c 82       	std	Y+4, r1	; 0x04
	msg.data[1] = 0;
 5f4:	1d 82       	std	Y+5, r1	; 0x05
	msg.data[2] = 0;
 5f6:	1e 82       	std	Y+6, r1	; 0x06
	cli();
 5f8:	f8 94       	cli
	sw_input(&msg);
 5fa:	ce 01       	movw	r24, r28
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	e3 de       	rcall	.-570    	; 0x3c6 <sw_input>
	adc_init();
 600:	67 dd       	rcall	.-1330   	; 0xd0 <adc_init>
	adc_input(1, &msg);
 602:	be 01       	movw	r22, r28
 604:	6f 5f       	subi	r22, 0xFF	; 255
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	7e dd       	rcall	.-1284   	; 0x10a <adc_input>
	//adc_input(2, &msg);
	adc_sleep();
 60e:	72 dd       	rcall	.-1308   	; 0xf4 <adc_sleep>
	ret = can_packet_send(0, &msg);
 610:	be 01       	movw	r22, r28
 612:	6f 5f       	subi	r22, 0xFF	; 255
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	ad de       	rcall	.-678    	; 0x374 <can_packet_send>
	sei();
 61a:	78 94       	sei
	if(ret) {
 61c:	88 23       	and	r24, r24
 61e:	21 f0       	breq	.+8      	; 0x628 <__vector_15+0x76>
		toggle_bit(DDRB, PB5);
 620:	94 b1       	in	r25, 0x04	; 4
 622:	80 e2       	ldi	r24, 0x20	; 32
 624:	89 27       	eor	r24, r25
 626:	84 b9       	out	0x04, r24	; 4
	}
	ret = FALSE;
 628:	2b 96       	adiw	r28, 0x0b	; 11
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	de bf       	out	0x3e, r29	; 62
 630:	0f be       	out	0x3f, r0	; 63
 632:	cd bf       	out	0x3d, r28	; 61
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	bf 91       	pop	r27
 63e:	af 91       	pop	r26
 640:	9f 91       	pop	r25
 642:	8f 91       	pop	r24
 644:	7f 91       	pop	r23
 646:	6f 91       	pop	r22
 648:	5f 91       	pop	r21
 64a:	4f 91       	pop	r20
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	0f 90       	pop	r0
 652:	0b be       	out	0x3b, r0	; 59
 654:	0f 90       	pop	r0
 656:	0f be       	out	0x3f, r0	; 63
 658:	0f 90       	pop	r0
 65a:	1f 90       	pop	r1
 65c:	18 95       	reti

0000065e <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 65e:	e0 ec       	ldi	r30, 0xC0	; 192
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	90 81       	ld	r25, Z
 664:	95 ff       	sbrs	r25, 5
 666:	fd cf       	rjmp	.-6      	; 0x662 <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 668:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	08 95       	ret

00000670 <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 670:	e0 ec       	ldi	r30, 0xC0	; 192
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	88 23       	and	r24, r24
 678:	ec f7       	brge	.-6      	; 0x674 <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 67a:	80 91 c6 00 	lds	r24, 0x00C6
}
 67e:	08 95       	ret

00000680 <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 680:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 684:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 688:	86 e0       	ldi	r24, 0x06	; 6
 68a:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 68e:	66 23       	and	r22, r22
 690:	41 f0       	breq	.+16     	; 0x6a2 <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 692:	e1 ec       	ldi	r30, 0xC1	; 193
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	80 61       	ori	r24, 0x10	; 16
 69a:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 69c:	80 81       	ld	r24, Z
 69e:	88 60       	ori	r24, 0x08	; 8
 6a0:	80 83       	st	Z, r24
	}
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 6a2:	68 e3       	ldi	r22, 0x38	; 56
 6a4:	73 e0       	ldi	r23, 0x03	; 3
 6a6:	8f e2       	ldi	r24, 0x2F	; 47
 6a8:	93 e0       	ldi	r25, 0x03	; 3
 6aa:	01 c0       	rjmp	.+2      	; 0x6ae <fdevopen>
 6ac:	08 95       	ret

000006ae <fdevopen>:
 6ae:	0f 93       	push	r16
 6b0:	1f 93       	push	r17
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	00 97       	sbiw	r24, 0x00	; 0
 6b8:	31 f4       	brne	.+12     	; 0x6c6 <fdevopen+0x18>
 6ba:	61 15       	cp	r22, r1
 6bc:	71 05       	cpc	r23, r1
 6be:	19 f4       	brne	.+6      	; 0x6c6 <fdevopen+0x18>
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	39 c0       	rjmp	.+114    	; 0x738 <fdevopen+0x8a>
 6c6:	8b 01       	movw	r16, r22
 6c8:	ec 01       	movw	r28, r24
 6ca:	6e e0       	ldi	r22, 0x0E	; 14
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	38 d2       	rcall	.+1136   	; 0xb44 <calloc>
 6d4:	fc 01       	movw	r30, r24
 6d6:	89 2b       	or	r24, r25
 6d8:	99 f3       	breq	.-26     	; 0x6c0 <fdevopen+0x12>
 6da:	80 e8       	ldi	r24, 0x80	; 128
 6dc:	83 83       	std	Z+3, r24	; 0x03
 6de:	01 15       	cp	r16, r1
 6e0:	11 05       	cpc	r17, r1
 6e2:	71 f0       	breq	.+28     	; 0x700 <fdevopen+0x52>
 6e4:	13 87       	std	Z+11, r17	; 0x0b
 6e6:	02 87       	std	Z+10, r16	; 0x0a
 6e8:	81 e8       	ldi	r24, 0x81	; 129
 6ea:	83 83       	std	Z+3, r24	; 0x03
 6ec:	80 91 69 01 	lds	r24, 0x0169
 6f0:	90 91 6a 01 	lds	r25, 0x016A
 6f4:	89 2b       	or	r24, r25
 6f6:	21 f4       	brne	.+8      	; 0x700 <fdevopen+0x52>
 6f8:	f0 93 6a 01 	sts	0x016A, r31
 6fc:	e0 93 69 01 	sts	0x0169, r30
 700:	20 97       	sbiw	r28, 0x00	; 0
 702:	c9 f0       	breq	.+50     	; 0x736 <fdevopen+0x88>
 704:	d1 87       	std	Z+9, r29	; 0x09
 706:	c0 87       	std	Z+8, r28	; 0x08
 708:	83 81       	ldd	r24, Z+3	; 0x03
 70a:	82 60       	ori	r24, 0x02	; 2
 70c:	83 83       	std	Z+3, r24	; 0x03
 70e:	80 91 6b 01 	lds	r24, 0x016B
 712:	90 91 6c 01 	lds	r25, 0x016C
 716:	89 2b       	or	r24, r25
 718:	71 f4       	brne	.+28     	; 0x736 <fdevopen+0x88>
 71a:	f0 93 6c 01 	sts	0x016C, r31
 71e:	e0 93 6b 01 	sts	0x016B, r30
 722:	80 91 6d 01 	lds	r24, 0x016D
 726:	90 91 6e 01 	lds	r25, 0x016E
 72a:	89 2b       	or	r24, r25
 72c:	21 f4       	brne	.+8      	; 0x736 <fdevopen+0x88>
 72e:	f0 93 6e 01 	sts	0x016E, r31
 732:	e0 93 6d 01 	sts	0x016D, r30
 736:	cf 01       	movw	r24, r30
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	1f 91       	pop	r17
 73e:	0f 91       	pop	r16
 740:	08 95       	ret

00000742 <printf>:
 742:	cf 93       	push	r28
 744:	df 93       	push	r29
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
 74a:	ae 01       	movw	r20, r28
 74c:	4b 5f       	subi	r20, 0xFB	; 251
 74e:	5f 4f       	sbci	r21, 0xFF	; 255
 750:	fa 01       	movw	r30, r20
 752:	61 91       	ld	r22, Z+
 754:	71 91       	ld	r23, Z+
 756:	af 01       	movw	r20, r30
 758:	80 91 6b 01 	lds	r24, 0x016B
 75c:	90 91 6c 01 	lds	r25, 0x016C
 760:	03 d0       	rcall	.+6      	; 0x768 <vfprintf>
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <vfprintf>:
 768:	2f 92       	push	r2
 76a:	3f 92       	push	r3
 76c:	4f 92       	push	r4
 76e:	5f 92       	push	r5
 770:	6f 92       	push	r6
 772:	7f 92       	push	r7
 774:	8f 92       	push	r8
 776:	9f 92       	push	r9
 778:	af 92       	push	r10
 77a:	bf 92       	push	r11
 77c:	cf 92       	push	r12
 77e:	df 92       	push	r13
 780:	ef 92       	push	r14
 782:	ff 92       	push	r15
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
 790:	2c 97       	sbiw	r28, 0x0c	; 12
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	f8 94       	cli
 796:	de bf       	out	0x3e, r29	; 62
 798:	0f be       	out	0x3f, r0	; 63
 79a:	cd bf       	out	0x3d, r28	; 61
 79c:	7c 01       	movw	r14, r24
 79e:	6b 01       	movw	r12, r22
 7a0:	8a 01       	movw	r16, r20
 7a2:	fc 01       	movw	r30, r24
 7a4:	17 82       	std	Z+7, r1	; 0x07
 7a6:	16 82       	std	Z+6, r1	; 0x06
 7a8:	83 81       	ldd	r24, Z+3	; 0x03
 7aa:	81 ff       	sbrs	r24, 1
 7ac:	b0 c1       	rjmp	.+864    	; 0xb0e <vfprintf+0x3a6>
 7ae:	ce 01       	movw	r24, r28
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	4c 01       	movw	r8, r24
 7b4:	f7 01       	movw	r30, r14
 7b6:	93 81       	ldd	r25, Z+3	; 0x03
 7b8:	f6 01       	movw	r30, r12
 7ba:	93 fd       	sbrc	r25, 3
 7bc:	85 91       	lpm	r24, Z+
 7be:	93 ff       	sbrs	r25, 3
 7c0:	81 91       	ld	r24, Z+
 7c2:	6f 01       	movw	r12, r30
 7c4:	88 23       	and	r24, r24
 7c6:	09 f4       	brne	.+2      	; 0x7ca <vfprintf+0x62>
 7c8:	9e c1       	rjmp	.+828    	; 0xb06 <vfprintf+0x39e>
 7ca:	85 32       	cpi	r24, 0x25	; 37
 7cc:	39 f4       	brne	.+14     	; 0x7dc <vfprintf+0x74>
 7ce:	93 fd       	sbrc	r25, 3
 7d0:	85 91       	lpm	r24, Z+
 7d2:	93 ff       	sbrs	r25, 3
 7d4:	81 91       	ld	r24, Z+
 7d6:	6f 01       	movw	r12, r30
 7d8:	85 32       	cpi	r24, 0x25	; 37
 7da:	21 f4       	brne	.+8      	; 0x7e4 <vfprintf+0x7c>
 7dc:	b7 01       	movw	r22, r14
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	15 d3       	rcall	.+1578   	; 0xe0c <fputc>
 7e2:	e8 cf       	rjmp	.-48     	; 0x7b4 <vfprintf+0x4c>
 7e4:	51 2c       	mov	r5, r1
 7e6:	31 2c       	mov	r3, r1
 7e8:	20 e0       	ldi	r18, 0x00	; 0
 7ea:	20 32       	cpi	r18, 0x20	; 32
 7ec:	a0 f4       	brcc	.+40     	; 0x816 <vfprintf+0xae>
 7ee:	8b 32       	cpi	r24, 0x2B	; 43
 7f0:	69 f0       	breq	.+26     	; 0x80c <vfprintf+0xa4>
 7f2:	30 f4       	brcc	.+12     	; 0x800 <vfprintf+0x98>
 7f4:	80 32       	cpi	r24, 0x20	; 32
 7f6:	59 f0       	breq	.+22     	; 0x80e <vfprintf+0xa6>
 7f8:	83 32       	cpi	r24, 0x23	; 35
 7fa:	69 f4       	brne	.+26     	; 0x816 <vfprintf+0xae>
 7fc:	20 61       	ori	r18, 0x10	; 16
 7fe:	2c c0       	rjmp	.+88     	; 0x858 <vfprintf+0xf0>
 800:	8d 32       	cpi	r24, 0x2D	; 45
 802:	39 f0       	breq	.+14     	; 0x812 <vfprintf+0xaa>
 804:	80 33       	cpi	r24, 0x30	; 48
 806:	39 f4       	brne	.+14     	; 0x816 <vfprintf+0xae>
 808:	21 60       	ori	r18, 0x01	; 1
 80a:	26 c0       	rjmp	.+76     	; 0x858 <vfprintf+0xf0>
 80c:	22 60       	ori	r18, 0x02	; 2
 80e:	24 60       	ori	r18, 0x04	; 4
 810:	23 c0       	rjmp	.+70     	; 0x858 <vfprintf+0xf0>
 812:	28 60       	ori	r18, 0x08	; 8
 814:	21 c0       	rjmp	.+66     	; 0x858 <vfprintf+0xf0>
 816:	27 fd       	sbrc	r18, 7
 818:	27 c0       	rjmp	.+78     	; 0x868 <vfprintf+0x100>
 81a:	30 ed       	ldi	r19, 0xD0	; 208
 81c:	38 0f       	add	r19, r24
 81e:	3a 30       	cpi	r19, 0x0A	; 10
 820:	78 f4       	brcc	.+30     	; 0x840 <vfprintf+0xd8>
 822:	26 ff       	sbrs	r18, 6
 824:	06 c0       	rjmp	.+12     	; 0x832 <vfprintf+0xca>
 826:	fa e0       	ldi	r31, 0x0A	; 10
 828:	5f 9e       	mul	r5, r31
 82a:	30 0d       	add	r19, r0
 82c:	11 24       	eor	r1, r1
 82e:	53 2e       	mov	r5, r19
 830:	13 c0       	rjmp	.+38     	; 0x858 <vfprintf+0xf0>
 832:	8a e0       	ldi	r24, 0x0A	; 10
 834:	38 9e       	mul	r3, r24
 836:	30 0d       	add	r19, r0
 838:	11 24       	eor	r1, r1
 83a:	33 2e       	mov	r3, r19
 83c:	20 62       	ori	r18, 0x20	; 32
 83e:	0c c0       	rjmp	.+24     	; 0x858 <vfprintf+0xf0>
 840:	8e 32       	cpi	r24, 0x2E	; 46
 842:	21 f4       	brne	.+8      	; 0x84c <vfprintf+0xe4>
 844:	26 fd       	sbrc	r18, 6
 846:	5f c1       	rjmp	.+702    	; 0xb06 <vfprintf+0x39e>
 848:	20 64       	ori	r18, 0x40	; 64
 84a:	06 c0       	rjmp	.+12     	; 0x858 <vfprintf+0xf0>
 84c:	8c 36       	cpi	r24, 0x6C	; 108
 84e:	11 f4       	brne	.+4      	; 0x854 <vfprintf+0xec>
 850:	20 68       	ori	r18, 0x80	; 128
 852:	02 c0       	rjmp	.+4      	; 0x858 <vfprintf+0xf0>
 854:	88 36       	cpi	r24, 0x68	; 104
 856:	41 f4       	brne	.+16     	; 0x868 <vfprintf+0x100>
 858:	f6 01       	movw	r30, r12
 85a:	93 fd       	sbrc	r25, 3
 85c:	85 91       	lpm	r24, Z+
 85e:	93 ff       	sbrs	r25, 3
 860:	81 91       	ld	r24, Z+
 862:	6f 01       	movw	r12, r30
 864:	81 11       	cpse	r24, r1
 866:	c1 cf       	rjmp	.-126    	; 0x7ea <vfprintf+0x82>
 868:	98 2f       	mov	r25, r24
 86a:	9f 7d       	andi	r25, 0xDF	; 223
 86c:	95 54       	subi	r25, 0x45	; 69
 86e:	93 30       	cpi	r25, 0x03	; 3
 870:	28 f4       	brcc	.+10     	; 0x87c <vfprintf+0x114>
 872:	0c 5f       	subi	r16, 0xFC	; 252
 874:	1f 4f       	sbci	r17, 0xFF	; 255
 876:	ff e3       	ldi	r31, 0x3F	; 63
 878:	f9 83       	std	Y+1, r31	; 0x01
 87a:	0d c0       	rjmp	.+26     	; 0x896 <vfprintf+0x12e>
 87c:	83 36       	cpi	r24, 0x63	; 99
 87e:	31 f0       	breq	.+12     	; 0x88c <vfprintf+0x124>
 880:	83 37       	cpi	r24, 0x73	; 115
 882:	71 f0       	breq	.+28     	; 0x8a0 <vfprintf+0x138>
 884:	83 35       	cpi	r24, 0x53	; 83
 886:	09 f0       	breq	.+2      	; 0x88a <vfprintf+0x122>
 888:	57 c0       	rjmp	.+174    	; 0x938 <vfprintf+0x1d0>
 88a:	21 c0       	rjmp	.+66     	; 0x8ce <vfprintf+0x166>
 88c:	f8 01       	movw	r30, r16
 88e:	80 81       	ld	r24, Z
 890:	89 83       	std	Y+1, r24	; 0x01
 892:	0e 5f       	subi	r16, 0xFE	; 254
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	44 24       	eor	r4, r4
 898:	43 94       	inc	r4
 89a:	51 2c       	mov	r5, r1
 89c:	54 01       	movw	r10, r8
 89e:	14 c0       	rjmp	.+40     	; 0x8c8 <vfprintf+0x160>
 8a0:	38 01       	movw	r6, r16
 8a2:	f2 e0       	ldi	r31, 0x02	; 2
 8a4:	6f 0e       	add	r6, r31
 8a6:	71 1c       	adc	r7, r1
 8a8:	f8 01       	movw	r30, r16
 8aa:	a0 80       	ld	r10, Z
 8ac:	b1 80       	ldd	r11, Z+1	; 0x01
 8ae:	26 ff       	sbrs	r18, 6
 8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <vfprintf+0x150>
 8b2:	65 2d       	mov	r22, r5
 8b4:	70 e0       	ldi	r23, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <vfprintf+0x154>
 8b8:	6f ef       	ldi	r22, 0xFF	; 255
 8ba:	7f ef       	ldi	r23, 0xFF	; 255
 8bc:	c5 01       	movw	r24, r10
 8be:	2c 87       	std	Y+12, r18	; 0x0c
 8c0:	9a d2       	rcall	.+1332   	; 0xdf6 <strnlen>
 8c2:	2c 01       	movw	r4, r24
 8c4:	83 01       	movw	r16, r6
 8c6:	2c 85       	ldd	r18, Y+12	; 0x0c
 8c8:	2f 77       	andi	r18, 0x7F	; 127
 8ca:	22 2e       	mov	r2, r18
 8cc:	16 c0       	rjmp	.+44     	; 0x8fa <vfprintf+0x192>
 8ce:	38 01       	movw	r6, r16
 8d0:	f2 e0       	ldi	r31, 0x02	; 2
 8d2:	6f 0e       	add	r6, r31
 8d4:	71 1c       	adc	r7, r1
 8d6:	f8 01       	movw	r30, r16
 8d8:	a0 80       	ld	r10, Z
 8da:	b1 80       	ldd	r11, Z+1	; 0x01
 8dc:	26 ff       	sbrs	r18, 6
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <vfprintf+0x17e>
 8e0:	65 2d       	mov	r22, r5
 8e2:	70 e0       	ldi	r23, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x182>
 8e6:	6f ef       	ldi	r22, 0xFF	; 255
 8e8:	7f ef       	ldi	r23, 0xFF	; 255
 8ea:	c5 01       	movw	r24, r10
 8ec:	2c 87       	std	Y+12, r18	; 0x0c
 8ee:	71 d2       	rcall	.+1250   	; 0xdd2 <strnlen_P>
 8f0:	2c 01       	movw	r4, r24
 8f2:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f4:	20 68       	ori	r18, 0x80	; 128
 8f6:	22 2e       	mov	r2, r18
 8f8:	83 01       	movw	r16, r6
 8fa:	23 fc       	sbrc	r2, 3
 8fc:	19 c0       	rjmp	.+50     	; 0x930 <vfprintf+0x1c8>
 8fe:	83 2d       	mov	r24, r3
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	48 16       	cp	r4, r24
 904:	59 06       	cpc	r5, r25
 906:	a0 f4       	brcc	.+40     	; 0x930 <vfprintf+0x1c8>
 908:	b7 01       	movw	r22, r14
 90a:	80 e2       	ldi	r24, 0x20	; 32
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	7e d2       	rcall	.+1276   	; 0xe0c <fputc>
 910:	3a 94       	dec	r3
 912:	f5 cf       	rjmp	.-22     	; 0x8fe <vfprintf+0x196>
 914:	f5 01       	movw	r30, r10
 916:	27 fc       	sbrc	r2, 7
 918:	85 91       	lpm	r24, Z+
 91a:	27 fe       	sbrs	r2, 7
 91c:	81 91       	ld	r24, Z+
 91e:	5f 01       	movw	r10, r30
 920:	b7 01       	movw	r22, r14
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	73 d2       	rcall	.+1254   	; 0xe0c <fputc>
 926:	31 10       	cpse	r3, r1
 928:	3a 94       	dec	r3
 92a:	f1 e0       	ldi	r31, 0x01	; 1
 92c:	4f 1a       	sub	r4, r31
 92e:	51 08       	sbc	r5, r1
 930:	41 14       	cp	r4, r1
 932:	51 04       	cpc	r5, r1
 934:	79 f7       	brne	.-34     	; 0x914 <vfprintf+0x1ac>
 936:	de c0       	rjmp	.+444    	; 0xaf4 <vfprintf+0x38c>
 938:	84 36       	cpi	r24, 0x64	; 100
 93a:	11 f0       	breq	.+4      	; 0x940 <vfprintf+0x1d8>
 93c:	89 36       	cpi	r24, 0x69	; 105
 93e:	31 f5       	brne	.+76     	; 0x98c <vfprintf+0x224>
 940:	f8 01       	movw	r30, r16
 942:	27 ff       	sbrs	r18, 7
 944:	07 c0       	rjmp	.+14     	; 0x954 <vfprintf+0x1ec>
 946:	60 81       	ld	r22, Z
 948:	71 81       	ldd	r23, Z+1	; 0x01
 94a:	82 81       	ldd	r24, Z+2	; 0x02
 94c:	93 81       	ldd	r25, Z+3	; 0x03
 94e:	0c 5f       	subi	r16, 0xFC	; 252
 950:	1f 4f       	sbci	r17, 0xFF	; 255
 952:	08 c0       	rjmp	.+16     	; 0x964 <vfprintf+0x1fc>
 954:	60 81       	ld	r22, Z
 956:	71 81       	ldd	r23, Z+1	; 0x01
 958:	07 2e       	mov	r0, r23
 95a:	00 0c       	add	r0, r0
 95c:	88 0b       	sbc	r24, r24
 95e:	99 0b       	sbc	r25, r25
 960:	0e 5f       	subi	r16, 0xFE	; 254
 962:	1f 4f       	sbci	r17, 0xFF	; 255
 964:	2f 76       	andi	r18, 0x6F	; 111
 966:	72 2e       	mov	r7, r18
 968:	97 ff       	sbrs	r25, 7
 96a:	09 c0       	rjmp	.+18     	; 0x97e <vfprintf+0x216>
 96c:	90 95       	com	r25
 96e:	80 95       	com	r24
 970:	70 95       	com	r23
 972:	61 95       	neg	r22
 974:	7f 4f       	sbci	r23, 0xFF	; 255
 976:	8f 4f       	sbci	r24, 0xFF	; 255
 978:	9f 4f       	sbci	r25, 0xFF	; 255
 97a:	20 68       	ori	r18, 0x80	; 128
 97c:	72 2e       	mov	r7, r18
 97e:	2a e0       	ldi	r18, 0x0A	; 10
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	a4 01       	movw	r20, r8
 984:	7b d2       	rcall	.+1270   	; 0xe7c <__ultoa_invert>
 986:	a8 2e       	mov	r10, r24
 988:	a8 18       	sub	r10, r8
 98a:	43 c0       	rjmp	.+134    	; 0xa12 <vfprintf+0x2aa>
 98c:	85 37       	cpi	r24, 0x75	; 117
 98e:	29 f4       	brne	.+10     	; 0x99a <vfprintf+0x232>
 990:	2f 7e       	andi	r18, 0xEF	; 239
 992:	b2 2e       	mov	r11, r18
 994:	2a e0       	ldi	r18, 0x0A	; 10
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	25 c0       	rjmp	.+74     	; 0x9e4 <vfprintf+0x27c>
 99a:	f2 2f       	mov	r31, r18
 99c:	f9 7f       	andi	r31, 0xF9	; 249
 99e:	bf 2e       	mov	r11, r31
 9a0:	8f 36       	cpi	r24, 0x6F	; 111
 9a2:	c1 f0       	breq	.+48     	; 0x9d4 <vfprintf+0x26c>
 9a4:	18 f4       	brcc	.+6      	; 0x9ac <vfprintf+0x244>
 9a6:	88 35       	cpi	r24, 0x58	; 88
 9a8:	79 f0       	breq	.+30     	; 0x9c8 <vfprintf+0x260>
 9aa:	ad c0       	rjmp	.+346    	; 0xb06 <vfprintf+0x39e>
 9ac:	80 37       	cpi	r24, 0x70	; 112
 9ae:	19 f0       	breq	.+6      	; 0x9b6 <vfprintf+0x24e>
 9b0:	88 37       	cpi	r24, 0x78	; 120
 9b2:	21 f0       	breq	.+8      	; 0x9bc <vfprintf+0x254>
 9b4:	a8 c0       	rjmp	.+336    	; 0xb06 <vfprintf+0x39e>
 9b6:	2f 2f       	mov	r18, r31
 9b8:	20 61       	ori	r18, 0x10	; 16
 9ba:	b2 2e       	mov	r11, r18
 9bc:	b4 fe       	sbrs	r11, 4
 9be:	0d c0       	rjmp	.+26     	; 0x9da <vfprintf+0x272>
 9c0:	8b 2d       	mov	r24, r11
 9c2:	84 60       	ori	r24, 0x04	; 4
 9c4:	b8 2e       	mov	r11, r24
 9c6:	09 c0       	rjmp	.+18     	; 0x9da <vfprintf+0x272>
 9c8:	24 ff       	sbrs	r18, 4
 9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <vfprintf+0x278>
 9cc:	9f 2f       	mov	r25, r31
 9ce:	96 60       	ori	r25, 0x06	; 6
 9d0:	b9 2e       	mov	r11, r25
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <vfprintf+0x278>
 9d4:	28 e0       	ldi	r18, 0x08	; 8
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <vfprintf+0x27c>
 9da:	20 e1       	ldi	r18, 0x10	; 16
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <vfprintf+0x27c>
 9e0:	20 e1       	ldi	r18, 0x10	; 16
 9e2:	32 e0       	ldi	r19, 0x02	; 2
 9e4:	f8 01       	movw	r30, r16
 9e6:	b7 fe       	sbrs	r11, 7
 9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <vfprintf+0x290>
 9ea:	60 81       	ld	r22, Z
 9ec:	71 81       	ldd	r23, Z+1	; 0x01
 9ee:	82 81       	ldd	r24, Z+2	; 0x02
 9f0:	93 81       	ldd	r25, Z+3	; 0x03
 9f2:	0c 5f       	subi	r16, 0xFC	; 252
 9f4:	1f 4f       	sbci	r17, 0xFF	; 255
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <vfprintf+0x29c>
 9f8:	60 81       	ld	r22, Z
 9fa:	71 81       	ldd	r23, Z+1	; 0x01
 9fc:	80 e0       	ldi	r24, 0x00	; 0
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 5f       	subi	r16, 0xFE	; 254
 a02:	1f 4f       	sbci	r17, 0xFF	; 255
 a04:	a4 01       	movw	r20, r8
 a06:	3a d2       	rcall	.+1140   	; 0xe7c <__ultoa_invert>
 a08:	a8 2e       	mov	r10, r24
 a0a:	a8 18       	sub	r10, r8
 a0c:	fb 2d       	mov	r31, r11
 a0e:	ff 77       	andi	r31, 0x7F	; 127
 a10:	7f 2e       	mov	r7, r31
 a12:	76 fe       	sbrs	r7, 6
 a14:	0b c0       	rjmp	.+22     	; 0xa2c <vfprintf+0x2c4>
 a16:	37 2d       	mov	r19, r7
 a18:	3e 7f       	andi	r19, 0xFE	; 254
 a1a:	a5 14       	cp	r10, r5
 a1c:	50 f4       	brcc	.+20     	; 0xa32 <vfprintf+0x2ca>
 a1e:	74 fe       	sbrs	r7, 4
 a20:	0a c0       	rjmp	.+20     	; 0xa36 <vfprintf+0x2ce>
 a22:	72 fc       	sbrc	r7, 2
 a24:	08 c0       	rjmp	.+16     	; 0xa36 <vfprintf+0x2ce>
 a26:	37 2d       	mov	r19, r7
 a28:	3e 7e       	andi	r19, 0xEE	; 238
 a2a:	05 c0       	rjmp	.+10     	; 0xa36 <vfprintf+0x2ce>
 a2c:	ba 2c       	mov	r11, r10
 a2e:	37 2d       	mov	r19, r7
 a30:	03 c0       	rjmp	.+6      	; 0xa38 <vfprintf+0x2d0>
 a32:	ba 2c       	mov	r11, r10
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <vfprintf+0x2d0>
 a36:	b5 2c       	mov	r11, r5
 a38:	34 ff       	sbrs	r19, 4
 a3a:	0d c0       	rjmp	.+26     	; 0xa56 <vfprintf+0x2ee>
 a3c:	fe 01       	movw	r30, r28
 a3e:	ea 0d       	add	r30, r10
 a40:	f1 1d       	adc	r31, r1
 a42:	80 81       	ld	r24, Z
 a44:	80 33       	cpi	r24, 0x30	; 48
 a46:	11 f4       	brne	.+4      	; 0xa4c <vfprintf+0x2e4>
 a48:	39 7e       	andi	r19, 0xE9	; 233
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <vfprintf+0x2f6>
 a4c:	32 ff       	sbrs	r19, 2
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <vfprintf+0x2f4>
 a50:	b3 94       	inc	r11
 a52:	b3 94       	inc	r11
 a54:	04 c0       	rjmp	.+8      	; 0xa5e <vfprintf+0x2f6>
 a56:	83 2f       	mov	r24, r19
 a58:	86 78       	andi	r24, 0x86	; 134
 a5a:	09 f0       	breq	.+2      	; 0xa5e <vfprintf+0x2f6>
 a5c:	b3 94       	inc	r11
 a5e:	33 fd       	sbrc	r19, 3
 a60:	12 c0       	rjmp	.+36     	; 0xa86 <vfprintf+0x31e>
 a62:	30 ff       	sbrs	r19, 0
 a64:	06 c0       	rjmp	.+12     	; 0xa72 <vfprintf+0x30a>
 a66:	5a 2c       	mov	r5, r10
 a68:	b3 14       	cp	r11, r3
 a6a:	18 f4       	brcc	.+6      	; 0xa72 <vfprintf+0x30a>
 a6c:	53 0c       	add	r5, r3
 a6e:	5b 18       	sub	r5, r11
 a70:	b3 2c       	mov	r11, r3
 a72:	b3 14       	cp	r11, r3
 a74:	60 f4       	brcc	.+24     	; 0xa8e <vfprintf+0x326>
 a76:	b7 01       	movw	r22, r14
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	3c 87       	std	Y+12, r19	; 0x0c
 a7e:	c6 d1       	rcall	.+908    	; 0xe0c <fputc>
 a80:	b3 94       	inc	r11
 a82:	3c 85       	ldd	r19, Y+12	; 0x0c
 a84:	f6 cf       	rjmp	.-20     	; 0xa72 <vfprintf+0x30a>
 a86:	b3 14       	cp	r11, r3
 a88:	10 f4       	brcc	.+4      	; 0xa8e <vfprintf+0x326>
 a8a:	3b 18       	sub	r3, r11
 a8c:	01 c0       	rjmp	.+2      	; 0xa90 <vfprintf+0x328>
 a8e:	31 2c       	mov	r3, r1
 a90:	34 ff       	sbrs	r19, 4
 a92:	11 c0       	rjmp	.+34     	; 0xab6 <vfprintf+0x34e>
 a94:	b7 01       	movw	r22, r14
 a96:	80 e3       	ldi	r24, 0x30	; 48
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	3c 87       	std	Y+12, r19	; 0x0c
 a9c:	b7 d1       	rcall	.+878    	; 0xe0c <fputc>
 a9e:	3c 85       	ldd	r19, Y+12	; 0x0c
 aa0:	32 ff       	sbrs	r19, 2
 aa2:	16 c0       	rjmp	.+44     	; 0xad0 <vfprintf+0x368>
 aa4:	31 fd       	sbrc	r19, 1
 aa6:	03 c0       	rjmp	.+6      	; 0xaae <vfprintf+0x346>
 aa8:	88 e7       	ldi	r24, 0x78	; 120
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <vfprintf+0x34a>
 aae:	88 e5       	ldi	r24, 0x58	; 88
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	b7 01       	movw	r22, r14
 ab4:	0c c0       	rjmp	.+24     	; 0xace <vfprintf+0x366>
 ab6:	83 2f       	mov	r24, r19
 ab8:	86 78       	andi	r24, 0x86	; 134
 aba:	51 f0       	breq	.+20     	; 0xad0 <vfprintf+0x368>
 abc:	31 ff       	sbrs	r19, 1
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <vfprintf+0x35c>
 ac0:	8b e2       	ldi	r24, 0x2B	; 43
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <vfprintf+0x35e>
 ac4:	80 e2       	ldi	r24, 0x20	; 32
 ac6:	37 fd       	sbrc	r19, 7
 ac8:	8d e2       	ldi	r24, 0x2D	; 45
 aca:	b7 01       	movw	r22, r14
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	9e d1       	rcall	.+828    	; 0xe0c <fputc>
 ad0:	a5 14       	cp	r10, r5
 ad2:	30 f4       	brcc	.+12     	; 0xae0 <vfprintf+0x378>
 ad4:	b7 01       	movw	r22, r14
 ad6:	80 e3       	ldi	r24, 0x30	; 48
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	98 d1       	rcall	.+816    	; 0xe0c <fputc>
 adc:	5a 94       	dec	r5
 ade:	f8 cf       	rjmp	.-16     	; 0xad0 <vfprintf+0x368>
 ae0:	aa 94       	dec	r10
 ae2:	f4 01       	movw	r30, r8
 ae4:	ea 0d       	add	r30, r10
 ae6:	f1 1d       	adc	r31, r1
 ae8:	80 81       	ld	r24, Z
 aea:	b7 01       	movw	r22, r14
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	8e d1       	rcall	.+796    	; 0xe0c <fputc>
 af0:	a1 10       	cpse	r10, r1
 af2:	f6 cf       	rjmp	.-20     	; 0xae0 <vfprintf+0x378>
 af4:	33 20       	and	r3, r3
 af6:	09 f4       	brne	.+2      	; 0xafa <vfprintf+0x392>
 af8:	5d ce       	rjmp	.-838    	; 0x7b4 <vfprintf+0x4c>
 afa:	b7 01       	movw	r22, r14
 afc:	80 e2       	ldi	r24, 0x20	; 32
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	85 d1       	rcall	.+778    	; 0xe0c <fputc>
 b02:	3a 94       	dec	r3
 b04:	f7 cf       	rjmp	.-18     	; 0xaf4 <vfprintf+0x38c>
 b06:	f7 01       	movw	r30, r14
 b08:	86 81       	ldd	r24, Z+6	; 0x06
 b0a:	97 81       	ldd	r25, Z+7	; 0x07
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <vfprintf+0x3aa>
 b0e:	8f ef       	ldi	r24, 0xFF	; 255
 b10:	9f ef       	ldi	r25, 0xFF	; 255
 b12:	2c 96       	adiw	r28, 0x0c	; 12
 b14:	0f b6       	in	r0, 0x3f	; 63
 b16:	f8 94       	cli
 b18:	de bf       	out	0x3e, r29	; 62
 b1a:	0f be       	out	0x3f, r0	; 63
 b1c:	cd bf       	out	0x3d, r28	; 61
 b1e:	df 91       	pop	r29
 b20:	cf 91       	pop	r28
 b22:	1f 91       	pop	r17
 b24:	0f 91       	pop	r16
 b26:	ff 90       	pop	r15
 b28:	ef 90       	pop	r14
 b2a:	df 90       	pop	r13
 b2c:	cf 90       	pop	r12
 b2e:	bf 90       	pop	r11
 b30:	af 90       	pop	r10
 b32:	9f 90       	pop	r9
 b34:	8f 90       	pop	r8
 b36:	7f 90       	pop	r7
 b38:	6f 90       	pop	r6
 b3a:	5f 90       	pop	r5
 b3c:	4f 90       	pop	r4
 b3e:	3f 90       	pop	r3
 b40:	2f 90       	pop	r2
 b42:	08 95       	ret

00000b44 <calloc>:
 b44:	0f 93       	push	r16
 b46:	1f 93       	push	r17
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	86 9f       	mul	r24, r22
 b4e:	80 01       	movw	r16, r0
 b50:	87 9f       	mul	r24, r23
 b52:	10 0d       	add	r17, r0
 b54:	96 9f       	mul	r25, r22
 b56:	10 0d       	add	r17, r0
 b58:	11 24       	eor	r1, r1
 b5a:	c8 01       	movw	r24, r16
 b5c:	0d d0       	rcall	.+26     	; 0xb78 <malloc>
 b5e:	ec 01       	movw	r28, r24
 b60:	00 97       	sbiw	r24, 0x00	; 0
 b62:	21 f0       	breq	.+8      	; 0xb6c <calloc+0x28>
 b64:	a8 01       	movw	r20, r16
 b66:	60 e0       	ldi	r22, 0x00	; 0
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	3e d1       	rcall	.+636    	; 0xde8 <memset>
 b6c:	ce 01       	movw	r24, r28
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	1f 91       	pop	r17
 b74:	0f 91       	pop	r16
 b76:	08 95       	ret

00000b78 <malloc>:
 b78:	cf 93       	push	r28
 b7a:	df 93       	push	r29
 b7c:	82 30       	cpi	r24, 0x02	; 2
 b7e:	91 05       	cpc	r25, r1
 b80:	10 f4       	brcc	.+4      	; 0xb86 <malloc+0xe>
 b82:	82 e0       	ldi	r24, 0x02	; 2
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	e0 91 71 01 	lds	r30, 0x0171
 b8a:	f0 91 72 01 	lds	r31, 0x0172
 b8e:	20 e0       	ldi	r18, 0x00	; 0
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	c0 e0       	ldi	r28, 0x00	; 0
 b94:	d0 e0       	ldi	r29, 0x00	; 0
 b96:	30 97       	sbiw	r30, 0x00	; 0
 b98:	11 f1       	breq	.+68     	; 0xbde <malloc+0x66>
 b9a:	40 81       	ld	r20, Z
 b9c:	51 81       	ldd	r21, Z+1	; 0x01
 b9e:	48 17       	cp	r20, r24
 ba0:	59 07       	cpc	r21, r25
 ba2:	c0 f0       	brcs	.+48     	; 0xbd4 <malloc+0x5c>
 ba4:	48 17       	cp	r20, r24
 ba6:	59 07       	cpc	r21, r25
 ba8:	61 f4       	brne	.+24     	; 0xbc2 <malloc+0x4a>
 baa:	82 81       	ldd	r24, Z+2	; 0x02
 bac:	93 81       	ldd	r25, Z+3	; 0x03
 bae:	20 97       	sbiw	r28, 0x00	; 0
 bb0:	19 f0       	breq	.+6      	; 0xbb8 <malloc+0x40>
 bb2:	9b 83       	std	Y+3, r25	; 0x03
 bb4:	8a 83       	std	Y+2, r24	; 0x02
 bb6:	2b c0       	rjmp	.+86     	; 0xc0e <malloc+0x96>
 bb8:	90 93 72 01 	sts	0x0172, r25
 bbc:	80 93 71 01 	sts	0x0171, r24
 bc0:	26 c0       	rjmp	.+76     	; 0xc0e <malloc+0x96>
 bc2:	21 15       	cp	r18, r1
 bc4:	31 05       	cpc	r19, r1
 bc6:	19 f0       	breq	.+6      	; 0xbce <malloc+0x56>
 bc8:	42 17       	cp	r20, r18
 bca:	53 07       	cpc	r21, r19
 bcc:	18 f4       	brcc	.+6      	; 0xbd4 <malloc+0x5c>
 bce:	9a 01       	movw	r18, r20
 bd0:	be 01       	movw	r22, r28
 bd2:	df 01       	movw	r26, r30
 bd4:	ef 01       	movw	r28, r30
 bd6:	02 80       	ldd	r0, Z+2	; 0x02
 bd8:	f3 81       	ldd	r31, Z+3	; 0x03
 bda:	e0 2d       	mov	r30, r0
 bdc:	dc cf       	rjmp	.-72     	; 0xb96 <malloc+0x1e>
 bde:	21 15       	cp	r18, r1
 be0:	31 05       	cpc	r19, r1
 be2:	09 f1       	breq	.+66     	; 0xc26 <malloc+0xae>
 be4:	28 1b       	sub	r18, r24
 be6:	39 0b       	sbc	r19, r25
 be8:	24 30       	cpi	r18, 0x04	; 4
 bea:	31 05       	cpc	r19, r1
 bec:	90 f4       	brcc	.+36     	; 0xc12 <malloc+0x9a>
 bee:	12 96       	adiw	r26, 0x02	; 2
 bf0:	8d 91       	ld	r24, X+
 bf2:	9c 91       	ld	r25, X
 bf4:	13 97       	sbiw	r26, 0x03	; 3
 bf6:	61 15       	cp	r22, r1
 bf8:	71 05       	cpc	r23, r1
 bfa:	21 f0       	breq	.+8      	; 0xc04 <malloc+0x8c>
 bfc:	fb 01       	movw	r30, r22
 bfe:	93 83       	std	Z+3, r25	; 0x03
 c00:	82 83       	std	Z+2, r24	; 0x02
 c02:	04 c0       	rjmp	.+8      	; 0xc0c <malloc+0x94>
 c04:	90 93 72 01 	sts	0x0172, r25
 c08:	80 93 71 01 	sts	0x0171, r24
 c0c:	fd 01       	movw	r30, r26
 c0e:	32 96       	adiw	r30, 0x02	; 2
 c10:	44 c0       	rjmp	.+136    	; 0xc9a <malloc+0x122>
 c12:	fd 01       	movw	r30, r26
 c14:	e2 0f       	add	r30, r18
 c16:	f3 1f       	adc	r31, r19
 c18:	81 93       	st	Z+, r24
 c1a:	91 93       	st	Z+, r25
 c1c:	22 50       	subi	r18, 0x02	; 2
 c1e:	31 09       	sbc	r19, r1
 c20:	2d 93       	st	X+, r18
 c22:	3c 93       	st	X, r19
 c24:	3a c0       	rjmp	.+116    	; 0xc9a <malloc+0x122>
 c26:	20 91 6f 01 	lds	r18, 0x016F
 c2a:	30 91 70 01 	lds	r19, 0x0170
 c2e:	23 2b       	or	r18, r19
 c30:	41 f4       	brne	.+16     	; 0xc42 <malloc+0xca>
 c32:	20 91 02 01 	lds	r18, 0x0102
 c36:	30 91 03 01 	lds	r19, 0x0103
 c3a:	30 93 70 01 	sts	0x0170, r19
 c3e:	20 93 6f 01 	sts	0x016F, r18
 c42:	20 91 00 01 	lds	r18, 0x0100
 c46:	30 91 01 01 	lds	r19, 0x0101
 c4a:	21 15       	cp	r18, r1
 c4c:	31 05       	cpc	r19, r1
 c4e:	41 f4       	brne	.+16     	; 0xc60 <malloc+0xe8>
 c50:	2d b7       	in	r18, 0x3d	; 61
 c52:	3e b7       	in	r19, 0x3e	; 62
 c54:	40 91 04 01 	lds	r20, 0x0104
 c58:	50 91 05 01 	lds	r21, 0x0105
 c5c:	24 1b       	sub	r18, r20
 c5e:	35 0b       	sbc	r19, r21
 c60:	e0 91 6f 01 	lds	r30, 0x016F
 c64:	f0 91 70 01 	lds	r31, 0x0170
 c68:	e2 17       	cp	r30, r18
 c6a:	f3 07       	cpc	r31, r19
 c6c:	a0 f4       	brcc	.+40     	; 0xc96 <malloc+0x11e>
 c6e:	2e 1b       	sub	r18, r30
 c70:	3f 0b       	sbc	r19, r31
 c72:	28 17       	cp	r18, r24
 c74:	39 07       	cpc	r19, r25
 c76:	78 f0       	brcs	.+30     	; 0xc96 <malloc+0x11e>
 c78:	ac 01       	movw	r20, r24
 c7a:	4e 5f       	subi	r20, 0xFE	; 254
 c7c:	5f 4f       	sbci	r21, 0xFF	; 255
 c7e:	24 17       	cp	r18, r20
 c80:	35 07       	cpc	r19, r21
 c82:	48 f0       	brcs	.+18     	; 0xc96 <malloc+0x11e>
 c84:	4e 0f       	add	r20, r30
 c86:	5f 1f       	adc	r21, r31
 c88:	50 93 70 01 	sts	0x0170, r21
 c8c:	40 93 6f 01 	sts	0x016F, r20
 c90:	81 93       	st	Z+, r24
 c92:	91 93       	st	Z+, r25
 c94:	02 c0       	rjmp	.+4      	; 0xc9a <malloc+0x122>
 c96:	e0 e0       	ldi	r30, 0x00	; 0
 c98:	f0 e0       	ldi	r31, 0x00	; 0
 c9a:	cf 01       	movw	r24, r30
 c9c:	df 91       	pop	r29
 c9e:	cf 91       	pop	r28
 ca0:	08 95       	ret

00000ca2 <free>:
 ca2:	0f 93       	push	r16
 ca4:	1f 93       	push	r17
 ca6:	cf 93       	push	r28
 ca8:	df 93       	push	r29
 caa:	00 97       	sbiw	r24, 0x00	; 0
 cac:	09 f4       	brne	.+2      	; 0xcb0 <free+0xe>
 cae:	8c c0       	rjmp	.+280    	; 0xdc8 <free+0x126>
 cb0:	fc 01       	movw	r30, r24
 cb2:	32 97       	sbiw	r30, 0x02	; 2
 cb4:	13 82       	std	Z+3, r1	; 0x03
 cb6:	12 82       	std	Z+2, r1	; 0x02
 cb8:	00 91 71 01 	lds	r16, 0x0171
 cbc:	10 91 72 01 	lds	r17, 0x0172
 cc0:	01 15       	cp	r16, r1
 cc2:	11 05       	cpc	r17, r1
 cc4:	81 f4       	brne	.+32     	; 0xce6 <free+0x44>
 cc6:	20 81       	ld	r18, Z
 cc8:	31 81       	ldd	r19, Z+1	; 0x01
 cca:	82 0f       	add	r24, r18
 ccc:	93 1f       	adc	r25, r19
 cce:	20 91 6f 01 	lds	r18, 0x016F
 cd2:	30 91 70 01 	lds	r19, 0x0170
 cd6:	28 17       	cp	r18, r24
 cd8:	39 07       	cpc	r19, r25
 cda:	79 f5       	brne	.+94     	; 0xd3a <free+0x98>
 cdc:	f0 93 70 01 	sts	0x0170, r31
 ce0:	e0 93 6f 01 	sts	0x016F, r30
 ce4:	71 c0       	rjmp	.+226    	; 0xdc8 <free+0x126>
 ce6:	d8 01       	movw	r26, r16
 ce8:	40 e0       	ldi	r20, 0x00	; 0
 cea:	50 e0       	ldi	r21, 0x00	; 0
 cec:	ae 17       	cp	r26, r30
 cee:	bf 07       	cpc	r27, r31
 cf0:	50 f4       	brcc	.+20     	; 0xd06 <free+0x64>
 cf2:	12 96       	adiw	r26, 0x02	; 2
 cf4:	2d 91       	ld	r18, X+
 cf6:	3c 91       	ld	r19, X
 cf8:	13 97       	sbiw	r26, 0x03	; 3
 cfa:	ad 01       	movw	r20, r26
 cfc:	21 15       	cp	r18, r1
 cfe:	31 05       	cpc	r19, r1
 d00:	09 f1       	breq	.+66     	; 0xd44 <free+0xa2>
 d02:	d9 01       	movw	r26, r18
 d04:	f3 cf       	rjmp	.-26     	; 0xcec <free+0x4a>
 d06:	9d 01       	movw	r18, r26
 d08:	da 01       	movw	r26, r20
 d0a:	33 83       	std	Z+3, r19	; 0x03
 d0c:	22 83       	std	Z+2, r18	; 0x02
 d0e:	60 81       	ld	r22, Z
 d10:	71 81       	ldd	r23, Z+1	; 0x01
 d12:	86 0f       	add	r24, r22
 d14:	97 1f       	adc	r25, r23
 d16:	82 17       	cp	r24, r18
 d18:	93 07       	cpc	r25, r19
 d1a:	69 f4       	brne	.+26     	; 0xd36 <free+0x94>
 d1c:	ec 01       	movw	r28, r24
 d1e:	28 81       	ld	r18, Y
 d20:	39 81       	ldd	r19, Y+1	; 0x01
 d22:	26 0f       	add	r18, r22
 d24:	37 1f       	adc	r19, r23
 d26:	2e 5f       	subi	r18, 0xFE	; 254
 d28:	3f 4f       	sbci	r19, 0xFF	; 255
 d2a:	31 83       	std	Z+1, r19	; 0x01
 d2c:	20 83       	st	Z, r18
 d2e:	8a 81       	ldd	r24, Y+2	; 0x02
 d30:	9b 81       	ldd	r25, Y+3	; 0x03
 d32:	93 83       	std	Z+3, r25	; 0x03
 d34:	82 83       	std	Z+2, r24	; 0x02
 d36:	45 2b       	or	r20, r21
 d38:	29 f4       	brne	.+10     	; 0xd44 <free+0xa2>
 d3a:	f0 93 72 01 	sts	0x0172, r31
 d3e:	e0 93 71 01 	sts	0x0171, r30
 d42:	42 c0       	rjmp	.+132    	; 0xdc8 <free+0x126>
 d44:	13 96       	adiw	r26, 0x03	; 3
 d46:	fc 93       	st	X, r31
 d48:	ee 93       	st	-X, r30
 d4a:	12 97       	sbiw	r26, 0x02	; 2
 d4c:	ed 01       	movw	r28, r26
 d4e:	49 91       	ld	r20, Y+
 d50:	59 91       	ld	r21, Y+
 d52:	9e 01       	movw	r18, r28
 d54:	24 0f       	add	r18, r20
 d56:	35 1f       	adc	r19, r21
 d58:	e2 17       	cp	r30, r18
 d5a:	f3 07       	cpc	r31, r19
 d5c:	71 f4       	brne	.+28     	; 0xd7a <free+0xd8>
 d5e:	80 81       	ld	r24, Z
 d60:	91 81       	ldd	r25, Z+1	; 0x01
 d62:	84 0f       	add	r24, r20
 d64:	95 1f       	adc	r25, r21
 d66:	02 96       	adiw	r24, 0x02	; 2
 d68:	11 96       	adiw	r26, 0x01	; 1
 d6a:	9c 93       	st	X, r25
 d6c:	8e 93       	st	-X, r24
 d6e:	82 81       	ldd	r24, Z+2	; 0x02
 d70:	93 81       	ldd	r25, Z+3	; 0x03
 d72:	13 96       	adiw	r26, 0x03	; 3
 d74:	9c 93       	st	X, r25
 d76:	8e 93       	st	-X, r24
 d78:	12 97       	sbiw	r26, 0x02	; 2
 d7a:	e0 e0       	ldi	r30, 0x00	; 0
 d7c:	f0 e0       	ldi	r31, 0x00	; 0
 d7e:	d8 01       	movw	r26, r16
 d80:	12 96       	adiw	r26, 0x02	; 2
 d82:	8d 91       	ld	r24, X+
 d84:	9c 91       	ld	r25, X
 d86:	13 97       	sbiw	r26, 0x03	; 3
 d88:	00 97       	sbiw	r24, 0x00	; 0
 d8a:	19 f0       	breq	.+6      	; 0xd92 <free+0xf0>
 d8c:	f8 01       	movw	r30, r16
 d8e:	8c 01       	movw	r16, r24
 d90:	f6 cf       	rjmp	.-20     	; 0xd7e <free+0xdc>
 d92:	8d 91       	ld	r24, X+
 d94:	9c 91       	ld	r25, X
 d96:	98 01       	movw	r18, r16
 d98:	2e 5f       	subi	r18, 0xFE	; 254
 d9a:	3f 4f       	sbci	r19, 0xFF	; 255
 d9c:	82 0f       	add	r24, r18
 d9e:	93 1f       	adc	r25, r19
 da0:	20 91 6f 01 	lds	r18, 0x016F
 da4:	30 91 70 01 	lds	r19, 0x0170
 da8:	28 17       	cp	r18, r24
 daa:	39 07       	cpc	r19, r25
 dac:	69 f4       	brne	.+26     	; 0xdc8 <free+0x126>
 dae:	30 97       	sbiw	r30, 0x00	; 0
 db0:	29 f4       	brne	.+10     	; 0xdbc <free+0x11a>
 db2:	10 92 72 01 	sts	0x0172, r1
 db6:	10 92 71 01 	sts	0x0171, r1
 dba:	02 c0       	rjmp	.+4      	; 0xdc0 <free+0x11e>
 dbc:	13 82       	std	Z+3, r1	; 0x03
 dbe:	12 82       	std	Z+2, r1	; 0x02
 dc0:	10 93 70 01 	sts	0x0170, r17
 dc4:	00 93 6f 01 	sts	0x016F, r16
 dc8:	df 91       	pop	r29
 dca:	cf 91       	pop	r28
 dcc:	1f 91       	pop	r17
 dce:	0f 91       	pop	r16
 dd0:	08 95       	ret

00000dd2 <strnlen_P>:
 dd2:	fc 01       	movw	r30, r24
 dd4:	05 90       	lpm	r0, Z+
 dd6:	61 50       	subi	r22, 0x01	; 1
 dd8:	70 40       	sbci	r23, 0x00	; 0
 dda:	01 10       	cpse	r0, r1
 ddc:	d8 f7       	brcc	.-10     	; 0xdd4 <strnlen_P+0x2>
 dde:	80 95       	com	r24
 de0:	90 95       	com	r25
 de2:	8e 0f       	add	r24, r30
 de4:	9f 1f       	adc	r25, r31
 de6:	08 95       	ret

00000de8 <memset>:
 de8:	dc 01       	movw	r26, r24
 dea:	01 c0       	rjmp	.+2      	; 0xdee <memset+0x6>
 dec:	6d 93       	st	X+, r22
 dee:	41 50       	subi	r20, 0x01	; 1
 df0:	50 40       	sbci	r21, 0x00	; 0
 df2:	e0 f7       	brcc	.-8      	; 0xdec <memset+0x4>
 df4:	08 95       	ret

00000df6 <strnlen>:
 df6:	fc 01       	movw	r30, r24
 df8:	61 50       	subi	r22, 0x01	; 1
 dfa:	70 40       	sbci	r23, 0x00	; 0
 dfc:	01 90       	ld	r0, Z+
 dfe:	01 10       	cpse	r0, r1
 e00:	d8 f7       	brcc	.-10     	; 0xdf8 <strnlen+0x2>
 e02:	80 95       	com	r24
 e04:	90 95       	com	r25
 e06:	8e 0f       	add	r24, r30
 e08:	9f 1f       	adc	r25, r31
 e0a:	08 95       	ret

00000e0c <fputc>:
 e0c:	0f 93       	push	r16
 e0e:	1f 93       	push	r17
 e10:	cf 93       	push	r28
 e12:	df 93       	push	r29
 e14:	fb 01       	movw	r30, r22
 e16:	23 81       	ldd	r18, Z+3	; 0x03
 e18:	21 fd       	sbrc	r18, 1
 e1a:	03 c0       	rjmp	.+6      	; 0xe22 <fputc+0x16>
 e1c:	8f ef       	ldi	r24, 0xFF	; 255
 e1e:	9f ef       	ldi	r25, 0xFF	; 255
 e20:	28 c0       	rjmp	.+80     	; 0xe72 <fputc+0x66>
 e22:	22 ff       	sbrs	r18, 2
 e24:	16 c0       	rjmp	.+44     	; 0xe52 <fputc+0x46>
 e26:	46 81       	ldd	r20, Z+6	; 0x06
 e28:	57 81       	ldd	r21, Z+7	; 0x07
 e2a:	24 81       	ldd	r18, Z+4	; 0x04
 e2c:	35 81       	ldd	r19, Z+5	; 0x05
 e2e:	42 17       	cp	r20, r18
 e30:	53 07       	cpc	r21, r19
 e32:	44 f4       	brge	.+16     	; 0xe44 <fputc+0x38>
 e34:	a0 81       	ld	r26, Z
 e36:	b1 81       	ldd	r27, Z+1	; 0x01
 e38:	9d 01       	movw	r18, r26
 e3a:	2f 5f       	subi	r18, 0xFF	; 255
 e3c:	3f 4f       	sbci	r19, 0xFF	; 255
 e3e:	31 83       	std	Z+1, r19	; 0x01
 e40:	20 83       	st	Z, r18
 e42:	8c 93       	st	X, r24
 e44:	26 81       	ldd	r18, Z+6	; 0x06
 e46:	37 81       	ldd	r19, Z+7	; 0x07
 e48:	2f 5f       	subi	r18, 0xFF	; 255
 e4a:	3f 4f       	sbci	r19, 0xFF	; 255
 e4c:	37 83       	std	Z+7, r19	; 0x07
 e4e:	26 83       	std	Z+6, r18	; 0x06
 e50:	10 c0       	rjmp	.+32     	; 0xe72 <fputc+0x66>
 e52:	eb 01       	movw	r28, r22
 e54:	09 2f       	mov	r16, r25
 e56:	18 2f       	mov	r17, r24
 e58:	00 84       	ldd	r0, Z+8	; 0x08
 e5a:	f1 85       	ldd	r31, Z+9	; 0x09
 e5c:	e0 2d       	mov	r30, r0
 e5e:	09 95       	icall
 e60:	89 2b       	or	r24, r25
 e62:	e1 f6       	brne	.-72     	; 0xe1c <fputc+0x10>
 e64:	8e 81       	ldd	r24, Y+6	; 0x06
 e66:	9f 81       	ldd	r25, Y+7	; 0x07
 e68:	01 96       	adiw	r24, 0x01	; 1
 e6a:	9f 83       	std	Y+7, r25	; 0x07
 e6c:	8e 83       	std	Y+6, r24	; 0x06
 e6e:	81 2f       	mov	r24, r17
 e70:	90 2f       	mov	r25, r16
 e72:	df 91       	pop	r29
 e74:	cf 91       	pop	r28
 e76:	1f 91       	pop	r17
 e78:	0f 91       	pop	r16
 e7a:	08 95       	ret

00000e7c <__ultoa_invert>:
 e7c:	fa 01       	movw	r30, r20
 e7e:	aa 27       	eor	r26, r26
 e80:	28 30       	cpi	r18, 0x08	; 8
 e82:	51 f1       	breq	.+84     	; 0xed8 <__ultoa_invert+0x5c>
 e84:	20 31       	cpi	r18, 0x10	; 16
 e86:	81 f1       	breq	.+96     	; 0xee8 <__ultoa_invert+0x6c>
 e88:	e8 94       	clt
 e8a:	6f 93       	push	r22
 e8c:	6e 7f       	andi	r22, 0xFE	; 254
 e8e:	6e 5f       	subi	r22, 0xFE	; 254
 e90:	7f 4f       	sbci	r23, 0xFF	; 255
 e92:	8f 4f       	sbci	r24, 0xFF	; 255
 e94:	9f 4f       	sbci	r25, 0xFF	; 255
 e96:	af 4f       	sbci	r26, 0xFF	; 255
 e98:	b1 e0       	ldi	r27, 0x01	; 1
 e9a:	3e d0       	rcall	.+124    	; 0xf18 <__ultoa_invert+0x9c>
 e9c:	b4 e0       	ldi	r27, 0x04	; 4
 e9e:	3c d0       	rcall	.+120    	; 0xf18 <__ultoa_invert+0x9c>
 ea0:	67 0f       	add	r22, r23
 ea2:	78 1f       	adc	r23, r24
 ea4:	89 1f       	adc	r24, r25
 ea6:	9a 1f       	adc	r25, r26
 ea8:	a1 1d       	adc	r26, r1
 eaa:	68 0f       	add	r22, r24
 eac:	79 1f       	adc	r23, r25
 eae:	8a 1f       	adc	r24, r26
 eb0:	91 1d       	adc	r25, r1
 eb2:	a1 1d       	adc	r26, r1
 eb4:	6a 0f       	add	r22, r26
 eb6:	71 1d       	adc	r23, r1
 eb8:	81 1d       	adc	r24, r1
 eba:	91 1d       	adc	r25, r1
 ebc:	a1 1d       	adc	r26, r1
 ebe:	20 d0       	rcall	.+64     	; 0xf00 <__ultoa_invert+0x84>
 ec0:	09 f4       	brne	.+2      	; 0xec4 <__ultoa_invert+0x48>
 ec2:	68 94       	set
 ec4:	3f 91       	pop	r19
 ec6:	2a e0       	ldi	r18, 0x0A	; 10
 ec8:	26 9f       	mul	r18, r22
 eca:	11 24       	eor	r1, r1
 ecc:	30 19       	sub	r19, r0
 ece:	30 5d       	subi	r19, 0xD0	; 208
 ed0:	31 93       	st	Z+, r19
 ed2:	de f6       	brtc	.-74     	; 0xe8a <__ultoa_invert+0xe>
 ed4:	cf 01       	movw	r24, r30
 ed6:	08 95       	ret
 ed8:	46 2f       	mov	r20, r22
 eda:	47 70       	andi	r20, 0x07	; 7
 edc:	40 5d       	subi	r20, 0xD0	; 208
 ede:	41 93       	st	Z+, r20
 ee0:	b3 e0       	ldi	r27, 0x03	; 3
 ee2:	0f d0       	rcall	.+30     	; 0xf02 <__ultoa_invert+0x86>
 ee4:	c9 f7       	brne	.-14     	; 0xed8 <__ultoa_invert+0x5c>
 ee6:	f6 cf       	rjmp	.-20     	; 0xed4 <__ultoa_invert+0x58>
 ee8:	46 2f       	mov	r20, r22
 eea:	4f 70       	andi	r20, 0x0F	; 15
 eec:	40 5d       	subi	r20, 0xD0	; 208
 eee:	4a 33       	cpi	r20, 0x3A	; 58
 ef0:	18 f0       	brcs	.+6      	; 0xef8 <__ultoa_invert+0x7c>
 ef2:	49 5d       	subi	r20, 0xD9	; 217
 ef4:	31 fd       	sbrc	r19, 1
 ef6:	40 52       	subi	r20, 0x20	; 32
 ef8:	41 93       	st	Z+, r20
 efa:	02 d0       	rcall	.+4      	; 0xf00 <__ultoa_invert+0x84>
 efc:	a9 f7       	brne	.-22     	; 0xee8 <__ultoa_invert+0x6c>
 efe:	ea cf       	rjmp	.-44     	; 0xed4 <__ultoa_invert+0x58>
 f00:	b4 e0       	ldi	r27, 0x04	; 4
 f02:	a6 95       	lsr	r26
 f04:	97 95       	ror	r25
 f06:	87 95       	ror	r24
 f08:	77 95       	ror	r23
 f0a:	67 95       	ror	r22
 f0c:	ba 95       	dec	r27
 f0e:	c9 f7       	brne	.-14     	; 0xf02 <__ultoa_invert+0x86>
 f10:	00 97       	sbiw	r24, 0x00	; 0
 f12:	61 05       	cpc	r22, r1
 f14:	71 05       	cpc	r23, r1
 f16:	08 95       	ret
 f18:	9b 01       	movw	r18, r22
 f1a:	ac 01       	movw	r20, r24
 f1c:	0a 2e       	mov	r0, r26
 f1e:	06 94       	lsr	r0
 f20:	57 95       	ror	r21
 f22:	47 95       	ror	r20
 f24:	37 95       	ror	r19
 f26:	27 95       	ror	r18
 f28:	ba 95       	dec	r27
 f2a:	c9 f7       	brne	.-14     	; 0xf1e <__ultoa_invert+0xa2>
 f2c:	62 0f       	add	r22, r18
 f2e:	73 1f       	adc	r23, r19
 f30:	84 1f       	adc	r24, r20
 f32:	95 1f       	adc	r25, r21
 f34:	a0 1d       	adc	r26, r0
 f36:	08 95       	ret

00000f38 <_exit>:
 f38:	f8 94       	cli

00000f3a <__stop_program>:
 f3a:	ff cf       	rjmp	.-2      	; 0xf3a <__stop_program>
