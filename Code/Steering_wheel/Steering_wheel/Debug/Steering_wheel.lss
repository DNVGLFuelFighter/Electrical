
Steering_wheel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000f3e  00000fd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  00800124  00800124  00000ff6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001094  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e0e  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087c  00000000  00000000  00002002  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7e  00000000  00000000  0000287e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  000034fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038f  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079f  00000000  00000000  00003ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004342  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	bb c2       	rjmp	.+1398   	; 0x5b4 <__vector_15>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	0c c2       	rjmp	.+1048   	; 0x45e <__vector_17>
  46:	00 00       	nop
  48:	88 c0       	rjmp	.+272    	; 0x15a <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ee e3       	ldi	r30, 0x3E	; 62
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a4 32       	cpi	r26, 0x24	; 36
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a4 e2       	ldi	r26, 0x24	; 36
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a3 37       	cpi	r26, 0x73	; 115
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	6c d1       	rcall	.+728    	; 0x3a4 <main>
  cc:	36 c7       	rjmp	.+3692   	; 0xf3a <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_init>:
 *  Author: Vilius
 */ 
#include "adc.h"

void adc_init( void) {
	clear_bit(DDRF, DDF0);
  d0:	80 98       	cbi	0x10, 0	; 16
	/* Voltage ref AVcc with external capacitor on AREF pin */
	set_bit(ADMUX, REFS0);
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	/* Select prescaler to 64 --> conversion f= 125kHz */
	set_bit(ADCSRA, ADPS2);
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
	/* Enable the ADC */
	set_bit(ADCSRA, ADEN);
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <adc_sleep>:
	//set_bit(ADCSRA, ADIE);
}

void adc_sleep( void) {
	/* Wait for the conversion to complete */
	while(test_bit(ADCSRA, ADSC));
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	86 fd       	sbrc	r24, 6
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <adc_sleep+0x4>
	/* Turn off the ADC */
	clear_bit(ADCSRA, ADEN);
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8f 77       	andi	r24, 0x7F	; 127
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <adc_input>:
}

void adc_input( int chan, CAN_packet* p) {
 10a:	9c 01       	movw	r18, r24
	/*Select the reference channel. 1 = speed, 2 = acc */
	if(chan == 1)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	29 f4       	brne	.+10     	; 0x11c <adc_input+0x12>
		ADMUX |= 0x00;
 112:	ec e7       	ldi	r30, 0x7C	; 124
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 83       	st	Z, r24
 11a:	07 c0       	rjmp	.+14     	; 0x12a <adc_input+0x20>
	else if (chan == 2)
 11c:	02 97       	sbiw	r24, 0x02	; 2
 11e:	29 f4       	brne	.+10     	; 0x12a <adc_input+0x20>
		ADMUX |= 0x01;
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
	/* Start the conversion */
	set_bit(ADCSRA, ADSC);
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	90 64       	ori	r25, 0x40	; 64
 132:	90 83       	st	Z, r25
	/* Wait for the conversion to complete */
	while(test_bit(ADCSRA, ADSC));
 134:	90 81       	ld	r25, Z
 136:	96 fd       	sbrc	r25, 6
 138:	fd cf       	rjmp	.-6      	; 0x134 <adc_input+0x2a>
	
	unsigned int full_value = 0;
	full_value = ADC + 30;
 13a:	80 91 78 00 	lds	r24, 0x0078
 13e:	90 91 79 00 	lds	r25, 0x0079
// 	p->data[3] = (int)floor(temp_val);
// 	p->data[4] = (int)floor(temp_val);
// 	p->data[5] = (int)floor(temp_val);
// 	if(value_over_half)
// 		p->data[3] = (int)ceil(temp_val);
	p->data[chan] = (full_value);
 142:	fb 01       	movw	r30, r22
 144:	e2 0f       	add	r30, r18
 146:	f3 1f       	adc	r31, r19
 148:	4e 96       	adiw	r24, 0x1e	; 30
 14a:	8f 3f       	cpi	r24, 0xFF	; 255
 14c:	91 05       	cpc	r25, r1
 14e:	19 f0       	breq	.+6      	; 0x156 <adc_input+0x4c>
 150:	10 f0       	brcs	.+4      	; 0x156 <adc_input+0x4c>
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	83 83       	std	Z+3, r24	; 0x03
 158:	08 95       	ret

0000015a <__vector_18>:
		}
	CANGCON |= 0x02;
	CANGIE=(1<<ENIT) | (1<< ENRX);
}
	
void can_health(void) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	0b b6       	in	r0, 0x3b	; 59
 166:	0f 92       	push	r0
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	cf 93       	push	r28
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
 182:	ed ee       	ldi	r30, 0xED	; 237
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	c0 81       	ld	r28, Z
 188:	80 91 ec 00 	lds	r24, 0x00EC
 18c:	68 2f       	mov	r22, r24
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	80 7f       	andi	r24, 0xF0	; 240
 192:	80 83       	st	Z, r24
 194:	72 95       	swap	r23
 196:	62 95       	swap	r22
 198:	6f 70       	andi	r22, 0x0F	; 15
 19a:	67 27       	eor	r22, r23
 19c:	7f 70       	andi	r23, 0x0F	; 15
 19e:	67 27       	eor	r22, r23
 1a0:	80 91 ee 00 	lds	r24, 0x00EE
 1a4:	8f 75       	andi	r24, 0x5F	; 95
 1a6:	09 f0       	breq	.+2      	; 0x1aa <__vector_18+0x50>
 1a8:	98 95       	break
 1aa:	20 91 f2 00 	lds	r18, 0x00F2
 1ae:	80 91 f3 00 	lds	r24, 0x00F3
 1b2:	e4 e2       	ldi	r30, 0x24	; 36
 1b4:	f1 e0       	ldi	r31, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	22 95       	swap	r18
 1c6:	26 95       	lsr	r18
 1c8:	27 70       	andi	r18, 0x07	; 7
 1ca:	82 2b       	or	r24, r18
 1cc:	91 83       	std	Z+1, r25	; 0x01
 1ce:	80 83       	st	Z, r24
 1d0:	80 91 ef 00 	lds	r24, 0x00EF
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	82 83       	std	Z+2, r24	; 0x02
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	00 97       	sbiw	r24, 0x00	; 0
 1dc:	59 f0       	breq	.+22     	; 0x1f4 <__vector_18+0x9a>
 1de:	e7 e2       	ldi	r30, 0x27	; 39
 1e0:	f1 e0       	ldi	r31, 0x01	; 1
 1e2:	89 5d       	subi	r24, 0xD9	; 217
 1e4:	9e 4f       	sbci	r25, 0xFE	; 254
 1e6:	aa ef       	ldi	r26, 0xFA	; 250
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	2c 91       	ld	r18, X
 1ec:	21 93       	st	Z+, r18
 1ee:	e8 17       	cp	r30, r24
 1f0:	f9 07       	cpc	r31, r25
 1f2:	d9 f7       	brne	.-10     	; 0x1ea <__vector_18+0x90>
 1f4:	10 92 ee 00 	sts	0x00EE, r1
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	80 93 ef 00 	sts	0x00EF, r24
 1fe:	fb 01       	movw	r30, r22
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	e1 5d       	subi	r30, 0xD1	; 209
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	01 90       	ld	r0, Z+
 20a:	f0 81       	ld	r31, Z
 20c:	e0 2d       	mov	r30, r0
 20e:	84 e2       	ldi	r24, 0x24	; 36
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	09 95       	icall
 214:	c0 93 ed 00 	sts	0x00ED, r28
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	cf 91       	pop	r28
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	7f 91       	pop	r23
 228:	6f 91       	pop	r22
 22a:	5f 91       	pop	r21
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0b be       	out	0x3b, r0	; 59
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <can_tx>:
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	fb 01       	movw	r30, r22
 246:	20 81       	ld	r18, Z
 248:	31 81       	ldd	r19, Z+1	; 0x01
 24a:	21 15       	cp	r18, r1
 24c:	38 40       	sbci	r19, 0x08	; 8
 24e:	08 f0       	brcs	.+2      	; 0x252 <can_tx+0x12>
 250:	98 95       	break
 252:	92 81       	ldd	r25, Z+2	; 0x02
 254:	99 30       	cpi	r25, 0x09	; 9
 256:	08 f0       	brcs	.+2      	; 0x25a <can_tx+0x1a>
 258:	98 95       	break
 25a:	8f 30       	cpi	r24, 0x0F	; 15
 25c:	08 f0       	brcs	.+2      	; 0x260 <can_tx+0x20>
 25e:	98 95       	break
 260:	82 95       	swap	r24
 262:	80 7f       	andi	r24, 0xF0	; 240
 264:	80 93 ed 00 	sts	0x00ED, r24
 268:	80 91 ef 00 	lds	r24, 0x00EF
 26c:	80 7c       	andi	r24, 0xC0	; 192
 26e:	21 f0       	breq	.+8      	; 0x278 <can_tx+0x38>
 270:	80 91 ee 00 	lds	r24, 0x00EE
 274:	86 ff       	sbrs	r24, 6
 276:	55 c0       	rjmp	.+170    	; 0x322 <can_tx+0xe2>
 278:	10 92 ee 00 	sts	0x00EE, r1
 27c:	10 92 ef 00 	sts	0x00EF, r1
 280:	82 81       	ldd	r24, Z+2	; 0x02
 282:	8f 3f       	cpi	r24, 0xFF	; 255
 284:	61 f1       	breq	.+88     	; 0x2de <can_tx+0x9e>
 286:	80 81       	ld	r24, Z
 288:	91 81       	ldd	r25, Z+1	; 0x01
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	96 95       	lsr	r25
 294:	87 95       	ror	r24
 296:	80 93 f3 00 	sts	0x00F3, r24
 29a:	80 81       	ld	r24, Z
 29c:	82 95       	swap	r24
 29e:	88 0f       	add	r24, r24
 2a0:	80 7e       	andi	r24, 0xE0	; 224
 2a2:	80 93 f2 00 	sts	0x00F2, r24
 2a6:	10 92 f1 00 	sts	0x00F1, r1
 2aa:	10 92 f0 00 	sts	0x00F0, r1
 2ae:	22 81       	ldd	r18, Z+2	; 0x02
 2b0:	22 23       	and	r18, r18
 2b2:	79 f0       	breq	.+30     	; 0x2d2 <can_tx+0x92>
 2b4:	df 01       	movw	r26, r30
 2b6:	13 96       	adiw	r26, 0x03	; 3
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	ca ef       	ldi	r28, 0xFA	; 250
 2be:	d0 e0       	ldi	r29, 0x00	; 0
 2c0:	2d 91       	ld	r18, X+
 2c2:	28 83       	st	Y, r18
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	22 81       	ldd	r18, Z+2	; 0x02
 2c8:	42 2f       	mov	r20, r18
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	84 17       	cp	r24, r20
 2ce:	95 07       	cpc	r25, r21
 2d0:	b8 f3       	brcs	.-18     	; 0x2c0 <can_tx+0x80>
 2d2:	ef ee       	ldi	r30, 0xEF	; 239
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	28 2b       	or	r18, r24
 2da:	20 83       	st	Z, r18
 2dc:	1b c0       	rjmp	.+54     	; 0x314 <can_tx+0xd4>
 2de:	80 81       	ld	r24, Z
 2e0:	91 81       	ldd	r25, Z+1	; 0x01
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	96 95       	lsr	r25
 2ec:	87 95       	ror	r24
 2ee:	80 93 f3 00 	sts	0x00F3, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	82 95       	swap	r24
 2f6:	88 0f       	add	r24, r24
 2f8:	80 7e       	andi	r24, 0xE0	; 224
 2fa:	80 93 f2 00 	sts	0x00F2, r24
 2fe:	10 92 f1 00 	sts	0x00F1, r1
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	80 93 f0 00 	sts	0x00F0, r24
 308:	af ee       	ldi	r26, 0xEF	; 239
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	9c 91       	ld	r25, X
 30e:	82 81       	ldd	r24, Z+2	; 0x02
 310:	89 2b       	or	r24, r25
 312:	8c 93       	st	X, r24
 314:	ef ee       	ldi	r30, 0xEF	; 239
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	80 83       	st	Z, r24
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	01 c0       	rjmp	.+2      	; 0x324 <can_tx+0xe4>
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <can_init>:
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	86 e0       	ldi	r24, 0x06	; 6
 330:	80 93 e2 00 	sts	0x00E2, r24
 334:	8c e0       	ldi	r24, 0x0C	; 12
 336:	80 93 e3 00 	sts	0x00E3, r24
 33a:	8a e5       	ldi	r24, 0x5A	; 90
 33c:	80 93 e4 00 	sts	0x00E4, r24
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	cd ee       	ldi	r28, 0xED	; 237
 344:	d0 e0       	ldi	r29, 0x00	; 0
 346:	ae ee       	ldi	r26, 0xEE	; 238
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	ef ee       	ldi	r30, 0xEF	; 239
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	98 2f       	mov	r25, r24
 350:	92 95       	swap	r25
 352:	90 7f       	andi	r25, 0xF0	; 240
 354:	98 83       	st	Y, r25
 356:	1c 92       	st	X, r1
 358:	10 82       	st	Z, r1
 35a:	8f 5f       	subi	r24, 0xFF	; 255
 35c:	8f 30       	cpi	r24, 0x0F	; 15
 35e:	b9 f7       	brne	.-18     	; 0x34e <can_init+0x24>
 360:	e8 ed       	ldi	r30, 0xD8	; 216
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	82 60       	ori	r24, 0x02	; 2
 368:	80 83       	st	Z, r24
 36a:	80 ea       	ldi	r24, 0xA0	; 160
 36c:	80 93 db 00 	sts	0x00DB, r24
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <can_packet_send>:
	*/
}

BOOL can_packet_send(char mob, CAN_packet *packet) {
	/* Clear global interrupts */
	cli();
 376:	f8 94       	cli
	BOOL result = can_tx(mob, packet);
 378:	63 df       	rcall	.-314    	; 0x240 <can_tx>
	/* Set global interrupts */
	sei();
 37a:	78 94       	sei
	return result;
}
 37c:	08 95       	ret

0000037e <inits>:
#include <stdio.h>
#include "timer1.h"
#include "timer0.h"

void inits( void) {
	can_init();
 37e:	d5 df       	rcall	.-86     	; 0x32a <can_init>
	USART_init(MYUBRR, true);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	83 e3       	ldi	r24, 0x33	; 51
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	7d d1       	rcall	.+762    	; 0x682 <USART_init>
	sw_init();
 388:	10 d0       	rcall	.+32     	; 0x3aa <sw_init>
	adc_init();
 38a:	a2 de       	rcall	.-700    	; 0xd0 <adc_init>
	timer1_init();
 38c:	f8 d0       	rcall	.+496    	; 0x57e <timer1_init>
	timer0_init();
 38e:	44 d0       	rcall	.+136    	; 0x418 <timer0_init>
	printf("\r\nSteering wheel initialized");
 390:	86 e0       	ldi	r24, 0x06	; 6
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	9f 93       	push	r25
 396:	8f 93       	push	r24
 398:	d5 d1       	rcall	.+938    	; 0x744 <printf>
	sei();
 39a:	78 94       	sei
	/* I'm alive LED */
	set_bit(DDRB, PB6);
 39c:	26 9a       	sbi	0x04, 6	; 4
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	08 95       	ret

000003a4 <main>:
}

int main(void)
{
	/* Initialize module */
	inits();
 3a4:	ec df       	rcall	.-40     	; 0x37e <inits>

    for(;;) {
		asm("sleep");;
 3a6:	88 95       	sleep
	}
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <main+0x2>

000003aa <sw_init>:
#include "steering_wheel.h"

void sw_init( void) {	
	/* Indicators init */
	/* Set PE4 and PD0 as inputs */
	clear_bit(DDRD, DDD0);
 3aa:	50 98       	cbi	0x0a, 0	; 10
	clear_bit(DDRE, DDE4);
 3ac:	6c 98       	cbi	0x0d, 4	; 13
	/* Set PE4 and PD0 as high (pull up res) */
	set_bit(PORTD, PD0);
 3ae:	58 9a       	sbi	0x0b, 0	; 11
	set_bit(PORTE, PE4);	
 3b0:	74 9a       	sbi	0x0e, 4	; 14
	
	/* Wipers init */
	clear_bit(DDRE, DDE5);
 3b2:	6d 98       	cbi	0x0d, 5	; 13
	set_bit(PORTE, PE5);
 3b4:	75 9a       	sbi	0x0e, 5	; 14
	
	/* Horn init */
	clear_bit(DDRB, DDB0);
 3b6:	20 98       	cbi	0x04, 0	; 4
	set_bit(PORTB, PB0);
 3b8:	28 9a       	sbi	0x05, 0	; 5
	
	/* Deadman */
	clear_bit(DDRB, DDB4);
 3ba:	24 98       	cbi	0x04, 4	; 4
	set_bit(PORTB, PB4);
 3bc:	2c 9a       	sbi	0x05, 4	; 5
	
	/* Speed potentiometer uses adc_init() */
	
	/* Cruise control */
	clear_bit(DDRB, DDB2);
 3be:	22 98       	cbi	0x04, 2	; 4
	clear_bit(DDRB, DDB1);
 3c0:	21 98       	cbi	0x04, 1	; 4
	set_bit(PORTB, PB2);
 3c2:	2a 9a       	sbi	0x05, 2	; 5
	set_bit(PORTB, PB1);	
 3c4:	29 9a       	sbi	0x05, 1	; 5
 3c6:	08 95       	ret

000003c8 <sw_input>:
}

void sw_input( CAN_packet* p) {	
 3c8:	fc 01       	movw	r30, r24
	/* Initialize data */
	p->data[0] = 0;
 3ca:	13 82       	std	Z+3, r1	; 0x03
	p->data[1] = 0;
 3cc:	14 82       	std	Z+4, r1	; 0x04
	p->data[2] = 0;
 3ce:	15 82       	std	Z+5, r1	; 0x05
	/* Read right/left indicator */
	if(!test_bit(PIND, PD0))
 3d0:	48 99       	sbic	0x09, 0	; 9
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <sw_input+0x12>
		p->data[0] |= (1<<0);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	83 83       	std	Z+3, r24	; 0x03
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <sw_input+0x1a>
	else if (!test_bit(PINE, PE4))
 3da:	64 99       	sbic	0x0c, 4	; 12
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <sw_input+0x1a>
		p->data[0] |= (1<<1);
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	83 83       	std	Z+3, r24	; 0x03
	/* Read cruise control */
	if(!test_bit(PINB, PB2)) // CC plus
 3e2:	1a 99       	sbic	0x03, 2	; 3
 3e4:	04 c0       	rjmp	.+8      	; 0x3ee <sw_input+0x26>
		p->data[0] |= (1<<2);
 3e6:	83 81       	ldd	r24, Z+3	; 0x03
 3e8:	84 60       	ori	r24, 0x04	; 4
 3ea:	83 83       	std	Z+3, r24	; 0x03
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <sw_input+0x30>
	else if(!test_bit(PINB, PB1)) // CC minus
 3ee:	19 99       	sbic	0x03, 1	; 3
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <sw_input+0x30>
		p->data[0] |= (1<<3);	
 3f2:	83 81       	ldd	r24, Z+3	; 0x03
 3f4:	88 60       	ori	r24, 0x08	; 8
 3f6:	83 83       	std	Z+3, r24	; 0x03
	/* Read horn */
	if (!test_bit(PINB, PB0))
 3f8:	18 99       	sbic	0x03, 0	; 3
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <sw_input+0x3a>
		p->data[0] |= (1<<4);
 3fc:	83 81       	ldd	r24, Z+3	; 0x03
 3fe:	80 61       	ori	r24, 0x10	; 16
 400:	83 83       	std	Z+3, r24	; 0x03
	/* Read whiper */
	if (!test_bit(PINE, PE5))
 402:	65 99       	sbic	0x0c, 5	; 12
 404:	03 c0       	rjmp	.+6      	; 0x40c <sw_input+0x44>
		p->data[0] |= (1<<5);
 406:	83 81       	ldd	r24, Z+3	; 0x03
 408:	80 62       	ori	r24, 0x20	; 32
 40a:	83 83       	std	Z+3, r24	; 0x03
	/* Read CC deadman */
	if (!test_bit(PINB, PB4))
 40c:	1c 99       	sbic	0x03, 4	; 3
 40e:	03 c0       	rjmp	.+6      	; 0x416 <sw_input+0x4e>
		p->data[0] |= (1<<6);
 410:	83 81       	ldd	r24, Z+3	; 0x03
 412:	80 64       	ori	r24, 0x40	; 64
 414:	83 83       	std	Z+3, r24	; 0x03
 416:	08 95       	ret

00000418 <timer0_init>:
CAN_packet updated_msg;


void timer0_init( void) {
	/* clk/1024 */
	set_bit(TCCR0A, CS02);
 418:	84 b5       	in	r24, 0x24	; 36
 41a:	84 60       	ori	r24, 0x04	; 4
 41c:	84 bd       	out	0x24, r24	; 36
	set_bit(TCCR0A, CS00);
 41e:	84 b5       	in	r24, 0x24	; 36
 420:	81 60       	ori	r24, 0x01	; 1
 422:	84 bd       	out	0x24, r24	; 36
	/* Enable timer overflow */
	set_bit(TIMSK0, TOIE0);
 424:	ee e6       	ldi	r30, 0x6E	; 110
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	80 83       	st	Z, r24
	
	current_msg.id = ID_steeringWheel;
 42e:	ee e5       	ldi	r30, 0x5E	; 94
 430:	f1 e0       	ldi	r31, 0x01	; 1
 432:	2d e0       	ldi	r18, 0x0D	; 13
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	31 83       	std	Z+1, r19	; 0x01
 438:	20 83       	st	Z, r18
	current_msg.length = 3;
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	82 83       	std	Z+2, r24	; 0x02
	current_msg.data[0] = 0;
 43e:	13 82       	std	Z+3, r1	; 0x03
	current_msg.data[1] = 0;
 440:	14 82       	std	Z+4, r1	; 0x04
	current_msg.data[2] = 0;
 442:	15 82       	std	Z+5, r1	; 0x05
	updated_msg.id = ID_steeringWheel;
 444:	e3 e5       	ldi	r30, 0x53	; 83
 446:	f1 e0       	ldi	r31, 0x01	; 1
 448:	31 83       	std	Z+1, r19	; 0x01
 44a:	20 83       	st	Z, r18
	updated_msg.length = 3;
 44c:	82 83       	std	Z+2, r24	; 0x02
	updated_msg.data[0] = 0;
 44e:	13 82       	std	Z+3, r1	; 0x03
	updated_msg.data[1] = 0;
 450:	14 82       	std	Z+4, r1	; 0x04
	current_msg.data[2] = 0;
	ret = FALSE;
 452:	10 92 52 01 	sts	0x0152, r1
	turned = TRUE;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	80 93 51 01 	sts	0x0151, r24
 45c:	08 95       	ret

0000045e <__vector_17>:
}

ISR(TIMER0_OVF_vect) {
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	0b b6       	in	r0, 0x3b	; 59
 46a:	0f 92       	push	r0
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
	/* Update one CAN_packet */
	cli();
 484:	f8 94       	cli
	sw_input(&updated_msg);	
 486:	83 e5       	ldi	r24, 0x53	; 83
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	9e df       	rcall	.-196    	; 0x3c8 <sw_input>
	adc_init();
 48c:	21 de       	rcall	.-958    	; 0xd0 <adc_init>
	adc_input(1, &updated_msg);
 48e:	63 e5       	ldi	r22, 0x53	; 83
 490:	71 e0       	ldi	r23, 0x01	; 1
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	39 de       	rcall	.-910    	; 0x10a <adc_input>
	//adc_input(2, &updated_msg);
	adc_sleep();
 498:	2d de       	rcall	.-934    	; 0xf4 <adc_sleep>
	if(((test_bit(updated_msg.data[0], 0)) || (test_bit(updated_msg.data[0], 1))) && (updated_msg.data[2] > 30) && !turned)
 49a:	80 91 56 01 	lds	r24, 0x0156
 49e:	98 2f       	mov	r25, r24
 4a0:	93 70       	andi	r25, 0x03	; 3
 4a2:	61 f0       	breq	.+24     	; 0x4bc <__vector_17+0x5e>
 4a4:	90 91 58 01 	lds	r25, 0x0158
 4a8:	9f 31       	cpi	r25, 0x1F	; 31
 4aa:	40 f0       	brcs	.+16     	; 0x4bc <__vector_17+0x5e>
 4ac:	90 91 51 01 	lds	r25, 0x0151
 4b0:	91 11       	cpse	r25, r1
 4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <__vector_17+0x66>
		turned = TRUE;
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	90 93 51 01 	sts	0x0151, r25
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <__vector_17+0x66>
	if(turned && (updated_msg.data[2] < 10)) {
 4bc:	90 91 51 01 	lds	r25, 0x0151
 4c0:	99 23       	and	r25, r25
 4c2:	49 f0       	breq	.+18     	; 0x4d6 <__vector_17+0x78>
 4c4:	90 91 58 01 	lds	r25, 0x0158
 4c8:	9a 30       	cpi	r25, 0x0A	; 10
 4ca:	28 f4       	brcc	.+10     	; 0x4d6 <__vector_17+0x78>
		turned = FALSE;
 4cc:	10 92 51 01 	sts	0x0151, r1
		clear_bit(updated_msg.data[0], 0);
		clear_bit(updated_msg.data[0], 1);
 4d0:	8c 7f       	andi	r24, 0xFC	; 252
 4d2:	80 93 56 01 	sts	0x0156, r24
	}		
	sei();
 4d6:	78 94       	sei
	/* Compare the two packets */
	diff_buttons = memcmp(&current_msg.data[0], &updated_msg.data[0], 1);
 4d8:	ee e5       	ldi	r30, 0x5E	; 94
 4da:	f1 e0       	ldi	r31, 0x01	; 1
 4dc:	23 81       	ldd	r18, Z+3	; 0x03
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	a3 e5       	ldi	r26, 0x53	; 83
 4e2:	b1 e0       	ldi	r27, 0x01	; 1
 4e4:	13 96       	adiw	r26, 0x03	; 3
 4e6:	8c 91       	ld	r24, X
 4e8:	13 97       	sbiw	r26, 0x03	; 3
 4ea:	28 1b       	sub	r18, r24
 4ec:	31 09       	sbc	r19, r1
 4ee:	30 93 4e 01 	sts	0x014E, r19
 4f2:	20 93 4d 01 	sts	0x014D, r18
	diff_speed = memcmp(&updated_msg.data[1], &current_msg.data[1], 1);
 4f6:	14 96       	adiw	r26, 0x04	; 4
 4f8:	8c 91       	ld	r24, X
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	44 81       	ldd	r20, Z+4	; 0x04
 4fe:	84 1b       	sub	r24, r20
 500:	91 09       	sbc	r25, r1
 502:	90 93 50 01 	sts	0x0150, r25
 506:	80 93 4f 01 	sts	0x014F, r24

	if (((diff_speed < 100) &&(abs(diff_speed) > 3)) || abs(diff_buttons)) {
 50a:	84 36       	cpi	r24, 0x64	; 100
 50c:	91 05       	cpc	r25, r1
 50e:	54 f4       	brge	.+20     	; 0x524 <__vector_17+0xc6>
 510:	ac 01       	movw	r20, r24
 512:	99 23       	and	r25, r25
 514:	24 f4       	brge	.+8      	; 0x51e <__vector_17+0xc0>
 516:	44 27       	eor	r20, r20
 518:	55 27       	eor	r21, r21
 51a:	48 1b       	sub	r20, r24
 51c:	59 0b       	sbc	r21, r25
 51e:	44 30       	cpi	r20, 0x04	; 4
 520:	51 05       	cpc	r21, r1
 522:	14 f4       	brge	.+4      	; 0x528 <__vector_17+0xca>
 524:	23 2b       	or	r18, r19
 526:	79 f0       	breq	.+30     	; 0x546 <__vector_17+0xe8>
// 		printf("\r\nCurrent ID %d, d[0] %d, d[1] %d", current_msg.id, current_msg.data[0], current_msg.data[1]);
// 		printf("\r\nUpdated ID %d, d[0] %d, d[1] %d", updated_msg.id, updated_msg.data[0], updated_msg.data[1]);
// 		printf("\r\ndiff_buttons - %d", diff_buttons);
// 		printf("\r\ndiff_speed - %d\n", diff_speed);
		/* Send a message with new data */
		ret = can_packet_send(0, &updated_msg);
 528:	63 e5       	ldi	r22, 0x53	; 83
 52a:	71 e0       	ldi	r23, 0x01	; 1
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	23 df       	rcall	.-442    	; 0x376 <can_packet_send>
 530:	80 93 52 01 	sts	0x0152, r24
		current_msg = updated_msg;	
 534:	8b e0       	ldi	r24, 0x0B	; 11
 536:	e3 e5       	ldi	r30, 0x53	; 83
 538:	f1 e0       	ldi	r31, 0x01	; 1
 53a:	ae e5       	ldi	r26, 0x5E	; 94
 53c:	b1 e0       	ldi	r27, 0x01	; 1
 53e:	01 90       	ld	r0, Z+
 540:	0d 92       	st	X+, r0
 542:	8a 95       	dec	r24
 544:	e1 f7       	brne	.-8      	; 0x53e <__vector_17+0xe0>
// 	printf("\r\nMessage ID - %d", updated_msg.id);
// 	printf("\r\nMessage length - %d", updated_msg.length);
// 	for(int i = 0; i < 3; i++)
// 	printf("\r\nData[%d] received - %u", i, updated_msg.data[i]);
// 	printf("\n");
	if (ret) {
 546:	80 91 52 01 	lds	r24, 0x0152
 54a:	88 23       	and	r24, r24
 54c:	21 f0       	breq	.+8      	; 0x556 <__vector_17+0xf8>
		set_bit(DDRB, PB7);
 54e:	27 9a       	sbi	0x04, 7	; 4
		ret = FALSE;
 550:	10 92 52 01 	sts	0x0152, r1
 554:	01 c0       	rjmp	.+2      	; 0x558 <__vector_17+0xfa>
	} else
	clear_bit(DDRB, PB7);
 556:	27 98       	cbi	0x04, 7	; 4
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0b be       	out	0x3b, r0	; 59
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <timer1_init>:
	/* DIsable interrupts */
	cli(); // same as cli()?
	/* Set TCNT1 to i */
	TCNT1 = i;
	/* Restore global interrupt flag */
	SREG = sreg;
 57e:	e1 e8       	ldi	r30, 0x81	; 129
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	82 60       	ori	r24, 0x02	; 2
 586:	80 83       	st	Z, r24
 588:	80 81       	ld	r24, Z
 58a:	81 60       	ori	r24, 0x01	; 1
 58c:	80 83       	st	Z, r24
 58e:	10 92 85 00 	sts	0x0085, r1
 592:	10 92 84 00 	sts	0x0084, r1
 596:	ef e6       	ldi	r30, 0x6F	; 111
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	80 81       	ld	r24, Z
 59c:	81 60       	ori	r24, 0x01	; 1
 59e:	80 83       	st	Z, r24
 5a0:	78 94       	sei
 5a2:	e0 e8       	ldi	r30, 0x80	; 128
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	80 83       	st	Z, r24
 5ac:	80 81       	ld	r24, Z
 5ae:	8f 7b       	andi	r24, 0xBF	; 191
 5b0:	80 83       	st	Z, r24
 5b2:	08 95       	ret

000005b4 <__vector_15>:
}


ISR(TIMER1_OVF_vect) {
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	0b b6       	in	r0, 0x3b	; 59
 5c0:	0f 92       	push	r0
 5c2:	2f 93       	push	r18
 5c4:	3f 93       	push	r19
 5c6:	4f 93       	push	r20
 5c8:	5f 93       	push	r21
 5ca:	6f 93       	push	r22
 5cc:	7f 93       	push	r23
 5ce:	8f 93       	push	r24
 5d0:	9f 93       	push	r25
 5d2:	af 93       	push	r26
 5d4:	bf 93       	push	r27
 5d6:	ef 93       	push	r30
 5d8:	ff 93       	push	r31
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	2b 97       	sbiw	r28, 0x0b	; 11
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	cd bf       	out	0x3d, r28	; 61
	/* Send a "I'm alive" message with the data */
	CAN_packet msg;
	BOOL ret = FALSE;
	msg.id = ID_power;
 5e8:	8c e0       	ldi	r24, 0x0C	; 12
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	9a 83       	std	Y+2, r25	; 0x02
 5ee:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 4;
 5f0:	84 e0       	ldi	r24, 0x04	; 4
 5f2:	8b 83       	std	Y+3, r24	; 0x03
	/* Initialize data */
	msg.data[0] = 0;
 5f4:	1c 82       	std	Y+4, r1	; 0x04
	msg.data[1] = 0;
 5f6:	1d 82       	std	Y+5, r1	; 0x05
	msg.data[2] = 0;
 5f8:	1e 82       	std	Y+6, r1	; 0x06
	cli();
 5fa:	f8 94       	cli
	sw_input(&msg);
 5fc:	ce 01       	movw	r24, r28
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	e3 de       	rcall	.-570    	; 0x3c8 <sw_input>
	adc_init();
 602:	66 dd       	rcall	.-1332   	; 0xd0 <adc_init>
	adc_input(1, &msg);
 604:	be 01       	movw	r22, r28
 606:	6f 5f       	subi	r22, 0xFF	; 255
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	7d dd       	rcall	.-1286   	; 0x10a <adc_input>
	//adc_input(2, &msg);
	adc_sleep();
 610:	71 dd       	rcall	.-1310   	; 0xf4 <adc_sleep>
	ret = can_packet_send(0, &msg);
 612:	be 01       	movw	r22, r28
 614:	6f 5f       	subi	r22, 0xFF	; 255
 616:	7f 4f       	sbci	r23, 0xFF	; 255
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	ad de       	rcall	.-678    	; 0x376 <can_packet_send>
	sei();
 61c:	78 94       	sei
	if(ret) {
 61e:	88 23       	and	r24, r24
 620:	21 f0       	breq	.+8      	; 0x62a <__vector_15+0x76>
		toggle_bit(DDRB, PB5);
 622:	94 b1       	in	r25, 0x04	; 4
 624:	80 e2       	ldi	r24, 0x20	; 32
 626:	89 27       	eor	r24, r25
 628:	84 b9       	out	0x04, r24	; 4
	}
	ret = FALSE;
 62a:	2b 96       	adiw	r28, 0x0b	; 11
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	f8 94       	cli
 630:	de bf       	out	0x3e, r29	; 62
 632:	0f be       	out	0x3f, r0	; 63
 634:	cd bf       	out	0x3d, r28	; 61
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	ff 91       	pop	r31
 63c:	ef 91       	pop	r30
 63e:	bf 91       	pop	r27
 640:	af 91       	pop	r26
 642:	9f 91       	pop	r25
 644:	8f 91       	pop	r24
 646:	7f 91       	pop	r23
 648:	6f 91       	pop	r22
 64a:	5f 91       	pop	r21
 64c:	4f 91       	pop	r20
 64e:	3f 91       	pop	r19
 650:	2f 91       	pop	r18
 652:	0f 90       	pop	r0
 654:	0b be       	out	0x3b, r0	; 59
 656:	0f 90       	pop	r0
 658:	0f be       	out	0x3f, r0	; 63
 65a:	0f 90       	pop	r0
 65c:	1f 90       	pop	r1
 65e:	18 95       	reti

00000660 <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 660:	e0 ec       	ldi	r30, 0xC0	; 192
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	90 81       	ld	r25, Z
 666:	95 ff       	sbrs	r25, 5
 668:	fd cf       	rjmp	.-6      	; 0x664 <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 66a:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	08 95       	ret

00000672 <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 672:	e0 ec       	ldi	r30, 0xC0	; 192
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	88 23       	and	r24, r24
 67a:	ec f7       	brge	.-6      	; 0x676 <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 67c:	80 91 c6 00 	lds	r24, 0x00C6
}
 680:	08 95       	ret

00000682 <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 682:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 686:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 68a:	86 e0       	ldi	r24, 0x06	; 6
 68c:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 690:	66 23       	and	r22, r22
 692:	41 f0       	breq	.+16     	; 0x6a4 <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 694:	e1 ec       	ldi	r30, 0xC1	; 193
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	80 61       	ori	r24, 0x10	; 16
 69c:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 69e:	80 81       	ld	r24, Z
 6a0:	88 60       	ori	r24, 0x08	; 8
 6a2:	80 83       	st	Z, r24
	}
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 6a4:	69 e3       	ldi	r22, 0x39	; 57
 6a6:	73 e0       	ldi	r23, 0x03	; 3
 6a8:	80 e3       	ldi	r24, 0x30	; 48
 6aa:	93 e0       	ldi	r25, 0x03	; 3
 6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <fdevopen>
 6ae:	08 95       	ret

000006b0 <fdevopen>:
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	00 97       	sbiw	r24, 0x00	; 0
 6ba:	31 f4       	brne	.+12     	; 0x6c8 <fdevopen+0x18>
 6bc:	61 15       	cp	r22, r1
 6be:	71 05       	cpc	r23, r1
 6c0:	19 f4       	brne	.+6      	; 0x6c8 <fdevopen+0x18>
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	39 c0       	rjmp	.+114    	; 0x73a <fdevopen+0x8a>
 6c8:	8b 01       	movw	r16, r22
 6ca:	ec 01       	movw	r28, r24
 6cc:	6e e0       	ldi	r22, 0x0E	; 14
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	38 d2       	rcall	.+1136   	; 0xb46 <calloc>
 6d6:	fc 01       	movw	r30, r24
 6d8:	89 2b       	or	r24, r25
 6da:	99 f3       	breq	.-26     	; 0x6c2 <fdevopen+0x12>
 6dc:	80 e8       	ldi	r24, 0x80	; 128
 6de:	83 83       	std	Z+3, r24	; 0x03
 6e0:	01 15       	cp	r16, r1
 6e2:	11 05       	cpc	r17, r1
 6e4:	71 f0       	breq	.+28     	; 0x702 <fdevopen+0x52>
 6e6:	13 87       	std	Z+11, r17	; 0x0b
 6e8:	02 87       	std	Z+10, r16	; 0x0a
 6ea:	81 e8       	ldi	r24, 0x81	; 129
 6ec:	83 83       	std	Z+3, r24	; 0x03
 6ee:	80 91 69 01 	lds	r24, 0x0169
 6f2:	90 91 6a 01 	lds	r25, 0x016A
 6f6:	89 2b       	or	r24, r25
 6f8:	21 f4       	brne	.+8      	; 0x702 <fdevopen+0x52>
 6fa:	f0 93 6a 01 	sts	0x016A, r31
 6fe:	e0 93 69 01 	sts	0x0169, r30
 702:	20 97       	sbiw	r28, 0x00	; 0
 704:	c9 f0       	breq	.+50     	; 0x738 <fdevopen+0x88>
 706:	d1 87       	std	Z+9, r29	; 0x09
 708:	c0 87       	std	Z+8, r28	; 0x08
 70a:	83 81       	ldd	r24, Z+3	; 0x03
 70c:	82 60       	ori	r24, 0x02	; 2
 70e:	83 83       	std	Z+3, r24	; 0x03
 710:	80 91 6b 01 	lds	r24, 0x016B
 714:	90 91 6c 01 	lds	r25, 0x016C
 718:	89 2b       	or	r24, r25
 71a:	71 f4       	brne	.+28     	; 0x738 <fdevopen+0x88>
 71c:	f0 93 6c 01 	sts	0x016C, r31
 720:	e0 93 6b 01 	sts	0x016B, r30
 724:	80 91 6d 01 	lds	r24, 0x016D
 728:	90 91 6e 01 	lds	r25, 0x016E
 72c:	89 2b       	or	r24, r25
 72e:	21 f4       	brne	.+8      	; 0x738 <fdevopen+0x88>
 730:	f0 93 6e 01 	sts	0x016E, r31
 734:	e0 93 6d 01 	sts	0x016D, r30
 738:	cf 01       	movw	r24, r30
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	1f 91       	pop	r17
 740:	0f 91       	pop	r16
 742:	08 95       	ret

00000744 <printf>:
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	ae 01       	movw	r20, r28
 74e:	4b 5f       	subi	r20, 0xFB	; 251
 750:	5f 4f       	sbci	r21, 0xFF	; 255
 752:	fa 01       	movw	r30, r20
 754:	61 91       	ld	r22, Z+
 756:	71 91       	ld	r23, Z+
 758:	af 01       	movw	r20, r30
 75a:	80 91 6b 01 	lds	r24, 0x016B
 75e:	90 91 6c 01 	lds	r25, 0x016C
 762:	03 d0       	rcall	.+6      	; 0x76a <vfprintf>
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	08 95       	ret

0000076a <vfprintf>:
 76a:	2f 92       	push	r2
 76c:	3f 92       	push	r3
 76e:	4f 92       	push	r4
 770:	5f 92       	push	r5
 772:	6f 92       	push	r6
 774:	7f 92       	push	r7
 776:	8f 92       	push	r8
 778:	9f 92       	push	r9
 77a:	af 92       	push	r10
 77c:	bf 92       	push	r11
 77e:	cf 92       	push	r12
 780:	df 92       	push	r13
 782:	ef 92       	push	r14
 784:	ff 92       	push	r15
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
 792:	2c 97       	sbiw	r28, 0x0c	; 12
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	f8 94       	cli
 798:	de bf       	out	0x3e, r29	; 62
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	cd bf       	out	0x3d, r28	; 61
 79e:	7c 01       	movw	r14, r24
 7a0:	6b 01       	movw	r12, r22
 7a2:	8a 01       	movw	r16, r20
 7a4:	fc 01       	movw	r30, r24
 7a6:	17 82       	std	Z+7, r1	; 0x07
 7a8:	16 82       	std	Z+6, r1	; 0x06
 7aa:	83 81       	ldd	r24, Z+3	; 0x03
 7ac:	81 ff       	sbrs	r24, 1
 7ae:	b0 c1       	rjmp	.+864    	; 0xb10 <vfprintf+0x3a6>
 7b0:	ce 01       	movw	r24, r28
 7b2:	01 96       	adiw	r24, 0x01	; 1
 7b4:	4c 01       	movw	r8, r24
 7b6:	f7 01       	movw	r30, r14
 7b8:	93 81       	ldd	r25, Z+3	; 0x03
 7ba:	f6 01       	movw	r30, r12
 7bc:	93 fd       	sbrc	r25, 3
 7be:	85 91       	lpm	r24, Z+
 7c0:	93 ff       	sbrs	r25, 3
 7c2:	81 91       	ld	r24, Z+
 7c4:	6f 01       	movw	r12, r30
 7c6:	88 23       	and	r24, r24
 7c8:	09 f4       	brne	.+2      	; 0x7cc <vfprintf+0x62>
 7ca:	9e c1       	rjmp	.+828    	; 0xb08 <vfprintf+0x39e>
 7cc:	85 32       	cpi	r24, 0x25	; 37
 7ce:	39 f4       	brne	.+14     	; 0x7de <vfprintf+0x74>
 7d0:	93 fd       	sbrc	r25, 3
 7d2:	85 91       	lpm	r24, Z+
 7d4:	93 ff       	sbrs	r25, 3
 7d6:	81 91       	ld	r24, Z+
 7d8:	6f 01       	movw	r12, r30
 7da:	85 32       	cpi	r24, 0x25	; 37
 7dc:	21 f4       	brne	.+8      	; 0x7e6 <vfprintf+0x7c>
 7de:	b7 01       	movw	r22, r14
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	15 d3       	rcall	.+1578   	; 0xe0e <fputc>
 7e4:	e8 cf       	rjmp	.-48     	; 0x7b6 <vfprintf+0x4c>
 7e6:	51 2c       	mov	r5, r1
 7e8:	31 2c       	mov	r3, r1
 7ea:	20 e0       	ldi	r18, 0x00	; 0
 7ec:	20 32       	cpi	r18, 0x20	; 32
 7ee:	a0 f4       	brcc	.+40     	; 0x818 <vfprintf+0xae>
 7f0:	8b 32       	cpi	r24, 0x2B	; 43
 7f2:	69 f0       	breq	.+26     	; 0x80e <vfprintf+0xa4>
 7f4:	30 f4       	brcc	.+12     	; 0x802 <vfprintf+0x98>
 7f6:	80 32       	cpi	r24, 0x20	; 32
 7f8:	59 f0       	breq	.+22     	; 0x810 <vfprintf+0xa6>
 7fa:	83 32       	cpi	r24, 0x23	; 35
 7fc:	69 f4       	brne	.+26     	; 0x818 <vfprintf+0xae>
 7fe:	20 61       	ori	r18, 0x10	; 16
 800:	2c c0       	rjmp	.+88     	; 0x85a <vfprintf+0xf0>
 802:	8d 32       	cpi	r24, 0x2D	; 45
 804:	39 f0       	breq	.+14     	; 0x814 <vfprintf+0xaa>
 806:	80 33       	cpi	r24, 0x30	; 48
 808:	39 f4       	brne	.+14     	; 0x818 <vfprintf+0xae>
 80a:	21 60       	ori	r18, 0x01	; 1
 80c:	26 c0       	rjmp	.+76     	; 0x85a <vfprintf+0xf0>
 80e:	22 60       	ori	r18, 0x02	; 2
 810:	24 60       	ori	r18, 0x04	; 4
 812:	23 c0       	rjmp	.+70     	; 0x85a <vfprintf+0xf0>
 814:	28 60       	ori	r18, 0x08	; 8
 816:	21 c0       	rjmp	.+66     	; 0x85a <vfprintf+0xf0>
 818:	27 fd       	sbrc	r18, 7
 81a:	27 c0       	rjmp	.+78     	; 0x86a <vfprintf+0x100>
 81c:	30 ed       	ldi	r19, 0xD0	; 208
 81e:	38 0f       	add	r19, r24
 820:	3a 30       	cpi	r19, 0x0A	; 10
 822:	78 f4       	brcc	.+30     	; 0x842 <vfprintf+0xd8>
 824:	26 ff       	sbrs	r18, 6
 826:	06 c0       	rjmp	.+12     	; 0x834 <vfprintf+0xca>
 828:	fa e0       	ldi	r31, 0x0A	; 10
 82a:	5f 9e       	mul	r5, r31
 82c:	30 0d       	add	r19, r0
 82e:	11 24       	eor	r1, r1
 830:	53 2e       	mov	r5, r19
 832:	13 c0       	rjmp	.+38     	; 0x85a <vfprintf+0xf0>
 834:	8a e0       	ldi	r24, 0x0A	; 10
 836:	38 9e       	mul	r3, r24
 838:	30 0d       	add	r19, r0
 83a:	11 24       	eor	r1, r1
 83c:	33 2e       	mov	r3, r19
 83e:	20 62       	ori	r18, 0x20	; 32
 840:	0c c0       	rjmp	.+24     	; 0x85a <vfprintf+0xf0>
 842:	8e 32       	cpi	r24, 0x2E	; 46
 844:	21 f4       	brne	.+8      	; 0x84e <vfprintf+0xe4>
 846:	26 fd       	sbrc	r18, 6
 848:	5f c1       	rjmp	.+702    	; 0xb08 <vfprintf+0x39e>
 84a:	20 64       	ori	r18, 0x40	; 64
 84c:	06 c0       	rjmp	.+12     	; 0x85a <vfprintf+0xf0>
 84e:	8c 36       	cpi	r24, 0x6C	; 108
 850:	11 f4       	brne	.+4      	; 0x856 <vfprintf+0xec>
 852:	20 68       	ori	r18, 0x80	; 128
 854:	02 c0       	rjmp	.+4      	; 0x85a <vfprintf+0xf0>
 856:	88 36       	cpi	r24, 0x68	; 104
 858:	41 f4       	brne	.+16     	; 0x86a <vfprintf+0x100>
 85a:	f6 01       	movw	r30, r12
 85c:	93 fd       	sbrc	r25, 3
 85e:	85 91       	lpm	r24, Z+
 860:	93 ff       	sbrs	r25, 3
 862:	81 91       	ld	r24, Z+
 864:	6f 01       	movw	r12, r30
 866:	81 11       	cpse	r24, r1
 868:	c1 cf       	rjmp	.-126    	; 0x7ec <vfprintf+0x82>
 86a:	98 2f       	mov	r25, r24
 86c:	9f 7d       	andi	r25, 0xDF	; 223
 86e:	95 54       	subi	r25, 0x45	; 69
 870:	93 30       	cpi	r25, 0x03	; 3
 872:	28 f4       	brcc	.+10     	; 0x87e <vfprintf+0x114>
 874:	0c 5f       	subi	r16, 0xFC	; 252
 876:	1f 4f       	sbci	r17, 0xFF	; 255
 878:	ff e3       	ldi	r31, 0x3F	; 63
 87a:	f9 83       	std	Y+1, r31	; 0x01
 87c:	0d c0       	rjmp	.+26     	; 0x898 <vfprintf+0x12e>
 87e:	83 36       	cpi	r24, 0x63	; 99
 880:	31 f0       	breq	.+12     	; 0x88e <vfprintf+0x124>
 882:	83 37       	cpi	r24, 0x73	; 115
 884:	71 f0       	breq	.+28     	; 0x8a2 <vfprintf+0x138>
 886:	83 35       	cpi	r24, 0x53	; 83
 888:	09 f0       	breq	.+2      	; 0x88c <vfprintf+0x122>
 88a:	57 c0       	rjmp	.+174    	; 0x93a <vfprintf+0x1d0>
 88c:	21 c0       	rjmp	.+66     	; 0x8d0 <vfprintf+0x166>
 88e:	f8 01       	movw	r30, r16
 890:	80 81       	ld	r24, Z
 892:	89 83       	std	Y+1, r24	; 0x01
 894:	0e 5f       	subi	r16, 0xFE	; 254
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	44 24       	eor	r4, r4
 89a:	43 94       	inc	r4
 89c:	51 2c       	mov	r5, r1
 89e:	54 01       	movw	r10, r8
 8a0:	14 c0       	rjmp	.+40     	; 0x8ca <vfprintf+0x160>
 8a2:	38 01       	movw	r6, r16
 8a4:	f2 e0       	ldi	r31, 0x02	; 2
 8a6:	6f 0e       	add	r6, r31
 8a8:	71 1c       	adc	r7, r1
 8aa:	f8 01       	movw	r30, r16
 8ac:	a0 80       	ld	r10, Z
 8ae:	b1 80       	ldd	r11, Z+1	; 0x01
 8b0:	26 ff       	sbrs	r18, 6
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <vfprintf+0x150>
 8b4:	65 2d       	mov	r22, r5
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <vfprintf+0x154>
 8ba:	6f ef       	ldi	r22, 0xFF	; 255
 8bc:	7f ef       	ldi	r23, 0xFF	; 255
 8be:	c5 01       	movw	r24, r10
 8c0:	2c 87       	std	Y+12, r18	; 0x0c
 8c2:	9a d2       	rcall	.+1332   	; 0xdf8 <strnlen>
 8c4:	2c 01       	movw	r4, r24
 8c6:	83 01       	movw	r16, r6
 8c8:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ca:	2f 77       	andi	r18, 0x7F	; 127
 8cc:	22 2e       	mov	r2, r18
 8ce:	16 c0       	rjmp	.+44     	; 0x8fc <vfprintf+0x192>
 8d0:	38 01       	movw	r6, r16
 8d2:	f2 e0       	ldi	r31, 0x02	; 2
 8d4:	6f 0e       	add	r6, r31
 8d6:	71 1c       	adc	r7, r1
 8d8:	f8 01       	movw	r30, r16
 8da:	a0 80       	ld	r10, Z
 8dc:	b1 80       	ldd	r11, Z+1	; 0x01
 8de:	26 ff       	sbrs	r18, 6
 8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <vfprintf+0x17e>
 8e2:	65 2d       	mov	r22, r5
 8e4:	70 e0       	ldi	r23, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <vfprintf+0x182>
 8e8:	6f ef       	ldi	r22, 0xFF	; 255
 8ea:	7f ef       	ldi	r23, 0xFF	; 255
 8ec:	c5 01       	movw	r24, r10
 8ee:	2c 87       	std	Y+12, r18	; 0x0c
 8f0:	71 d2       	rcall	.+1250   	; 0xdd4 <strnlen_P>
 8f2:	2c 01       	movw	r4, r24
 8f4:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f6:	20 68       	ori	r18, 0x80	; 128
 8f8:	22 2e       	mov	r2, r18
 8fa:	83 01       	movw	r16, r6
 8fc:	23 fc       	sbrc	r2, 3
 8fe:	19 c0       	rjmp	.+50     	; 0x932 <vfprintf+0x1c8>
 900:	83 2d       	mov	r24, r3
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	48 16       	cp	r4, r24
 906:	59 06       	cpc	r5, r25
 908:	a0 f4       	brcc	.+40     	; 0x932 <vfprintf+0x1c8>
 90a:	b7 01       	movw	r22, r14
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	7e d2       	rcall	.+1276   	; 0xe0e <fputc>
 912:	3a 94       	dec	r3
 914:	f5 cf       	rjmp	.-22     	; 0x900 <vfprintf+0x196>
 916:	f5 01       	movw	r30, r10
 918:	27 fc       	sbrc	r2, 7
 91a:	85 91       	lpm	r24, Z+
 91c:	27 fe       	sbrs	r2, 7
 91e:	81 91       	ld	r24, Z+
 920:	5f 01       	movw	r10, r30
 922:	b7 01       	movw	r22, r14
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	73 d2       	rcall	.+1254   	; 0xe0e <fputc>
 928:	31 10       	cpse	r3, r1
 92a:	3a 94       	dec	r3
 92c:	f1 e0       	ldi	r31, 0x01	; 1
 92e:	4f 1a       	sub	r4, r31
 930:	51 08       	sbc	r5, r1
 932:	41 14       	cp	r4, r1
 934:	51 04       	cpc	r5, r1
 936:	79 f7       	brne	.-34     	; 0x916 <vfprintf+0x1ac>
 938:	de c0       	rjmp	.+444    	; 0xaf6 <vfprintf+0x38c>
 93a:	84 36       	cpi	r24, 0x64	; 100
 93c:	11 f0       	breq	.+4      	; 0x942 <vfprintf+0x1d8>
 93e:	89 36       	cpi	r24, 0x69	; 105
 940:	31 f5       	brne	.+76     	; 0x98e <vfprintf+0x224>
 942:	f8 01       	movw	r30, r16
 944:	27 ff       	sbrs	r18, 7
 946:	07 c0       	rjmp	.+14     	; 0x956 <vfprintf+0x1ec>
 948:	60 81       	ld	r22, Z
 94a:	71 81       	ldd	r23, Z+1	; 0x01
 94c:	82 81       	ldd	r24, Z+2	; 0x02
 94e:	93 81       	ldd	r25, Z+3	; 0x03
 950:	0c 5f       	subi	r16, 0xFC	; 252
 952:	1f 4f       	sbci	r17, 0xFF	; 255
 954:	08 c0       	rjmp	.+16     	; 0x966 <vfprintf+0x1fc>
 956:	60 81       	ld	r22, Z
 958:	71 81       	ldd	r23, Z+1	; 0x01
 95a:	07 2e       	mov	r0, r23
 95c:	00 0c       	add	r0, r0
 95e:	88 0b       	sbc	r24, r24
 960:	99 0b       	sbc	r25, r25
 962:	0e 5f       	subi	r16, 0xFE	; 254
 964:	1f 4f       	sbci	r17, 0xFF	; 255
 966:	2f 76       	andi	r18, 0x6F	; 111
 968:	72 2e       	mov	r7, r18
 96a:	97 ff       	sbrs	r25, 7
 96c:	09 c0       	rjmp	.+18     	; 0x980 <vfprintf+0x216>
 96e:	90 95       	com	r25
 970:	80 95       	com	r24
 972:	70 95       	com	r23
 974:	61 95       	neg	r22
 976:	7f 4f       	sbci	r23, 0xFF	; 255
 978:	8f 4f       	sbci	r24, 0xFF	; 255
 97a:	9f 4f       	sbci	r25, 0xFF	; 255
 97c:	20 68       	ori	r18, 0x80	; 128
 97e:	72 2e       	mov	r7, r18
 980:	2a e0       	ldi	r18, 0x0A	; 10
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	a4 01       	movw	r20, r8
 986:	7b d2       	rcall	.+1270   	; 0xe7e <__ultoa_invert>
 988:	a8 2e       	mov	r10, r24
 98a:	a8 18       	sub	r10, r8
 98c:	43 c0       	rjmp	.+134    	; 0xa14 <vfprintf+0x2aa>
 98e:	85 37       	cpi	r24, 0x75	; 117
 990:	29 f4       	brne	.+10     	; 0x99c <vfprintf+0x232>
 992:	2f 7e       	andi	r18, 0xEF	; 239
 994:	b2 2e       	mov	r11, r18
 996:	2a e0       	ldi	r18, 0x0A	; 10
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	25 c0       	rjmp	.+74     	; 0x9e6 <vfprintf+0x27c>
 99c:	f2 2f       	mov	r31, r18
 99e:	f9 7f       	andi	r31, 0xF9	; 249
 9a0:	bf 2e       	mov	r11, r31
 9a2:	8f 36       	cpi	r24, 0x6F	; 111
 9a4:	c1 f0       	breq	.+48     	; 0x9d6 <vfprintf+0x26c>
 9a6:	18 f4       	brcc	.+6      	; 0x9ae <vfprintf+0x244>
 9a8:	88 35       	cpi	r24, 0x58	; 88
 9aa:	79 f0       	breq	.+30     	; 0x9ca <vfprintf+0x260>
 9ac:	ad c0       	rjmp	.+346    	; 0xb08 <vfprintf+0x39e>
 9ae:	80 37       	cpi	r24, 0x70	; 112
 9b0:	19 f0       	breq	.+6      	; 0x9b8 <vfprintf+0x24e>
 9b2:	88 37       	cpi	r24, 0x78	; 120
 9b4:	21 f0       	breq	.+8      	; 0x9be <vfprintf+0x254>
 9b6:	a8 c0       	rjmp	.+336    	; 0xb08 <vfprintf+0x39e>
 9b8:	2f 2f       	mov	r18, r31
 9ba:	20 61       	ori	r18, 0x10	; 16
 9bc:	b2 2e       	mov	r11, r18
 9be:	b4 fe       	sbrs	r11, 4
 9c0:	0d c0       	rjmp	.+26     	; 0x9dc <vfprintf+0x272>
 9c2:	8b 2d       	mov	r24, r11
 9c4:	84 60       	ori	r24, 0x04	; 4
 9c6:	b8 2e       	mov	r11, r24
 9c8:	09 c0       	rjmp	.+18     	; 0x9dc <vfprintf+0x272>
 9ca:	24 ff       	sbrs	r18, 4
 9cc:	0a c0       	rjmp	.+20     	; 0x9e2 <vfprintf+0x278>
 9ce:	9f 2f       	mov	r25, r31
 9d0:	96 60       	ori	r25, 0x06	; 6
 9d2:	b9 2e       	mov	r11, r25
 9d4:	06 c0       	rjmp	.+12     	; 0x9e2 <vfprintf+0x278>
 9d6:	28 e0       	ldi	r18, 0x08	; 8
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	05 c0       	rjmp	.+10     	; 0x9e6 <vfprintf+0x27c>
 9dc:	20 e1       	ldi	r18, 0x10	; 16
 9de:	30 e0       	ldi	r19, 0x00	; 0
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <vfprintf+0x27c>
 9e2:	20 e1       	ldi	r18, 0x10	; 16
 9e4:	32 e0       	ldi	r19, 0x02	; 2
 9e6:	f8 01       	movw	r30, r16
 9e8:	b7 fe       	sbrs	r11, 7
 9ea:	07 c0       	rjmp	.+14     	; 0x9fa <vfprintf+0x290>
 9ec:	60 81       	ld	r22, Z
 9ee:	71 81       	ldd	r23, Z+1	; 0x01
 9f0:	82 81       	ldd	r24, Z+2	; 0x02
 9f2:	93 81       	ldd	r25, Z+3	; 0x03
 9f4:	0c 5f       	subi	r16, 0xFC	; 252
 9f6:	1f 4f       	sbci	r17, 0xFF	; 255
 9f8:	06 c0       	rjmp	.+12     	; 0xa06 <vfprintf+0x29c>
 9fa:	60 81       	ld	r22, Z
 9fc:	71 81       	ldd	r23, Z+1	; 0x01
 9fe:	80 e0       	ldi	r24, 0x00	; 0
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 5f       	subi	r16, 0xFE	; 254
 a04:	1f 4f       	sbci	r17, 0xFF	; 255
 a06:	a4 01       	movw	r20, r8
 a08:	3a d2       	rcall	.+1140   	; 0xe7e <__ultoa_invert>
 a0a:	a8 2e       	mov	r10, r24
 a0c:	a8 18       	sub	r10, r8
 a0e:	fb 2d       	mov	r31, r11
 a10:	ff 77       	andi	r31, 0x7F	; 127
 a12:	7f 2e       	mov	r7, r31
 a14:	76 fe       	sbrs	r7, 6
 a16:	0b c0       	rjmp	.+22     	; 0xa2e <vfprintf+0x2c4>
 a18:	37 2d       	mov	r19, r7
 a1a:	3e 7f       	andi	r19, 0xFE	; 254
 a1c:	a5 14       	cp	r10, r5
 a1e:	50 f4       	brcc	.+20     	; 0xa34 <vfprintf+0x2ca>
 a20:	74 fe       	sbrs	r7, 4
 a22:	0a c0       	rjmp	.+20     	; 0xa38 <vfprintf+0x2ce>
 a24:	72 fc       	sbrc	r7, 2
 a26:	08 c0       	rjmp	.+16     	; 0xa38 <vfprintf+0x2ce>
 a28:	37 2d       	mov	r19, r7
 a2a:	3e 7e       	andi	r19, 0xEE	; 238
 a2c:	05 c0       	rjmp	.+10     	; 0xa38 <vfprintf+0x2ce>
 a2e:	ba 2c       	mov	r11, r10
 a30:	37 2d       	mov	r19, r7
 a32:	03 c0       	rjmp	.+6      	; 0xa3a <vfprintf+0x2d0>
 a34:	ba 2c       	mov	r11, r10
 a36:	01 c0       	rjmp	.+2      	; 0xa3a <vfprintf+0x2d0>
 a38:	b5 2c       	mov	r11, r5
 a3a:	34 ff       	sbrs	r19, 4
 a3c:	0d c0       	rjmp	.+26     	; 0xa58 <vfprintf+0x2ee>
 a3e:	fe 01       	movw	r30, r28
 a40:	ea 0d       	add	r30, r10
 a42:	f1 1d       	adc	r31, r1
 a44:	80 81       	ld	r24, Z
 a46:	80 33       	cpi	r24, 0x30	; 48
 a48:	11 f4       	brne	.+4      	; 0xa4e <vfprintf+0x2e4>
 a4a:	39 7e       	andi	r19, 0xE9	; 233
 a4c:	09 c0       	rjmp	.+18     	; 0xa60 <vfprintf+0x2f6>
 a4e:	32 ff       	sbrs	r19, 2
 a50:	06 c0       	rjmp	.+12     	; 0xa5e <vfprintf+0x2f4>
 a52:	b3 94       	inc	r11
 a54:	b3 94       	inc	r11
 a56:	04 c0       	rjmp	.+8      	; 0xa60 <vfprintf+0x2f6>
 a58:	83 2f       	mov	r24, r19
 a5a:	86 78       	andi	r24, 0x86	; 134
 a5c:	09 f0       	breq	.+2      	; 0xa60 <vfprintf+0x2f6>
 a5e:	b3 94       	inc	r11
 a60:	33 fd       	sbrc	r19, 3
 a62:	12 c0       	rjmp	.+36     	; 0xa88 <vfprintf+0x31e>
 a64:	30 ff       	sbrs	r19, 0
 a66:	06 c0       	rjmp	.+12     	; 0xa74 <vfprintf+0x30a>
 a68:	5a 2c       	mov	r5, r10
 a6a:	b3 14       	cp	r11, r3
 a6c:	18 f4       	brcc	.+6      	; 0xa74 <vfprintf+0x30a>
 a6e:	53 0c       	add	r5, r3
 a70:	5b 18       	sub	r5, r11
 a72:	b3 2c       	mov	r11, r3
 a74:	b3 14       	cp	r11, r3
 a76:	60 f4       	brcc	.+24     	; 0xa90 <vfprintf+0x326>
 a78:	b7 01       	movw	r22, r14
 a7a:	80 e2       	ldi	r24, 0x20	; 32
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	3c 87       	std	Y+12, r19	; 0x0c
 a80:	c6 d1       	rcall	.+908    	; 0xe0e <fputc>
 a82:	b3 94       	inc	r11
 a84:	3c 85       	ldd	r19, Y+12	; 0x0c
 a86:	f6 cf       	rjmp	.-20     	; 0xa74 <vfprintf+0x30a>
 a88:	b3 14       	cp	r11, r3
 a8a:	10 f4       	brcc	.+4      	; 0xa90 <vfprintf+0x326>
 a8c:	3b 18       	sub	r3, r11
 a8e:	01 c0       	rjmp	.+2      	; 0xa92 <vfprintf+0x328>
 a90:	31 2c       	mov	r3, r1
 a92:	34 ff       	sbrs	r19, 4
 a94:	11 c0       	rjmp	.+34     	; 0xab8 <vfprintf+0x34e>
 a96:	b7 01       	movw	r22, r14
 a98:	80 e3       	ldi	r24, 0x30	; 48
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	3c 87       	std	Y+12, r19	; 0x0c
 a9e:	b7 d1       	rcall	.+878    	; 0xe0e <fputc>
 aa0:	3c 85       	ldd	r19, Y+12	; 0x0c
 aa2:	32 ff       	sbrs	r19, 2
 aa4:	16 c0       	rjmp	.+44     	; 0xad2 <vfprintf+0x368>
 aa6:	31 fd       	sbrc	r19, 1
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <vfprintf+0x346>
 aaa:	88 e7       	ldi	r24, 0x78	; 120
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	02 c0       	rjmp	.+4      	; 0xab4 <vfprintf+0x34a>
 ab0:	88 e5       	ldi	r24, 0x58	; 88
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	b7 01       	movw	r22, r14
 ab6:	0c c0       	rjmp	.+24     	; 0xad0 <vfprintf+0x366>
 ab8:	83 2f       	mov	r24, r19
 aba:	86 78       	andi	r24, 0x86	; 134
 abc:	51 f0       	breq	.+20     	; 0xad2 <vfprintf+0x368>
 abe:	31 ff       	sbrs	r19, 1
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <vfprintf+0x35c>
 ac2:	8b e2       	ldi	r24, 0x2B	; 43
 ac4:	01 c0       	rjmp	.+2      	; 0xac8 <vfprintf+0x35e>
 ac6:	80 e2       	ldi	r24, 0x20	; 32
 ac8:	37 fd       	sbrc	r19, 7
 aca:	8d e2       	ldi	r24, 0x2D	; 45
 acc:	b7 01       	movw	r22, r14
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	9e d1       	rcall	.+828    	; 0xe0e <fputc>
 ad2:	a5 14       	cp	r10, r5
 ad4:	30 f4       	brcc	.+12     	; 0xae2 <vfprintf+0x378>
 ad6:	b7 01       	movw	r22, r14
 ad8:	80 e3       	ldi	r24, 0x30	; 48
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	98 d1       	rcall	.+816    	; 0xe0e <fputc>
 ade:	5a 94       	dec	r5
 ae0:	f8 cf       	rjmp	.-16     	; 0xad2 <vfprintf+0x368>
 ae2:	aa 94       	dec	r10
 ae4:	f4 01       	movw	r30, r8
 ae6:	ea 0d       	add	r30, r10
 ae8:	f1 1d       	adc	r31, r1
 aea:	80 81       	ld	r24, Z
 aec:	b7 01       	movw	r22, r14
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	8e d1       	rcall	.+796    	; 0xe0e <fputc>
 af2:	a1 10       	cpse	r10, r1
 af4:	f6 cf       	rjmp	.-20     	; 0xae2 <vfprintf+0x378>
 af6:	33 20       	and	r3, r3
 af8:	09 f4       	brne	.+2      	; 0xafc <vfprintf+0x392>
 afa:	5d ce       	rjmp	.-838    	; 0x7b6 <vfprintf+0x4c>
 afc:	b7 01       	movw	r22, r14
 afe:	80 e2       	ldi	r24, 0x20	; 32
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	85 d1       	rcall	.+778    	; 0xe0e <fputc>
 b04:	3a 94       	dec	r3
 b06:	f7 cf       	rjmp	.-18     	; 0xaf6 <vfprintf+0x38c>
 b08:	f7 01       	movw	r30, r14
 b0a:	86 81       	ldd	r24, Z+6	; 0x06
 b0c:	97 81       	ldd	r25, Z+7	; 0x07
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <vfprintf+0x3aa>
 b10:	8f ef       	ldi	r24, 0xFF	; 255
 b12:	9f ef       	ldi	r25, 0xFF	; 255
 b14:	2c 96       	adiw	r28, 0x0c	; 12
 b16:	0f b6       	in	r0, 0x3f	; 63
 b18:	f8 94       	cli
 b1a:	de bf       	out	0x3e, r29	; 62
 b1c:	0f be       	out	0x3f, r0	; 63
 b1e:	cd bf       	out	0x3d, r28	; 61
 b20:	df 91       	pop	r29
 b22:	cf 91       	pop	r28
 b24:	1f 91       	pop	r17
 b26:	0f 91       	pop	r16
 b28:	ff 90       	pop	r15
 b2a:	ef 90       	pop	r14
 b2c:	df 90       	pop	r13
 b2e:	cf 90       	pop	r12
 b30:	bf 90       	pop	r11
 b32:	af 90       	pop	r10
 b34:	9f 90       	pop	r9
 b36:	8f 90       	pop	r8
 b38:	7f 90       	pop	r7
 b3a:	6f 90       	pop	r6
 b3c:	5f 90       	pop	r5
 b3e:	4f 90       	pop	r4
 b40:	3f 90       	pop	r3
 b42:	2f 90       	pop	r2
 b44:	08 95       	ret

00000b46 <calloc>:
 b46:	0f 93       	push	r16
 b48:	1f 93       	push	r17
 b4a:	cf 93       	push	r28
 b4c:	df 93       	push	r29
 b4e:	86 9f       	mul	r24, r22
 b50:	80 01       	movw	r16, r0
 b52:	87 9f       	mul	r24, r23
 b54:	10 0d       	add	r17, r0
 b56:	96 9f       	mul	r25, r22
 b58:	10 0d       	add	r17, r0
 b5a:	11 24       	eor	r1, r1
 b5c:	c8 01       	movw	r24, r16
 b5e:	0d d0       	rcall	.+26     	; 0xb7a <malloc>
 b60:	ec 01       	movw	r28, r24
 b62:	00 97       	sbiw	r24, 0x00	; 0
 b64:	21 f0       	breq	.+8      	; 0xb6e <calloc+0x28>
 b66:	a8 01       	movw	r20, r16
 b68:	60 e0       	ldi	r22, 0x00	; 0
 b6a:	70 e0       	ldi	r23, 0x00	; 0
 b6c:	3e d1       	rcall	.+636    	; 0xdea <memset>
 b6e:	ce 01       	movw	r24, r28
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	1f 91       	pop	r17
 b76:	0f 91       	pop	r16
 b78:	08 95       	ret

00000b7a <malloc>:
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	82 30       	cpi	r24, 0x02	; 2
 b80:	91 05       	cpc	r25, r1
 b82:	10 f4       	brcc	.+4      	; 0xb88 <malloc+0xe>
 b84:	82 e0       	ldi	r24, 0x02	; 2
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	e0 91 71 01 	lds	r30, 0x0171
 b8c:	f0 91 72 01 	lds	r31, 0x0172
 b90:	20 e0       	ldi	r18, 0x00	; 0
 b92:	30 e0       	ldi	r19, 0x00	; 0
 b94:	c0 e0       	ldi	r28, 0x00	; 0
 b96:	d0 e0       	ldi	r29, 0x00	; 0
 b98:	30 97       	sbiw	r30, 0x00	; 0
 b9a:	11 f1       	breq	.+68     	; 0xbe0 <malloc+0x66>
 b9c:	40 81       	ld	r20, Z
 b9e:	51 81       	ldd	r21, Z+1	; 0x01
 ba0:	48 17       	cp	r20, r24
 ba2:	59 07       	cpc	r21, r25
 ba4:	c0 f0       	brcs	.+48     	; 0xbd6 <malloc+0x5c>
 ba6:	48 17       	cp	r20, r24
 ba8:	59 07       	cpc	r21, r25
 baa:	61 f4       	brne	.+24     	; 0xbc4 <malloc+0x4a>
 bac:	82 81       	ldd	r24, Z+2	; 0x02
 bae:	93 81       	ldd	r25, Z+3	; 0x03
 bb0:	20 97       	sbiw	r28, 0x00	; 0
 bb2:	19 f0       	breq	.+6      	; 0xbba <malloc+0x40>
 bb4:	9b 83       	std	Y+3, r25	; 0x03
 bb6:	8a 83       	std	Y+2, r24	; 0x02
 bb8:	2b c0       	rjmp	.+86     	; 0xc10 <malloc+0x96>
 bba:	90 93 72 01 	sts	0x0172, r25
 bbe:	80 93 71 01 	sts	0x0171, r24
 bc2:	26 c0       	rjmp	.+76     	; 0xc10 <malloc+0x96>
 bc4:	21 15       	cp	r18, r1
 bc6:	31 05       	cpc	r19, r1
 bc8:	19 f0       	breq	.+6      	; 0xbd0 <malloc+0x56>
 bca:	42 17       	cp	r20, r18
 bcc:	53 07       	cpc	r21, r19
 bce:	18 f4       	brcc	.+6      	; 0xbd6 <malloc+0x5c>
 bd0:	9a 01       	movw	r18, r20
 bd2:	be 01       	movw	r22, r28
 bd4:	df 01       	movw	r26, r30
 bd6:	ef 01       	movw	r28, r30
 bd8:	02 80       	ldd	r0, Z+2	; 0x02
 bda:	f3 81       	ldd	r31, Z+3	; 0x03
 bdc:	e0 2d       	mov	r30, r0
 bde:	dc cf       	rjmp	.-72     	; 0xb98 <malloc+0x1e>
 be0:	21 15       	cp	r18, r1
 be2:	31 05       	cpc	r19, r1
 be4:	09 f1       	breq	.+66     	; 0xc28 <malloc+0xae>
 be6:	28 1b       	sub	r18, r24
 be8:	39 0b       	sbc	r19, r25
 bea:	24 30       	cpi	r18, 0x04	; 4
 bec:	31 05       	cpc	r19, r1
 bee:	90 f4       	brcc	.+36     	; 0xc14 <malloc+0x9a>
 bf0:	12 96       	adiw	r26, 0x02	; 2
 bf2:	8d 91       	ld	r24, X+
 bf4:	9c 91       	ld	r25, X
 bf6:	13 97       	sbiw	r26, 0x03	; 3
 bf8:	61 15       	cp	r22, r1
 bfa:	71 05       	cpc	r23, r1
 bfc:	21 f0       	breq	.+8      	; 0xc06 <malloc+0x8c>
 bfe:	fb 01       	movw	r30, r22
 c00:	93 83       	std	Z+3, r25	; 0x03
 c02:	82 83       	std	Z+2, r24	; 0x02
 c04:	04 c0       	rjmp	.+8      	; 0xc0e <malloc+0x94>
 c06:	90 93 72 01 	sts	0x0172, r25
 c0a:	80 93 71 01 	sts	0x0171, r24
 c0e:	fd 01       	movw	r30, r26
 c10:	32 96       	adiw	r30, 0x02	; 2
 c12:	44 c0       	rjmp	.+136    	; 0xc9c <malloc+0x122>
 c14:	fd 01       	movw	r30, r26
 c16:	e2 0f       	add	r30, r18
 c18:	f3 1f       	adc	r31, r19
 c1a:	81 93       	st	Z+, r24
 c1c:	91 93       	st	Z+, r25
 c1e:	22 50       	subi	r18, 0x02	; 2
 c20:	31 09       	sbc	r19, r1
 c22:	2d 93       	st	X+, r18
 c24:	3c 93       	st	X, r19
 c26:	3a c0       	rjmp	.+116    	; 0xc9c <malloc+0x122>
 c28:	20 91 6f 01 	lds	r18, 0x016F
 c2c:	30 91 70 01 	lds	r19, 0x0170
 c30:	23 2b       	or	r18, r19
 c32:	41 f4       	brne	.+16     	; 0xc44 <malloc+0xca>
 c34:	20 91 02 01 	lds	r18, 0x0102
 c38:	30 91 03 01 	lds	r19, 0x0103
 c3c:	30 93 70 01 	sts	0x0170, r19
 c40:	20 93 6f 01 	sts	0x016F, r18
 c44:	20 91 00 01 	lds	r18, 0x0100
 c48:	30 91 01 01 	lds	r19, 0x0101
 c4c:	21 15       	cp	r18, r1
 c4e:	31 05       	cpc	r19, r1
 c50:	41 f4       	brne	.+16     	; 0xc62 <malloc+0xe8>
 c52:	2d b7       	in	r18, 0x3d	; 61
 c54:	3e b7       	in	r19, 0x3e	; 62
 c56:	40 91 04 01 	lds	r20, 0x0104
 c5a:	50 91 05 01 	lds	r21, 0x0105
 c5e:	24 1b       	sub	r18, r20
 c60:	35 0b       	sbc	r19, r21
 c62:	e0 91 6f 01 	lds	r30, 0x016F
 c66:	f0 91 70 01 	lds	r31, 0x0170
 c6a:	e2 17       	cp	r30, r18
 c6c:	f3 07       	cpc	r31, r19
 c6e:	a0 f4       	brcc	.+40     	; 0xc98 <malloc+0x11e>
 c70:	2e 1b       	sub	r18, r30
 c72:	3f 0b       	sbc	r19, r31
 c74:	28 17       	cp	r18, r24
 c76:	39 07       	cpc	r19, r25
 c78:	78 f0       	brcs	.+30     	; 0xc98 <malloc+0x11e>
 c7a:	ac 01       	movw	r20, r24
 c7c:	4e 5f       	subi	r20, 0xFE	; 254
 c7e:	5f 4f       	sbci	r21, 0xFF	; 255
 c80:	24 17       	cp	r18, r20
 c82:	35 07       	cpc	r19, r21
 c84:	48 f0       	brcs	.+18     	; 0xc98 <malloc+0x11e>
 c86:	4e 0f       	add	r20, r30
 c88:	5f 1f       	adc	r21, r31
 c8a:	50 93 70 01 	sts	0x0170, r21
 c8e:	40 93 6f 01 	sts	0x016F, r20
 c92:	81 93       	st	Z+, r24
 c94:	91 93       	st	Z+, r25
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <malloc+0x122>
 c98:	e0 e0       	ldi	r30, 0x00	; 0
 c9a:	f0 e0       	ldi	r31, 0x00	; 0
 c9c:	cf 01       	movw	r24, r30
 c9e:	df 91       	pop	r29
 ca0:	cf 91       	pop	r28
 ca2:	08 95       	ret

00000ca4 <free>:
 ca4:	0f 93       	push	r16
 ca6:	1f 93       	push	r17
 ca8:	cf 93       	push	r28
 caa:	df 93       	push	r29
 cac:	00 97       	sbiw	r24, 0x00	; 0
 cae:	09 f4       	brne	.+2      	; 0xcb2 <free+0xe>
 cb0:	8c c0       	rjmp	.+280    	; 0xdca <free+0x126>
 cb2:	fc 01       	movw	r30, r24
 cb4:	32 97       	sbiw	r30, 0x02	; 2
 cb6:	13 82       	std	Z+3, r1	; 0x03
 cb8:	12 82       	std	Z+2, r1	; 0x02
 cba:	00 91 71 01 	lds	r16, 0x0171
 cbe:	10 91 72 01 	lds	r17, 0x0172
 cc2:	01 15       	cp	r16, r1
 cc4:	11 05       	cpc	r17, r1
 cc6:	81 f4       	brne	.+32     	; 0xce8 <free+0x44>
 cc8:	20 81       	ld	r18, Z
 cca:	31 81       	ldd	r19, Z+1	; 0x01
 ccc:	82 0f       	add	r24, r18
 cce:	93 1f       	adc	r25, r19
 cd0:	20 91 6f 01 	lds	r18, 0x016F
 cd4:	30 91 70 01 	lds	r19, 0x0170
 cd8:	28 17       	cp	r18, r24
 cda:	39 07       	cpc	r19, r25
 cdc:	79 f5       	brne	.+94     	; 0xd3c <free+0x98>
 cde:	f0 93 70 01 	sts	0x0170, r31
 ce2:	e0 93 6f 01 	sts	0x016F, r30
 ce6:	71 c0       	rjmp	.+226    	; 0xdca <free+0x126>
 ce8:	d8 01       	movw	r26, r16
 cea:	40 e0       	ldi	r20, 0x00	; 0
 cec:	50 e0       	ldi	r21, 0x00	; 0
 cee:	ae 17       	cp	r26, r30
 cf0:	bf 07       	cpc	r27, r31
 cf2:	50 f4       	brcc	.+20     	; 0xd08 <free+0x64>
 cf4:	12 96       	adiw	r26, 0x02	; 2
 cf6:	2d 91       	ld	r18, X+
 cf8:	3c 91       	ld	r19, X
 cfa:	13 97       	sbiw	r26, 0x03	; 3
 cfc:	ad 01       	movw	r20, r26
 cfe:	21 15       	cp	r18, r1
 d00:	31 05       	cpc	r19, r1
 d02:	09 f1       	breq	.+66     	; 0xd46 <free+0xa2>
 d04:	d9 01       	movw	r26, r18
 d06:	f3 cf       	rjmp	.-26     	; 0xcee <free+0x4a>
 d08:	9d 01       	movw	r18, r26
 d0a:	da 01       	movw	r26, r20
 d0c:	33 83       	std	Z+3, r19	; 0x03
 d0e:	22 83       	std	Z+2, r18	; 0x02
 d10:	60 81       	ld	r22, Z
 d12:	71 81       	ldd	r23, Z+1	; 0x01
 d14:	86 0f       	add	r24, r22
 d16:	97 1f       	adc	r25, r23
 d18:	82 17       	cp	r24, r18
 d1a:	93 07       	cpc	r25, r19
 d1c:	69 f4       	brne	.+26     	; 0xd38 <free+0x94>
 d1e:	ec 01       	movw	r28, r24
 d20:	28 81       	ld	r18, Y
 d22:	39 81       	ldd	r19, Y+1	; 0x01
 d24:	26 0f       	add	r18, r22
 d26:	37 1f       	adc	r19, r23
 d28:	2e 5f       	subi	r18, 0xFE	; 254
 d2a:	3f 4f       	sbci	r19, 0xFF	; 255
 d2c:	31 83       	std	Z+1, r19	; 0x01
 d2e:	20 83       	st	Z, r18
 d30:	8a 81       	ldd	r24, Y+2	; 0x02
 d32:	9b 81       	ldd	r25, Y+3	; 0x03
 d34:	93 83       	std	Z+3, r25	; 0x03
 d36:	82 83       	std	Z+2, r24	; 0x02
 d38:	45 2b       	or	r20, r21
 d3a:	29 f4       	brne	.+10     	; 0xd46 <free+0xa2>
 d3c:	f0 93 72 01 	sts	0x0172, r31
 d40:	e0 93 71 01 	sts	0x0171, r30
 d44:	42 c0       	rjmp	.+132    	; 0xdca <free+0x126>
 d46:	13 96       	adiw	r26, 0x03	; 3
 d48:	fc 93       	st	X, r31
 d4a:	ee 93       	st	-X, r30
 d4c:	12 97       	sbiw	r26, 0x02	; 2
 d4e:	ed 01       	movw	r28, r26
 d50:	49 91       	ld	r20, Y+
 d52:	59 91       	ld	r21, Y+
 d54:	9e 01       	movw	r18, r28
 d56:	24 0f       	add	r18, r20
 d58:	35 1f       	adc	r19, r21
 d5a:	e2 17       	cp	r30, r18
 d5c:	f3 07       	cpc	r31, r19
 d5e:	71 f4       	brne	.+28     	; 0xd7c <free+0xd8>
 d60:	80 81       	ld	r24, Z
 d62:	91 81       	ldd	r25, Z+1	; 0x01
 d64:	84 0f       	add	r24, r20
 d66:	95 1f       	adc	r25, r21
 d68:	02 96       	adiw	r24, 0x02	; 2
 d6a:	11 96       	adiw	r26, 0x01	; 1
 d6c:	9c 93       	st	X, r25
 d6e:	8e 93       	st	-X, r24
 d70:	82 81       	ldd	r24, Z+2	; 0x02
 d72:	93 81       	ldd	r25, Z+3	; 0x03
 d74:	13 96       	adiw	r26, 0x03	; 3
 d76:	9c 93       	st	X, r25
 d78:	8e 93       	st	-X, r24
 d7a:	12 97       	sbiw	r26, 0x02	; 2
 d7c:	e0 e0       	ldi	r30, 0x00	; 0
 d7e:	f0 e0       	ldi	r31, 0x00	; 0
 d80:	d8 01       	movw	r26, r16
 d82:	12 96       	adiw	r26, 0x02	; 2
 d84:	8d 91       	ld	r24, X+
 d86:	9c 91       	ld	r25, X
 d88:	13 97       	sbiw	r26, 0x03	; 3
 d8a:	00 97       	sbiw	r24, 0x00	; 0
 d8c:	19 f0       	breq	.+6      	; 0xd94 <free+0xf0>
 d8e:	f8 01       	movw	r30, r16
 d90:	8c 01       	movw	r16, r24
 d92:	f6 cf       	rjmp	.-20     	; 0xd80 <free+0xdc>
 d94:	8d 91       	ld	r24, X+
 d96:	9c 91       	ld	r25, X
 d98:	98 01       	movw	r18, r16
 d9a:	2e 5f       	subi	r18, 0xFE	; 254
 d9c:	3f 4f       	sbci	r19, 0xFF	; 255
 d9e:	82 0f       	add	r24, r18
 da0:	93 1f       	adc	r25, r19
 da2:	20 91 6f 01 	lds	r18, 0x016F
 da6:	30 91 70 01 	lds	r19, 0x0170
 daa:	28 17       	cp	r18, r24
 dac:	39 07       	cpc	r19, r25
 dae:	69 f4       	brne	.+26     	; 0xdca <free+0x126>
 db0:	30 97       	sbiw	r30, 0x00	; 0
 db2:	29 f4       	brne	.+10     	; 0xdbe <free+0x11a>
 db4:	10 92 72 01 	sts	0x0172, r1
 db8:	10 92 71 01 	sts	0x0171, r1
 dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <free+0x11e>
 dbe:	13 82       	std	Z+3, r1	; 0x03
 dc0:	12 82       	std	Z+2, r1	; 0x02
 dc2:	10 93 70 01 	sts	0x0170, r17
 dc6:	00 93 6f 01 	sts	0x016F, r16
 dca:	df 91       	pop	r29
 dcc:	cf 91       	pop	r28
 dce:	1f 91       	pop	r17
 dd0:	0f 91       	pop	r16
 dd2:	08 95       	ret

00000dd4 <strnlen_P>:
 dd4:	fc 01       	movw	r30, r24
 dd6:	05 90       	lpm	r0, Z+
 dd8:	61 50       	subi	r22, 0x01	; 1
 dda:	70 40       	sbci	r23, 0x00	; 0
 ddc:	01 10       	cpse	r0, r1
 dde:	d8 f7       	brcc	.-10     	; 0xdd6 <strnlen_P+0x2>
 de0:	80 95       	com	r24
 de2:	90 95       	com	r25
 de4:	8e 0f       	add	r24, r30
 de6:	9f 1f       	adc	r25, r31
 de8:	08 95       	ret

00000dea <memset>:
 dea:	dc 01       	movw	r26, r24
 dec:	01 c0       	rjmp	.+2      	; 0xdf0 <memset+0x6>
 dee:	6d 93       	st	X+, r22
 df0:	41 50       	subi	r20, 0x01	; 1
 df2:	50 40       	sbci	r21, 0x00	; 0
 df4:	e0 f7       	brcc	.-8      	; 0xdee <memset+0x4>
 df6:	08 95       	ret

00000df8 <strnlen>:
 df8:	fc 01       	movw	r30, r24
 dfa:	61 50       	subi	r22, 0x01	; 1
 dfc:	70 40       	sbci	r23, 0x00	; 0
 dfe:	01 90       	ld	r0, Z+
 e00:	01 10       	cpse	r0, r1
 e02:	d8 f7       	brcc	.-10     	; 0xdfa <strnlen+0x2>
 e04:	80 95       	com	r24
 e06:	90 95       	com	r25
 e08:	8e 0f       	add	r24, r30
 e0a:	9f 1f       	adc	r25, r31
 e0c:	08 95       	ret

00000e0e <fputc>:
 e0e:	0f 93       	push	r16
 e10:	1f 93       	push	r17
 e12:	cf 93       	push	r28
 e14:	df 93       	push	r29
 e16:	fb 01       	movw	r30, r22
 e18:	23 81       	ldd	r18, Z+3	; 0x03
 e1a:	21 fd       	sbrc	r18, 1
 e1c:	03 c0       	rjmp	.+6      	; 0xe24 <fputc+0x16>
 e1e:	8f ef       	ldi	r24, 0xFF	; 255
 e20:	9f ef       	ldi	r25, 0xFF	; 255
 e22:	28 c0       	rjmp	.+80     	; 0xe74 <fputc+0x66>
 e24:	22 ff       	sbrs	r18, 2
 e26:	16 c0       	rjmp	.+44     	; 0xe54 <fputc+0x46>
 e28:	46 81       	ldd	r20, Z+6	; 0x06
 e2a:	57 81       	ldd	r21, Z+7	; 0x07
 e2c:	24 81       	ldd	r18, Z+4	; 0x04
 e2e:	35 81       	ldd	r19, Z+5	; 0x05
 e30:	42 17       	cp	r20, r18
 e32:	53 07       	cpc	r21, r19
 e34:	44 f4       	brge	.+16     	; 0xe46 <fputc+0x38>
 e36:	a0 81       	ld	r26, Z
 e38:	b1 81       	ldd	r27, Z+1	; 0x01
 e3a:	9d 01       	movw	r18, r26
 e3c:	2f 5f       	subi	r18, 0xFF	; 255
 e3e:	3f 4f       	sbci	r19, 0xFF	; 255
 e40:	31 83       	std	Z+1, r19	; 0x01
 e42:	20 83       	st	Z, r18
 e44:	8c 93       	st	X, r24
 e46:	26 81       	ldd	r18, Z+6	; 0x06
 e48:	37 81       	ldd	r19, Z+7	; 0x07
 e4a:	2f 5f       	subi	r18, 0xFF	; 255
 e4c:	3f 4f       	sbci	r19, 0xFF	; 255
 e4e:	37 83       	std	Z+7, r19	; 0x07
 e50:	26 83       	std	Z+6, r18	; 0x06
 e52:	10 c0       	rjmp	.+32     	; 0xe74 <fputc+0x66>
 e54:	eb 01       	movw	r28, r22
 e56:	09 2f       	mov	r16, r25
 e58:	18 2f       	mov	r17, r24
 e5a:	00 84       	ldd	r0, Z+8	; 0x08
 e5c:	f1 85       	ldd	r31, Z+9	; 0x09
 e5e:	e0 2d       	mov	r30, r0
 e60:	09 95       	icall
 e62:	89 2b       	or	r24, r25
 e64:	e1 f6       	brne	.-72     	; 0xe1e <fputc+0x10>
 e66:	8e 81       	ldd	r24, Y+6	; 0x06
 e68:	9f 81       	ldd	r25, Y+7	; 0x07
 e6a:	01 96       	adiw	r24, 0x01	; 1
 e6c:	9f 83       	std	Y+7, r25	; 0x07
 e6e:	8e 83       	std	Y+6, r24	; 0x06
 e70:	81 2f       	mov	r24, r17
 e72:	90 2f       	mov	r25, r16
 e74:	df 91       	pop	r29
 e76:	cf 91       	pop	r28
 e78:	1f 91       	pop	r17
 e7a:	0f 91       	pop	r16
 e7c:	08 95       	ret

00000e7e <__ultoa_invert>:
 e7e:	fa 01       	movw	r30, r20
 e80:	aa 27       	eor	r26, r26
 e82:	28 30       	cpi	r18, 0x08	; 8
 e84:	51 f1       	breq	.+84     	; 0xeda <__ultoa_invert+0x5c>
 e86:	20 31       	cpi	r18, 0x10	; 16
 e88:	81 f1       	breq	.+96     	; 0xeea <__ultoa_invert+0x6c>
 e8a:	e8 94       	clt
 e8c:	6f 93       	push	r22
 e8e:	6e 7f       	andi	r22, 0xFE	; 254
 e90:	6e 5f       	subi	r22, 0xFE	; 254
 e92:	7f 4f       	sbci	r23, 0xFF	; 255
 e94:	8f 4f       	sbci	r24, 0xFF	; 255
 e96:	9f 4f       	sbci	r25, 0xFF	; 255
 e98:	af 4f       	sbci	r26, 0xFF	; 255
 e9a:	b1 e0       	ldi	r27, 0x01	; 1
 e9c:	3e d0       	rcall	.+124    	; 0xf1a <__ultoa_invert+0x9c>
 e9e:	b4 e0       	ldi	r27, 0x04	; 4
 ea0:	3c d0       	rcall	.+120    	; 0xf1a <__ultoa_invert+0x9c>
 ea2:	67 0f       	add	r22, r23
 ea4:	78 1f       	adc	r23, r24
 ea6:	89 1f       	adc	r24, r25
 ea8:	9a 1f       	adc	r25, r26
 eaa:	a1 1d       	adc	r26, r1
 eac:	68 0f       	add	r22, r24
 eae:	79 1f       	adc	r23, r25
 eb0:	8a 1f       	adc	r24, r26
 eb2:	91 1d       	adc	r25, r1
 eb4:	a1 1d       	adc	r26, r1
 eb6:	6a 0f       	add	r22, r26
 eb8:	71 1d       	adc	r23, r1
 eba:	81 1d       	adc	r24, r1
 ebc:	91 1d       	adc	r25, r1
 ebe:	a1 1d       	adc	r26, r1
 ec0:	20 d0       	rcall	.+64     	; 0xf02 <__ultoa_invert+0x84>
 ec2:	09 f4       	brne	.+2      	; 0xec6 <__ultoa_invert+0x48>
 ec4:	68 94       	set
 ec6:	3f 91       	pop	r19
 ec8:	2a e0       	ldi	r18, 0x0A	; 10
 eca:	26 9f       	mul	r18, r22
 ecc:	11 24       	eor	r1, r1
 ece:	30 19       	sub	r19, r0
 ed0:	30 5d       	subi	r19, 0xD0	; 208
 ed2:	31 93       	st	Z+, r19
 ed4:	de f6       	brtc	.-74     	; 0xe8c <__ultoa_invert+0xe>
 ed6:	cf 01       	movw	r24, r30
 ed8:	08 95       	ret
 eda:	46 2f       	mov	r20, r22
 edc:	47 70       	andi	r20, 0x07	; 7
 ede:	40 5d       	subi	r20, 0xD0	; 208
 ee0:	41 93       	st	Z+, r20
 ee2:	b3 e0       	ldi	r27, 0x03	; 3
 ee4:	0f d0       	rcall	.+30     	; 0xf04 <__ultoa_invert+0x86>
 ee6:	c9 f7       	brne	.-14     	; 0xeda <__ultoa_invert+0x5c>
 ee8:	f6 cf       	rjmp	.-20     	; 0xed6 <__ultoa_invert+0x58>
 eea:	46 2f       	mov	r20, r22
 eec:	4f 70       	andi	r20, 0x0F	; 15
 eee:	40 5d       	subi	r20, 0xD0	; 208
 ef0:	4a 33       	cpi	r20, 0x3A	; 58
 ef2:	18 f0       	brcs	.+6      	; 0xefa <__ultoa_invert+0x7c>
 ef4:	49 5d       	subi	r20, 0xD9	; 217
 ef6:	31 fd       	sbrc	r19, 1
 ef8:	40 52       	subi	r20, 0x20	; 32
 efa:	41 93       	st	Z+, r20
 efc:	02 d0       	rcall	.+4      	; 0xf02 <__ultoa_invert+0x84>
 efe:	a9 f7       	brne	.-22     	; 0xeea <__ultoa_invert+0x6c>
 f00:	ea cf       	rjmp	.-44     	; 0xed6 <__ultoa_invert+0x58>
 f02:	b4 e0       	ldi	r27, 0x04	; 4
 f04:	a6 95       	lsr	r26
 f06:	97 95       	ror	r25
 f08:	87 95       	ror	r24
 f0a:	77 95       	ror	r23
 f0c:	67 95       	ror	r22
 f0e:	ba 95       	dec	r27
 f10:	c9 f7       	brne	.-14     	; 0xf04 <__ultoa_invert+0x86>
 f12:	00 97       	sbiw	r24, 0x00	; 0
 f14:	61 05       	cpc	r22, r1
 f16:	71 05       	cpc	r23, r1
 f18:	08 95       	ret
 f1a:	9b 01       	movw	r18, r22
 f1c:	ac 01       	movw	r20, r24
 f1e:	0a 2e       	mov	r0, r26
 f20:	06 94       	lsr	r0
 f22:	57 95       	ror	r21
 f24:	47 95       	ror	r20
 f26:	37 95       	ror	r19
 f28:	27 95       	ror	r18
 f2a:	ba 95       	dec	r27
 f2c:	c9 f7       	brne	.-14     	; 0xf20 <__ultoa_invert+0xa2>
 f2e:	62 0f       	add	r22, r18
 f30:	73 1f       	adc	r23, r19
 f32:	84 1f       	adc	r24, r20
 f34:	95 1f       	adc	r25, r21
 f36:	a0 1d       	adc	r26, r0
 f38:	08 95       	ret

00000f3a <_exit>:
 f3a:	f8 94       	cli

00000f3c <__stop_program>:
 f3c:	ff cf       	rjmp	.-2      	; 0xf3c <__stop_program>
