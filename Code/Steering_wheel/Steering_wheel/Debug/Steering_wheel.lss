
Steering_wheel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000f68  00000ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800124  00800124  00001020  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee3  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088f  00000000  00000000  000020ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cad  00000000  00000000  0000298e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  0000363c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  00003954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000077f  00000000  00000000  00003d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	d0 c2       	rjmp	.+1440   	; 0x5de <__vector_15>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	32 c2       	rjmp	.+1124   	; 0x4aa <__vector_17>
  46:	00 00       	nop
  48:	87 c0       	rjmp	.+270    	; 0x158 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	ff e0       	ldi	r31, 0x0F	; 15
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a4 32       	cpi	r26, 0x24	; 36
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a4 e2       	ldi	r26, 0x24	; 36
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	aa 37       	cpi	r26, 0x7A	; 122
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	6b d1       	rcall	.+726    	; 0x3a2 <main>
  cc:	4b c7       	rjmp	.+3734   	; 0xf64 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_init>:
 *  Author: Vilius
 */ 
#include "adc.h"

void adc_init( void) {
	clear_bit(DDRF, DDF0);
  d0:	80 98       	cbi	0x10, 0	; 16
	/* Voltage ref AVcc with external capacitor on AREF pin */
	set_bit(ADMUX, REFS0);
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	/* Select prescaler to 64 --> conversion f= 125kHz */
	set_bit(ADCSRA, ADPS2);
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
	/* Enable the ADC */
	set_bit(ADCSRA, ADEN);
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <adc_sleep>:
	//set_bit(ADCSRA, ADIE);
}

void adc_sleep( void) {
	/* Wait for the conversion to complete */
	while(test_bit(ADCSRA, ADSC));
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	86 fd       	sbrc	r24, 6
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <adc_sleep+0x4>
	/* Turn off the ADC */
	clear_bit(ADCSRA, ADEN);
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8f 77       	andi	r24, 0x7F	; 127
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <adc_input>:
}

void adc_input( int chan, CAN_packet* p) {
 10a:	9c 01       	movw	r18, r24
	/*Select the reference channel. 1 = speed, 2 = acc */
	if(chan == 1)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	29 f4       	brne	.+10     	; 0x11c <adc_input+0x12>
		ADMUX |= 0x00;
 112:	ec e7       	ldi	r30, 0x7C	; 124
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 83       	st	Z, r24
 11a:	07 c0       	rjmp	.+14     	; 0x12a <adc_input+0x20>
	else if (chan == 2)
 11c:	02 97       	sbiw	r24, 0x02	; 2
 11e:	29 f4       	brne	.+10     	; 0x12a <adc_input+0x20>
		ADMUX |= 0x01;
 120:	ec e7       	ldi	r30, 0x7C	; 124
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
	/* Start the conversion */
	set_bit(ADCSRA, ADSC);
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	90 64       	ori	r25, 0x40	; 64
 132:	90 83       	st	Z, r25
	/* Wait for the conversion to complete */
	while(test_bit(ADCSRA, ADSC));
 134:	90 81       	ld	r25, Z
 136:	96 fd       	sbrc	r25, 6
 138:	fd cf       	rjmp	.-6      	; 0x134 <adc_input+0x2a>
	
	unsigned int full_value = 0;
	full_value = ADC;
 13a:	80 91 78 00 	lds	r24, 0x0078
 13e:	90 91 79 00 	lds	r25, 0x0079
// 	p->data[3] = (int)floor(temp_val);
// 	p->data[4] = (int)floor(temp_val);
// 	p->data[5] = (int)floor(temp_val);
// 	if(value_over_half)
// 		p->data[3] = (int)ceil(temp_val);
	p->data[chan] = (full_value);
 142:	fb 01       	movw	r30, r22
 144:	e2 0f       	add	r30, r18
 146:	f3 1f       	adc	r31, r19
 148:	8f 3f       	cpi	r24, 0xFF	; 255
 14a:	91 05       	cpc	r25, r1
 14c:	19 f0       	breq	.+6      	; 0x154 <adc_input+0x4a>
 14e:	10 f0       	brcs	.+4      	; 0x154 <adc_input+0x4a>
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	83 83       	std	Z+3, r24	; 0x03
 156:	08 95       	ret

00000158 <__vector_18>:
		}
	CANGCON |= 0x02;
	CANGIE=(1<<ENIT) | (1<< ENRX);
}
	
void can_health(void) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	0b b6       	in	r0, 0x3b	; 59
 164:	0f 92       	push	r0
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	cf 93       	push	r28
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
 180:	ed ee       	ldi	r30, 0xED	; 237
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	c0 81       	ld	r28, Z
 186:	80 91 ec 00 	lds	r24, 0x00EC
 18a:	68 2f       	mov	r22, r24
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	80 83       	st	Z, r24
 192:	72 95       	swap	r23
 194:	62 95       	swap	r22
 196:	6f 70       	andi	r22, 0x0F	; 15
 198:	67 27       	eor	r22, r23
 19a:	7f 70       	andi	r23, 0x0F	; 15
 19c:	67 27       	eor	r22, r23
 19e:	80 91 ee 00 	lds	r24, 0x00EE
 1a2:	8f 75       	andi	r24, 0x5F	; 95
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <__vector_18+0x50>
 1a6:	98 95       	break
 1a8:	20 91 f2 00 	lds	r18, 0x00F2
 1ac:	80 91 f3 00 	lds	r24, 0x00F3
 1b0:	e4 e2       	ldi	r30, 0x24	; 36
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	22 95       	swap	r18
 1c4:	26 95       	lsr	r18
 1c6:	27 70       	andi	r18, 0x07	; 7
 1c8:	82 2b       	or	r24, r18
 1ca:	91 83       	std	Z+1, r25	; 0x01
 1cc:	80 83       	st	Z, r24
 1ce:	80 91 ef 00 	lds	r24, 0x00EF
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	82 83       	std	Z+2, r24	; 0x02
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	59 f0       	breq	.+22     	; 0x1f2 <__vector_18+0x9a>
 1dc:	e7 e2       	ldi	r30, 0x27	; 39
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	89 5d       	subi	r24, 0xD9	; 217
 1e2:	9e 4f       	sbci	r25, 0xFE	; 254
 1e4:	aa ef       	ldi	r26, 0xFA	; 250
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	2c 91       	ld	r18, X
 1ea:	21 93       	st	Z+, r18
 1ec:	e8 17       	cp	r30, r24
 1ee:	f9 07       	cpc	r31, r25
 1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__vector_18+0x90>
 1f2:	10 92 ee 00 	sts	0x00EE, r1
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	80 93 ef 00 	sts	0x00EF, r24
 1fc:	fb 01       	movw	r30, r22
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	ec 5c       	subi	r30, 0xCC	; 204
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	01 90       	ld	r0, Z+
 208:	f0 81       	ld	r31, Z
 20a:	e0 2d       	mov	r30, r0
 20c:	84 e2       	ldi	r24, 0x24	; 36
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	09 95       	icall
 212:	c0 93 ed 00 	sts	0x00ED, r28
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	cf 91       	pop	r28
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0b be       	out	0x3b, r0	; 59
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <can_tx>:
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	fb 01       	movw	r30, r22
 244:	20 81       	ld	r18, Z
 246:	31 81       	ldd	r19, Z+1	; 0x01
 248:	21 15       	cp	r18, r1
 24a:	38 40       	sbci	r19, 0x08	; 8
 24c:	08 f0       	brcs	.+2      	; 0x250 <can_tx+0x12>
 24e:	98 95       	break
 250:	92 81       	ldd	r25, Z+2	; 0x02
 252:	99 30       	cpi	r25, 0x09	; 9
 254:	08 f0       	brcs	.+2      	; 0x258 <can_tx+0x1a>
 256:	98 95       	break
 258:	8f 30       	cpi	r24, 0x0F	; 15
 25a:	08 f0       	brcs	.+2      	; 0x25e <can_tx+0x20>
 25c:	98 95       	break
 25e:	82 95       	swap	r24
 260:	80 7f       	andi	r24, 0xF0	; 240
 262:	80 93 ed 00 	sts	0x00ED, r24
 266:	80 91 ef 00 	lds	r24, 0x00EF
 26a:	80 7c       	andi	r24, 0xC0	; 192
 26c:	21 f0       	breq	.+8      	; 0x276 <can_tx+0x38>
 26e:	80 91 ee 00 	lds	r24, 0x00EE
 272:	86 ff       	sbrs	r24, 6
 274:	55 c0       	rjmp	.+170    	; 0x320 <can_tx+0xe2>
 276:	10 92 ee 00 	sts	0x00EE, r1
 27a:	10 92 ef 00 	sts	0x00EF, r1
 27e:	82 81       	ldd	r24, Z+2	; 0x02
 280:	8f 3f       	cpi	r24, 0xFF	; 255
 282:	61 f1       	breq	.+88     	; 0x2dc <can_tx+0x9e>
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	80 93 f3 00 	sts	0x00F3, r24
 298:	80 81       	ld	r24, Z
 29a:	82 95       	swap	r24
 29c:	88 0f       	add	r24, r24
 29e:	80 7e       	andi	r24, 0xE0	; 224
 2a0:	80 93 f2 00 	sts	0x00F2, r24
 2a4:	10 92 f1 00 	sts	0x00F1, r1
 2a8:	10 92 f0 00 	sts	0x00F0, r1
 2ac:	22 81       	ldd	r18, Z+2	; 0x02
 2ae:	22 23       	and	r18, r18
 2b0:	79 f0       	breq	.+30     	; 0x2d0 <can_tx+0x92>
 2b2:	df 01       	movw	r26, r30
 2b4:	13 96       	adiw	r26, 0x03	; 3
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	ca ef       	ldi	r28, 0xFA	; 250
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
 2be:	2d 91       	ld	r18, X+
 2c0:	28 83       	st	Y, r18
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	22 81       	ldd	r18, Z+2	; 0x02
 2c6:	42 2f       	mov	r20, r18
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	84 17       	cp	r24, r20
 2cc:	95 07       	cpc	r25, r21
 2ce:	b8 f3       	brcs	.-18     	; 0x2be <can_tx+0x80>
 2d0:	ef ee       	ldi	r30, 0xEF	; 239
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	28 2b       	or	r18, r24
 2d8:	20 83       	st	Z, r18
 2da:	1b c0       	rjmp	.+54     	; 0x312 <can_tx+0xd4>
 2dc:	80 81       	ld	r24, Z
 2de:	91 81       	ldd	r25, Z+1	; 0x01
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	96 95       	lsr	r25
 2e6:	87 95       	ror	r24
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
 2ec:	80 93 f3 00 	sts	0x00F3, r24
 2f0:	80 81       	ld	r24, Z
 2f2:	82 95       	swap	r24
 2f4:	88 0f       	add	r24, r24
 2f6:	80 7e       	andi	r24, 0xE0	; 224
 2f8:	80 93 f2 00 	sts	0x00F2, r24
 2fc:	10 92 f1 00 	sts	0x00F1, r1
 300:	84 e0       	ldi	r24, 0x04	; 4
 302:	80 93 f0 00 	sts	0x00F0, r24
 306:	af ee       	ldi	r26, 0xEF	; 239
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	9c 91       	ld	r25, X
 30c:	82 81       	ldd	r24, Z+2	; 0x02
 30e:	89 2b       	or	r24, r25
 310:	8c 93       	st	X, r24
 312:	ef ee       	ldi	r30, 0xEF	; 239
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	80 64       	ori	r24, 0x40	; 64
 31a:	80 83       	st	Z, r24
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	01 c0       	rjmp	.+2      	; 0x322 <can_tx+0xe4>
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <can_init>:
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	86 e0       	ldi	r24, 0x06	; 6
 32e:	80 93 e2 00 	sts	0x00E2, r24
 332:	8c e0       	ldi	r24, 0x0C	; 12
 334:	80 93 e3 00 	sts	0x00E3, r24
 338:	8a e5       	ldi	r24, 0x5A	; 90
 33a:	80 93 e4 00 	sts	0x00E4, r24
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	cd ee       	ldi	r28, 0xED	; 237
 342:	d0 e0       	ldi	r29, 0x00	; 0
 344:	ae ee       	ldi	r26, 0xEE	; 238
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	ef ee       	ldi	r30, 0xEF	; 239
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	98 2f       	mov	r25, r24
 34e:	92 95       	swap	r25
 350:	90 7f       	andi	r25, 0xF0	; 240
 352:	98 83       	st	Y, r25
 354:	1c 92       	st	X, r1
 356:	10 82       	st	Z, r1
 358:	8f 5f       	subi	r24, 0xFF	; 255
 35a:	8f 30       	cpi	r24, 0x0F	; 15
 35c:	b9 f7       	brne	.-18     	; 0x34c <can_init+0x24>
 35e:	e8 ed       	ldi	r30, 0xD8	; 216
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	82 60       	ori	r24, 0x02	; 2
 366:	80 83       	st	Z, r24
 368:	80 ea       	ldi	r24, 0xA0	; 160
 36a:	80 93 db 00 	sts	0x00DB, r24
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <can_packet_send>:
	*/
}

BOOL can_packet_send(char mob, CAN_packet *packet) {
	/* Clear global interrupts */
	cli();
 374:	f8 94       	cli
	BOOL result = can_tx(mob, packet);
 376:	63 df       	rcall	.-314    	; 0x23e <can_tx>
	/* Set global interrupts */
	sei();
 378:	78 94       	sei
	return result;
}
 37a:	08 95       	ret

0000037c <inits>:
#include <stdio.h>
#include "timer1.h"
#include "timer0.h"

void inits( void) {
	can_init();
 37c:	d5 df       	rcall	.-86     	; 0x328 <can_init>
	USART_init(MYUBRR, true);
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	83 e3       	ldi	r24, 0x33	; 51
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	93 d1       	rcall	.+806    	; 0x6ac <USART_init>
	sw_init();
 386:	10 d0       	rcall	.+32     	; 0x3a8 <sw_init>
	adc_init();
 388:	a3 de       	rcall	.-698    	; 0xd0 <adc_init>
	timer1_init();
 38a:	0e d1       	rcall	.+540    	; 0x5a8 <timer1_init>
	timer0_init();
 38c:	6d d0       	rcall	.+218    	; 0x468 <timer0_init>
	printf("\r\nSteering wheel initialized");
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	eb d1       	rcall	.+982    	; 0x76e <printf>
	sei();
 398:	78 94       	sei
	/* I'm alive LED */
	set_bit(DDRB, PB6);
 39a:	26 9a       	sbi	0x04, 6	; 4
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	08 95       	ret

000003a2 <main>:
}

int main(void)
{
	/* Initialize module */
	inits();
 3a2:	ec df       	rcall	.-40     	; 0x37c <inits>

    for(;;) {
		asm("sleep");;
 3a4:	88 95       	sleep
	}
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <main+0x2>

000003a8 <sw_init>:
uint8_t cc_value = 0;

void sw_init( void) {	
	/* Indicators init */
	/* Set PE4 and PD0 as inputs */
	clear_bit(DDRD, DDD0);
 3a8:	50 98       	cbi	0x0a, 0	; 10
	clear_bit(DDRE, DDE4);
 3aa:	6c 98       	cbi	0x0d, 4	; 13
	/* Set PE4 and PD0 as high (pull up res) */
	set_bit(PORTD, PD0);
 3ac:	58 9a       	sbi	0x0b, 0	; 11
	set_bit(PORTE, PE4);	
 3ae:	74 9a       	sbi	0x0e, 4	; 14
	
	/* Wipers init */
	clear_bit(DDRE, DDE5);
 3b0:	6d 98       	cbi	0x0d, 5	; 13
	set_bit(PORTE, PE5);
 3b2:	75 9a       	sbi	0x0e, 5	; 14
	
	/* Horn init */
	clear_bit(DDRB, DDB0);
 3b4:	20 98       	cbi	0x04, 0	; 4
	set_bit(PORTB, PB0);
 3b6:	28 9a       	sbi	0x05, 0	; 5
	
	/* Deadman */
	clear_bit(DDRB, DDB4);
 3b8:	24 98       	cbi	0x04, 4	; 4
	set_bit(PORTB, PB4);
 3ba:	2c 9a       	sbi	0x05, 4	; 5
	
	/* Speed potentiometer uses adc_init() */
	
	/* Cruise control */
	clear_bit(DDRB, DDB2);
 3bc:	22 98       	cbi	0x04, 2	; 4
	clear_bit(DDRB, DDB1);
 3be:	21 98       	cbi	0x04, 1	; 4
	set_bit(PORTB, PB2);
 3c0:	2a 9a       	sbi	0x05, 2	; 5
	set_bit(PORTB, PB1);	
 3c2:	29 9a       	sbi	0x05, 1	; 5
 3c4:	08 95       	ret

000003c6 <sw_input>:
}

void sw_input( CAN_packet* p) {	
 3c6:	fc 01       	movw	r30, r24
	/* Initialize data */
	p->data[0] = 0;
 3c8:	13 82       	std	Z+3, r1	; 0x03
	p->data[1] = 0;
 3ca:	14 82       	std	Z+4, r1	; 0x04
	p->data[2] = 0;
 3cc:	15 82       	std	Z+5, r1	; 0x05
	/* Read right/left indicator */
	if(!test_bit(PIND, PD0))
 3ce:	48 99       	sbic	0x09, 0	; 9
 3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <sw_input+0x12>
		p->data[0] |= (1<<0);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	83 83       	std	Z+3, r24	; 0x03
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <sw_input+0x1a>
	else if(!test_bit(PINE, PE4))
 3d8:	64 99       	sbic	0x0c, 4	; 12
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <sw_input+0x1a>
		p->data[0] |= (1<<1);
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	83 83       	std	Z+3, r24	; 0x03
// 		p->data[0] |= (1<<1);
// 	} else {
// 		sw_ind_left_change = sw_ind_left_temp;
// 	}
	/* Read cruise control */
	sw_cc_minus_temp = !test_bit(PINB, PB1);
 3e0:	83 b1       	in	r24, 0x03	; 3
 3e2:	21 e0       	ldi	r18, 0x01	; 1
 3e4:	86 95       	lsr	r24
 3e6:	81 70       	andi	r24, 0x01	; 1
 3e8:	82 27       	eor	r24, r18
 3ea:	80 93 33 01 	sts	0x0133, r24
	sw_cc_plus_temp = !test_bit(PINB, PB2);
 3ee:	93 b1       	in	r25, 0x03	; 3
 3f0:	92 fb       	bst	r25, 2
 3f2:	99 27       	eor	r25, r25
 3f4:	90 f9       	bld	r25, 0
 3f6:	92 27       	eor	r25, r18
 3f8:	90 93 31 01 	sts	0x0131, r25
	if(sw_cc_minus_temp == TRUE && sw_cc_minus_change == FALSE) {
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	61 f4       	brne	.+24     	; 0x418 <sw_input+0x52>
 400:	20 91 32 01 	lds	r18, 0x0132
 404:	21 11       	cpse	r18, r1
 406:	08 c0       	rjmp	.+16     	; 0x418 <sw_input+0x52>
		sw_cc_minus_change = TRUE;
		if(cc_value < 230)
 408:	20 91 2f 01 	lds	r18, 0x012F
 40c:	26 3e       	cpi	r18, 0xE6	; 230
 40e:	88 f4       	brcc	.+34     	; 0x432 <sw_input+0x6c>
		cc_value = cc_value+25;
 410:	27 5e       	subi	r18, 0xE7	; 231
 412:	20 93 2f 01 	sts	0x012F, r18
 416:	0d c0       	rjmp	.+26     	; 0x432 <sw_input+0x6c>
	} else if(sw_cc_plus_temp == TRUE && sw_cc_plus_change == FALSE) {
 418:	91 30       	cpi	r25, 0x01	; 1
 41a:	59 f4       	brne	.+22     	; 0x432 <sw_input+0x6c>
 41c:	20 91 30 01 	lds	r18, 0x0130
 420:	21 11       	cpse	r18, r1
 422:	07 c0       	rjmp	.+14     	; 0x432 <sw_input+0x6c>
		sw_cc_plus_change = TRUE;
		if(cc_value > 25)
 424:	20 91 2f 01 	lds	r18, 0x012F
 428:	2a 31       	cpi	r18, 0x1A	; 26
 42a:	18 f0       	brcs	.+6      	; 0x432 <sw_input+0x6c>
			cc_value = cc_value-25;
 42c:	29 51       	subi	r18, 0x19	; 25
 42e:	20 93 2f 01 	sts	0x012F, r18
	}
	sw_cc_minus_change = sw_cc_minus_temp;
 432:	80 93 32 01 	sts	0x0132, r24
	sw_cc_plus_change = sw_cc_plus_temp;
 436:	90 93 30 01 	sts	0x0130, r25
	p->data[2] = cc_value;
 43a:	80 91 2f 01 	lds	r24, 0x012F
 43e:	85 83       	std	Z+5, r24	; 0x05
	/* Read horn */
	if (!test_bit(PINB, PB0))
 440:	18 99       	sbic	0x03, 0	; 3
 442:	03 c0       	rjmp	.+6      	; 0x44a <sw_input+0x84>
		p->data[0] |= (1<<4);
 444:	83 81       	ldd	r24, Z+3	; 0x03
 446:	80 61       	ori	r24, 0x10	; 16
 448:	83 83       	std	Z+3, r24	; 0x03
	/* Read wiper */
	if (!test_bit(PINE, PE5))
 44a:	65 99       	sbic	0x0c, 5	; 12
 44c:	03 c0       	rjmp	.+6      	; 0x454 <sw_input+0x8e>
		p->data[0] |= (1<<5);
 44e:	83 81       	ldd	r24, Z+3	; 0x03
 450:	80 62       	ori	r24, 0x20	; 32
 452:	83 83       	std	Z+3, r24	; 0x03
	/* Read CC deadman */
	if (!test_bit(PINB, PB4))
 454:	1c 99       	sbic	0x03, 4	; 3
 456:	04 c0       	rjmp	.+8      	; 0x460 <sw_input+0x9a>
		p->data[0] |= (1<<6);
 458:	83 81       	ldd	r24, Z+3	; 0x03
 45a:	80 64       	ori	r24, 0x40	; 64
 45c:	83 83       	std	Z+3, r24	; 0x03
 45e:	08 95       	ret
	else{
		cc_value = 0;
 460:	10 92 2f 01 	sts	0x012F, r1
		p->data[2] = 0;
 464:	15 82       	std	Z+5, r1	; 0x05
 466:	08 95       	ret

00000468 <timer0_init>:
CAN_packet updated_msg;


void timer0_init( void) {
	/* clk/1024 */
	set_bit(TCCR0A, CS02);
 468:	84 b5       	in	r24, 0x24	; 36
 46a:	84 60       	ori	r24, 0x04	; 4
 46c:	84 bd       	out	0x24, r24	; 36
	set_bit(TCCR0A, CS00);
 46e:	84 b5       	in	r24, 0x24	; 36
 470:	81 60       	ori	r24, 0x01	; 1
 472:	84 bd       	out	0x24, r24	; 36
	/* Enable timer overflow */
	set_bit(TIMSK0, TOIE0);
 474:	ee e6       	ldi	r30, 0x6E	; 110
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	81 60       	ori	r24, 0x01	; 1
 47c:	80 83       	st	Z, r24
	
	current_msg.id = ID_steeringWheel;
 47e:	e5 e6       	ldi	r30, 0x65	; 101
 480:	f1 e0       	ldi	r31, 0x01	; 1
 482:	2f e0       	ldi	r18, 0x0F	; 15
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	31 83       	std	Z+1, r19	; 0x01
 488:	20 83       	st	Z, r18
	current_msg.length = 3;
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	82 83       	std	Z+2, r24	; 0x02
	current_msg.data[0] = 0;
 48e:	13 82       	std	Z+3, r1	; 0x03
	current_msg.data[1] = 0;
 490:	14 82       	std	Z+4, r1	; 0x04
	current_msg.data[2] = 0;
 492:	15 82       	std	Z+5, r1	; 0x05
	/*current_msg.data[2] = 0;*/
	updated_msg.id = ID_steeringWheel;
 494:	ea e5       	ldi	r30, 0x5A	; 90
 496:	f1 e0       	ldi	r31, 0x01	; 1
 498:	31 83       	std	Z+1, r19	; 0x01
 49a:	20 83       	st	Z, r18
	updated_msg.length = 3;
 49c:	82 83       	std	Z+2, r24	; 0x02
	updated_msg.data[0] = 0;
 49e:	13 82       	std	Z+3, r1	; 0x03
	updated_msg.data[1] = 0;
 4a0:	14 82       	std	Z+4, r1	; 0x04
	updated_msg.data[2] = 0;
 4a2:	15 82       	std	Z+5, r1	; 0x05
	/*current_msg.data[2] = 0;*/
	ret = FALSE;
 4a4:	10 92 59 01 	sts	0x0159, r1
 4a8:	08 95       	ret

000004aa <__vector_17>:
	/*turned = TRUE;*/
}

ISR(TIMER0_OVF_vect) {
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	0b b6       	in	r0, 0x3b	; 59
 4b6:	0f 92       	push	r0
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
	/* Update one CAN_packet */
	cli();
 4d0:	f8 94       	cli
	sw_input(&updated_msg);	
 4d2:	8a e5       	ldi	r24, 0x5A	; 90
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	77 df       	rcall	.-274    	; 0x3c6 <sw_input>
	adc_init();
 4d8:	fb dd       	rcall	.-1034   	; 0xd0 <adc_init>
	adc_input(1, &updated_msg);
 4da:	6a e5       	ldi	r22, 0x5A	; 90
 4dc:	71 e0       	ldi	r23, 0x01	; 1
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	13 de       	rcall	.-986    	; 0x10a <adc_input>
	//adc_input(2, &updated_msg);
	adc_sleep();
 4e4:	07 de       	rcall	.-1010   	; 0xf4 <adc_sleep>
// 	if(turned && (updated_msg.data[2] < 10)) {
// 		turned = FALSE;
// 		clear_bit(updated_msg.data[0], 0);
// 		clear_bit(updated_msg.data[0], 1);
// 	}		
	sei();
 4e6:	78 94       	sei
	/* Compare the two packets */
	diff_buttons = memcmp(&current_msg.data[0], &updated_msg.data[0], 1);
 4e8:	e5 e6       	ldi	r30, 0x65	; 101
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	23 81       	ldd	r18, Z+3	; 0x03
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	aa e5       	ldi	r26, 0x5A	; 90
 4f2:	b1 e0       	ldi	r27, 0x01	; 1
 4f4:	13 96       	adiw	r26, 0x03	; 3
 4f6:	8c 91       	ld	r24, X
 4f8:	13 97       	sbiw	r26, 0x03	; 3
 4fa:	28 1b       	sub	r18, r24
 4fc:	31 09       	sbc	r19, r1
 4fe:	30 93 53 01 	sts	0x0153, r19
 502:	20 93 52 01 	sts	0x0152, r18
	diff_speed = memcmp(&updated_msg.data[1], &current_msg.data[1], 1);
 506:	14 96       	adiw	r26, 0x04	; 4
 508:	8c 91       	ld	r24, X
 50a:	14 97       	sbiw	r26, 0x04	; 4
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	44 81       	ldd	r20, Z+4	; 0x04
 510:	84 1b       	sub	r24, r20
 512:	91 09       	sbc	r25, r1
 514:	90 93 55 01 	sts	0x0155, r25
 518:	80 93 54 01 	sts	0x0154, r24
	diff_cc = memcmp(&updated_msg.data[2], &current_msg.data[2], 1);
 51c:	15 96       	adiw	r26, 0x05	; 5
 51e:	4c 91       	ld	r20, X
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	65 81       	ldd	r22, Z+5	; 0x05
 524:	46 1b       	sub	r20, r22
 526:	51 09       	sbc	r21, r1
 528:	50 93 58 01 	sts	0x0158, r21
 52c:	40 93 57 01 	sts	0x0157, r20

	if (((diff_speed < 100) &&(abs(diff_speed) > 3)) || abs(diff_buttons) || abs(diff_cc)) {
 530:	84 36       	cpi	r24, 0x64	; 100
 532:	91 05       	cpc	r25, r1
 534:	54 f4       	brge	.+20     	; 0x54a <__vector_17+0xa0>
 536:	bc 01       	movw	r22, r24
 538:	99 23       	and	r25, r25
 53a:	24 f4       	brge	.+8      	; 0x544 <__vector_17+0x9a>
 53c:	66 27       	eor	r22, r22
 53e:	77 27       	eor	r23, r23
 540:	68 1b       	sub	r22, r24
 542:	79 0b       	sbc	r23, r25
 544:	64 30       	cpi	r22, 0x04	; 4
 546:	71 05       	cpc	r23, r1
 548:	24 f4       	brge	.+8      	; 0x552 <__vector_17+0xa8>
 54a:	23 2b       	or	r18, r19
 54c:	11 f4       	brne	.+4      	; 0x552 <__vector_17+0xa8>
 54e:	45 2b       	or	r20, r21
 550:	79 f0       	breq	.+30     	; 0x570 <__vector_17+0xc6>
// 		printf("\r\nCurrent ID %d, d[0] %d, d[1] %d", current_msg.id, current_msg.data[0], current_msg.data[1]);
// 		printf("\r\nUpdated ID %d, d[0] %d, d[1] %d", updated_msg.id, updated_msg.data[0], updated_msg.data[1]);
// 		printf("\r\ndiff_buttons - %d", diff_buttons);
// 		printf("\r\ndiff_speed - %d\n", diff_speed);
		/* Send a message with new data */
		ret = can_packet_send(0, &updated_msg);
 552:	6a e5       	ldi	r22, 0x5A	; 90
 554:	71 e0       	ldi	r23, 0x01	; 1
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	0d df       	rcall	.-486    	; 0x374 <can_packet_send>
 55a:	80 93 59 01 	sts	0x0159, r24
		current_msg = updated_msg;	
 55e:	8b e0       	ldi	r24, 0x0B	; 11
 560:	ea e5       	ldi	r30, 0x5A	; 90
 562:	f1 e0       	ldi	r31, 0x01	; 1
 564:	a5 e6       	ldi	r26, 0x65	; 101
 566:	b1 e0       	ldi	r27, 0x01	; 1
 568:	01 90       	ld	r0, Z+
 56a:	0d 92       	st	X+, r0
 56c:	8a 95       	dec	r24
 56e:	e1 f7       	brne	.-8      	; 0x568 <__vector_17+0xbe>
// 	printf("\r\nMessage ID - %d", updated_msg.id);
// 	printf("\r\nMessage length - %d", updated_msg.length);
// 	for(int i = 0; i < 3; i++)
// 	printf("\r\nData[%d] received - %u", i, updated_msg.data[i]);
// 	printf("\n");
	if (ret) {
 570:	80 91 59 01 	lds	r24, 0x0159
 574:	88 23       	and	r24, r24
 576:	21 f0       	breq	.+8      	; 0x580 <__vector_17+0xd6>
		set_bit(DDRB, PB7);
 578:	27 9a       	sbi	0x04, 7	; 4
		ret = FALSE;
 57a:	10 92 59 01 	sts	0x0159, r1
 57e:	01 c0       	rjmp	.+2      	; 0x582 <__vector_17+0xd8>
	} else
		clear_bit(DDRB, PB7);
 580:	27 98       	cbi	0x04, 7	; 4
 582:	ff 91       	pop	r31
 584:	ef 91       	pop	r30
 586:	bf 91       	pop	r27
 588:	af 91       	pop	r26
 58a:	9f 91       	pop	r25
 58c:	8f 91       	pop	r24
 58e:	7f 91       	pop	r23
 590:	6f 91       	pop	r22
 592:	5f 91       	pop	r21
 594:	4f 91       	pop	r20
 596:	3f 91       	pop	r19
 598:	2f 91       	pop	r18
 59a:	0f 90       	pop	r0
 59c:	0b be       	out	0x3b, r0	; 59
 59e:	0f 90       	pop	r0
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <timer1_init>:
	/* DIsable interrupts */
	cli(); // same as cli()?
	/* Set TCNT1 to i */
	TCNT1 = i;
	/* Restore global interrupt flag */
	SREG = sreg;
 5a8:	e1 e8       	ldi	r30, 0x81	; 129
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	82 60       	ori	r24, 0x02	; 2
 5b0:	80 83       	st	Z, r24
 5b2:	80 81       	ld	r24, Z
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	80 83       	st	Z, r24
 5b8:	10 92 85 00 	sts	0x0085, r1
 5bc:	10 92 84 00 	sts	0x0084, r1
 5c0:	ef e6       	ldi	r30, 0x6F	; 111
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	81 60       	ori	r24, 0x01	; 1
 5c8:	80 83       	st	Z, r24
 5ca:	78 94       	sei
 5cc:	e0 e8       	ldi	r30, 0x80	; 128
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	80 68       	ori	r24, 0x80	; 128
 5d4:	80 83       	st	Z, r24
 5d6:	80 81       	ld	r24, Z
 5d8:	8f 7b       	andi	r24, 0xBF	; 191
 5da:	80 83       	st	Z, r24
 5dc:	08 95       	ret

000005de <__vector_15>:
}


ISR(TIMER1_OVF_vect) {
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	0b b6       	in	r0, 0x3b	; 59
 5ea:	0f 92       	push	r0
 5ec:	2f 93       	push	r18
 5ee:	3f 93       	push	r19
 5f0:	4f 93       	push	r20
 5f2:	5f 93       	push	r21
 5f4:	6f 93       	push	r22
 5f6:	7f 93       	push	r23
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	af 93       	push	r26
 5fe:	bf 93       	push	r27
 600:	ef 93       	push	r30
 602:	ff 93       	push	r31
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	cd b7       	in	r28, 0x3d	; 61
 60a:	de b7       	in	r29, 0x3e	; 62
 60c:	2b 97       	sbiw	r28, 0x0b	; 11
 60e:	de bf       	out	0x3e, r29	; 62
 610:	cd bf       	out	0x3d, r28	; 61
	/* Send a "I'm alive" message with the data */
	CAN_packet msg;
	BOOL ret = FALSE;
	msg.id = ID_steeringWheel;
 612:	8f e0       	ldi	r24, 0x0F	; 15
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	9a 83       	std	Y+2, r25	; 0x02
 618:	89 83       	std	Y+1, r24	; 0x01
	msg.length = 3;
 61a:	83 e0       	ldi	r24, 0x03	; 3
 61c:	8b 83       	std	Y+3, r24	; 0x03
	/* Initialize data */
	msg.data[0] = 0;
 61e:	1c 82       	std	Y+4, r1	; 0x04
	msg.data[1] = 0;
 620:	1d 82       	std	Y+5, r1	; 0x05
	msg.data[2] = 0;
 622:	1e 82       	std	Y+6, r1	; 0x06
	cli();
 624:	f8 94       	cli
	sw_input(&msg);
 626:	ce 01       	movw	r24, r28
 628:	01 96       	adiw	r24, 0x01	; 1
 62a:	cd de       	rcall	.-614    	; 0x3c6 <sw_input>
	adc_init();
 62c:	51 dd       	rcall	.-1374   	; 0xd0 <adc_init>
	adc_input(1, &msg);
 62e:	be 01       	movw	r22, r28
 630:	6f 5f       	subi	r22, 0xFF	; 255
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	68 dd       	rcall	.-1328   	; 0x10a <adc_input>
	//adc_input(2, &msg);
	adc_sleep();
 63a:	5c dd       	rcall	.-1352   	; 0xf4 <adc_sleep>
	ret = can_packet_send(0, &msg);
 63c:	be 01       	movw	r22, r28
 63e:	6f 5f       	subi	r22, 0xFF	; 255
 640:	7f 4f       	sbci	r23, 0xFF	; 255
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	97 de       	rcall	.-722    	; 0x374 <can_packet_send>
	sei();
 646:	78 94       	sei
	if(ret) {
 648:	88 23       	and	r24, r24
 64a:	21 f0       	breq	.+8      	; 0x654 <__vector_15+0x76>
		toggle_bit(DDRB, PB5);
 64c:	94 b1       	in	r25, 0x04	; 4
 64e:	80 e2       	ldi	r24, 0x20	; 32
 650:	89 27       	eor	r24, r25
 652:	84 b9       	out	0x04, r24	; 4
	}
	ret = FALSE;
 654:	2b 96       	adiw	r28, 0x0b	; 11
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	0f 90       	pop	r0
 67e:	0b be       	out	0x3b, r0	; 59
 680:	0f 90       	pop	r0
 682:	0f be       	out	0x3f, r0	; 63
 684:	0f 90       	pop	r0
 686:	1f 90       	pop	r1
 688:	18 95       	reti

0000068a <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 68a:	e0 ec       	ldi	r30, 0xC0	; 192
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	90 81       	ld	r25, Z
 690:	95 ff       	sbrs	r25, 5
 692:	fd cf       	rjmp	.-6      	; 0x68e <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 694:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	08 95       	ret

0000069c <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 69c:	e0 ec       	ldi	r30, 0xC0	; 192
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	88 23       	and	r24, r24
 6a4:	ec f7       	brge	.-6      	; 0x6a0 <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 6a6:	80 91 c6 00 	lds	r24, 0x00C6
}
 6aa:	08 95       	ret

000006ac <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 6ac:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 6b0:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 6b4:	86 e0       	ldi	r24, 0x06	; 6
 6b6:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 6ba:	66 23       	and	r22, r22
 6bc:	41 f0       	breq	.+16     	; 0x6ce <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 6be:	e1 ec       	ldi	r30, 0xC1	; 193
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	80 81       	ld	r24, Z
 6c4:	80 61       	ori	r24, 0x10	; 16
 6c6:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 6c8:	80 81       	ld	r24, Z
 6ca:	88 60       	ori	r24, 0x08	; 8
 6cc:	80 83       	st	Z, r24
	}
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 6ce:	6e e4       	ldi	r22, 0x4E	; 78
 6d0:	73 e0       	ldi	r23, 0x03	; 3
 6d2:	85 e4       	ldi	r24, 0x45	; 69
 6d4:	93 e0       	ldi	r25, 0x03	; 3
 6d6:	01 c0       	rjmp	.+2      	; 0x6da <fdevopen>
 6d8:	08 95       	ret

000006da <fdevopen>:
 6da:	0f 93       	push	r16
 6dc:	1f 93       	push	r17
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	00 97       	sbiw	r24, 0x00	; 0
 6e4:	31 f4       	brne	.+12     	; 0x6f2 <fdevopen+0x18>
 6e6:	61 15       	cp	r22, r1
 6e8:	71 05       	cpc	r23, r1
 6ea:	19 f4       	brne	.+6      	; 0x6f2 <fdevopen+0x18>
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	39 c0       	rjmp	.+114    	; 0x764 <fdevopen+0x8a>
 6f2:	8b 01       	movw	r16, r22
 6f4:	ec 01       	movw	r28, r24
 6f6:	6e e0       	ldi	r22, 0x0E	; 14
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	38 d2       	rcall	.+1136   	; 0xb70 <calloc>
 700:	fc 01       	movw	r30, r24
 702:	89 2b       	or	r24, r25
 704:	99 f3       	breq	.-26     	; 0x6ec <fdevopen+0x12>
 706:	80 e8       	ldi	r24, 0x80	; 128
 708:	83 83       	std	Z+3, r24	; 0x03
 70a:	01 15       	cp	r16, r1
 70c:	11 05       	cpc	r17, r1
 70e:	71 f0       	breq	.+28     	; 0x72c <fdevopen+0x52>
 710:	13 87       	std	Z+11, r17	; 0x0b
 712:	02 87       	std	Z+10, r16	; 0x0a
 714:	81 e8       	ldi	r24, 0x81	; 129
 716:	83 83       	std	Z+3, r24	; 0x03
 718:	80 91 70 01 	lds	r24, 0x0170
 71c:	90 91 71 01 	lds	r25, 0x0171
 720:	89 2b       	or	r24, r25
 722:	21 f4       	brne	.+8      	; 0x72c <fdevopen+0x52>
 724:	f0 93 71 01 	sts	0x0171, r31
 728:	e0 93 70 01 	sts	0x0170, r30
 72c:	20 97       	sbiw	r28, 0x00	; 0
 72e:	c9 f0       	breq	.+50     	; 0x762 <fdevopen+0x88>
 730:	d1 87       	std	Z+9, r29	; 0x09
 732:	c0 87       	std	Z+8, r28	; 0x08
 734:	83 81       	ldd	r24, Z+3	; 0x03
 736:	82 60       	ori	r24, 0x02	; 2
 738:	83 83       	std	Z+3, r24	; 0x03
 73a:	80 91 72 01 	lds	r24, 0x0172
 73e:	90 91 73 01 	lds	r25, 0x0173
 742:	89 2b       	or	r24, r25
 744:	71 f4       	brne	.+28     	; 0x762 <fdevopen+0x88>
 746:	f0 93 73 01 	sts	0x0173, r31
 74a:	e0 93 72 01 	sts	0x0172, r30
 74e:	80 91 74 01 	lds	r24, 0x0174
 752:	90 91 75 01 	lds	r25, 0x0175
 756:	89 2b       	or	r24, r25
 758:	21 f4       	brne	.+8      	; 0x762 <fdevopen+0x88>
 75a:	f0 93 75 01 	sts	0x0175, r31
 75e:	e0 93 74 01 	sts	0x0174, r30
 762:	cf 01       	movw	r24, r30
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	1f 91       	pop	r17
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <printf>:
 76e:	cf 93       	push	r28
 770:	df 93       	push	r29
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	ae 01       	movw	r20, r28
 778:	4b 5f       	subi	r20, 0xFB	; 251
 77a:	5f 4f       	sbci	r21, 0xFF	; 255
 77c:	fa 01       	movw	r30, r20
 77e:	61 91       	ld	r22, Z+
 780:	71 91       	ld	r23, Z+
 782:	af 01       	movw	r20, r30
 784:	80 91 72 01 	lds	r24, 0x0172
 788:	90 91 73 01 	lds	r25, 0x0173
 78c:	03 d0       	rcall	.+6      	; 0x794 <vfprintf>
 78e:	df 91       	pop	r29
 790:	cf 91       	pop	r28
 792:	08 95       	ret

00000794 <vfprintf>:
 794:	2f 92       	push	r2
 796:	3f 92       	push	r3
 798:	4f 92       	push	r4
 79a:	5f 92       	push	r5
 79c:	6f 92       	push	r6
 79e:	7f 92       	push	r7
 7a0:	8f 92       	push	r8
 7a2:	9f 92       	push	r9
 7a4:	af 92       	push	r10
 7a6:	bf 92       	push	r11
 7a8:	cf 92       	push	r12
 7aa:	df 92       	push	r13
 7ac:	ef 92       	push	r14
 7ae:	ff 92       	push	r15
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	2c 97       	sbiw	r28, 0x0c	; 12
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	f8 94       	cli
 7c2:	de bf       	out	0x3e, r29	; 62
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	cd bf       	out	0x3d, r28	; 61
 7c8:	7c 01       	movw	r14, r24
 7ca:	6b 01       	movw	r12, r22
 7cc:	8a 01       	movw	r16, r20
 7ce:	fc 01       	movw	r30, r24
 7d0:	17 82       	std	Z+7, r1	; 0x07
 7d2:	16 82       	std	Z+6, r1	; 0x06
 7d4:	83 81       	ldd	r24, Z+3	; 0x03
 7d6:	81 ff       	sbrs	r24, 1
 7d8:	b0 c1       	rjmp	.+864    	; 0xb3a <vfprintf+0x3a6>
 7da:	ce 01       	movw	r24, r28
 7dc:	01 96       	adiw	r24, 0x01	; 1
 7de:	4c 01       	movw	r8, r24
 7e0:	f7 01       	movw	r30, r14
 7e2:	93 81       	ldd	r25, Z+3	; 0x03
 7e4:	f6 01       	movw	r30, r12
 7e6:	93 fd       	sbrc	r25, 3
 7e8:	85 91       	lpm	r24, Z+
 7ea:	93 ff       	sbrs	r25, 3
 7ec:	81 91       	ld	r24, Z+
 7ee:	6f 01       	movw	r12, r30
 7f0:	88 23       	and	r24, r24
 7f2:	09 f4       	brne	.+2      	; 0x7f6 <vfprintf+0x62>
 7f4:	9e c1       	rjmp	.+828    	; 0xb32 <vfprintf+0x39e>
 7f6:	85 32       	cpi	r24, 0x25	; 37
 7f8:	39 f4       	brne	.+14     	; 0x808 <vfprintf+0x74>
 7fa:	93 fd       	sbrc	r25, 3
 7fc:	85 91       	lpm	r24, Z+
 7fe:	93 ff       	sbrs	r25, 3
 800:	81 91       	ld	r24, Z+
 802:	6f 01       	movw	r12, r30
 804:	85 32       	cpi	r24, 0x25	; 37
 806:	21 f4       	brne	.+8      	; 0x810 <vfprintf+0x7c>
 808:	b7 01       	movw	r22, r14
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	15 d3       	rcall	.+1578   	; 0xe38 <fputc>
 80e:	e8 cf       	rjmp	.-48     	; 0x7e0 <vfprintf+0x4c>
 810:	51 2c       	mov	r5, r1
 812:	31 2c       	mov	r3, r1
 814:	20 e0       	ldi	r18, 0x00	; 0
 816:	20 32       	cpi	r18, 0x20	; 32
 818:	a0 f4       	brcc	.+40     	; 0x842 <vfprintf+0xae>
 81a:	8b 32       	cpi	r24, 0x2B	; 43
 81c:	69 f0       	breq	.+26     	; 0x838 <vfprintf+0xa4>
 81e:	30 f4       	brcc	.+12     	; 0x82c <vfprintf+0x98>
 820:	80 32       	cpi	r24, 0x20	; 32
 822:	59 f0       	breq	.+22     	; 0x83a <vfprintf+0xa6>
 824:	83 32       	cpi	r24, 0x23	; 35
 826:	69 f4       	brne	.+26     	; 0x842 <vfprintf+0xae>
 828:	20 61       	ori	r18, 0x10	; 16
 82a:	2c c0       	rjmp	.+88     	; 0x884 <vfprintf+0xf0>
 82c:	8d 32       	cpi	r24, 0x2D	; 45
 82e:	39 f0       	breq	.+14     	; 0x83e <vfprintf+0xaa>
 830:	80 33       	cpi	r24, 0x30	; 48
 832:	39 f4       	brne	.+14     	; 0x842 <vfprintf+0xae>
 834:	21 60       	ori	r18, 0x01	; 1
 836:	26 c0       	rjmp	.+76     	; 0x884 <vfprintf+0xf0>
 838:	22 60       	ori	r18, 0x02	; 2
 83a:	24 60       	ori	r18, 0x04	; 4
 83c:	23 c0       	rjmp	.+70     	; 0x884 <vfprintf+0xf0>
 83e:	28 60       	ori	r18, 0x08	; 8
 840:	21 c0       	rjmp	.+66     	; 0x884 <vfprintf+0xf0>
 842:	27 fd       	sbrc	r18, 7
 844:	27 c0       	rjmp	.+78     	; 0x894 <vfprintf+0x100>
 846:	30 ed       	ldi	r19, 0xD0	; 208
 848:	38 0f       	add	r19, r24
 84a:	3a 30       	cpi	r19, 0x0A	; 10
 84c:	78 f4       	brcc	.+30     	; 0x86c <vfprintf+0xd8>
 84e:	26 ff       	sbrs	r18, 6
 850:	06 c0       	rjmp	.+12     	; 0x85e <vfprintf+0xca>
 852:	fa e0       	ldi	r31, 0x0A	; 10
 854:	5f 9e       	mul	r5, r31
 856:	30 0d       	add	r19, r0
 858:	11 24       	eor	r1, r1
 85a:	53 2e       	mov	r5, r19
 85c:	13 c0       	rjmp	.+38     	; 0x884 <vfprintf+0xf0>
 85e:	8a e0       	ldi	r24, 0x0A	; 10
 860:	38 9e       	mul	r3, r24
 862:	30 0d       	add	r19, r0
 864:	11 24       	eor	r1, r1
 866:	33 2e       	mov	r3, r19
 868:	20 62       	ori	r18, 0x20	; 32
 86a:	0c c0       	rjmp	.+24     	; 0x884 <vfprintf+0xf0>
 86c:	8e 32       	cpi	r24, 0x2E	; 46
 86e:	21 f4       	brne	.+8      	; 0x878 <vfprintf+0xe4>
 870:	26 fd       	sbrc	r18, 6
 872:	5f c1       	rjmp	.+702    	; 0xb32 <vfprintf+0x39e>
 874:	20 64       	ori	r18, 0x40	; 64
 876:	06 c0       	rjmp	.+12     	; 0x884 <vfprintf+0xf0>
 878:	8c 36       	cpi	r24, 0x6C	; 108
 87a:	11 f4       	brne	.+4      	; 0x880 <vfprintf+0xec>
 87c:	20 68       	ori	r18, 0x80	; 128
 87e:	02 c0       	rjmp	.+4      	; 0x884 <vfprintf+0xf0>
 880:	88 36       	cpi	r24, 0x68	; 104
 882:	41 f4       	brne	.+16     	; 0x894 <vfprintf+0x100>
 884:	f6 01       	movw	r30, r12
 886:	93 fd       	sbrc	r25, 3
 888:	85 91       	lpm	r24, Z+
 88a:	93 ff       	sbrs	r25, 3
 88c:	81 91       	ld	r24, Z+
 88e:	6f 01       	movw	r12, r30
 890:	81 11       	cpse	r24, r1
 892:	c1 cf       	rjmp	.-126    	; 0x816 <vfprintf+0x82>
 894:	98 2f       	mov	r25, r24
 896:	9f 7d       	andi	r25, 0xDF	; 223
 898:	95 54       	subi	r25, 0x45	; 69
 89a:	93 30       	cpi	r25, 0x03	; 3
 89c:	28 f4       	brcc	.+10     	; 0x8a8 <vfprintf+0x114>
 89e:	0c 5f       	subi	r16, 0xFC	; 252
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	ff e3       	ldi	r31, 0x3F	; 63
 8a4:	f9 83       	std	Y+1, r31	; 0x01
 8a6:	0d c0       	rjmp	.+26     	; 0x8c2 <vfprintf+0x12e>
 8a8:	83 36       	cpi	r24, 0x63	; 99
 8aa:	31 f0       	breq	.+12     	; 0x8b8 <vfprintf+0x124>
 8ac:	83 37       	cpi	r24, 0x73	; 115
 8ae:	71 f0       	breq	.+28     	; 0x8cc <vfprintf+0x138>
 8b0:	83 35       	cpi	r24, 0x53	; 83
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <vfprintf+0x122>
 8b4:	57 c0       	rjmp	.+174    	; 0x964 <vfprintf+0x1d0>
 8b6:	21 c0       	rjmp	.+66     	; 0x8fa <vfprintf+0x166>
 8b8:	f8 01       	movw	r30, r16
 8ba:	80 81       	ld	r24, Z
 8bc:	89 83       	std	Y+1, r24	; 0x01
 8be:	0e 5f       	subi	r16, 0xFE	; 254
 8c0:	1f 4f       	sbci	r17, 0xFF	; 255
 8c2:	44 24       	eor	r4, r4
 8c4:	43 94       	inc	r4
 8c6:	51 2c       	mov	r5, r1
 8c8:	54 01       	movw	r10, r8
 8ca:	14 c0       	rjmp	.+40     	; 0x8f4 <vfprintf+0x160>
 8cc:	38 01       	movw	r6, r16
 8ce:	f2 e0       	ldi	r31, 0x02	; 2
 8d0:	6f 0e       	add	r6, r31
 8d2:	71 1c       	adc	r7, r1
 8d4:	f8 01       	movw	r30, r16
 8d6:	a0 80       	ld	r10, Z
 8d8:	b1 80       	ldd	r11, Z+1	; 0x01
 8da:	26 ff       	sbrs	r18, 6
 8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <vfprintf+0x150>
 8de:	65 2d       	mov	r22, r5
 8e0:	70 e0       	ldi	r23, 0x00	; 0
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <vfprintf+0x154>
 8e4:	6f ef       	ldi	r22, 0xFF	; 255
 8e6:	7f ef       	ldi	r23, 0xFF	; 255
 8e8:	c5 01       	movw	r24, r10
 8ea:	2c 87       	std	Y+12, r18	; 0x0c
 8ec:	9a d2       	rcall	.+1332   	; 0xe22 <strnlen>
 8ee:	2c 01       	movw	r4, r24
 8f0:	83 01       	movw	r16, r6
 8f2:	2c 85       	ldd	r18, Y+12	; 0x0c
 8f4:	2f 77       	andi	r18, 0x7F	; 127
 8f6:	22 2e       	mov	r2, r18
 8f8:	16 c0       	rjmp	.+44     	; 0x926 <vfprintf+0x192>
 8fa:	38 01       	movw	r6, r16
 8fc:	f2 e0       	ldi	r31, 0x02	; 2
 8fe:	6f 0e       	add	r6, r31
 900:	71 1c       	adc	r7, r1
 902:	f8 01       	movw	r30, r16
 904:	a0 80       	ld	r10, Z
 906:	b1 80       	ldd	r11, Z+1	; 0x01
 908:	26 ff       	sbrs	r18, 6
 90a:	03 c0       	rjmp	.+6      	; 0x912 <vfprintf+0x17e>
 90c:	65 2d       	mov	r22, r5
 90e:	70 e0       	ldi	r23, 0x00	; 0
 910:	02 c0       	rjmp	.+4      	; 0x916 <vfprintf+0x182>
 912:	6f ef       	ldi	r22, 0xFF	; 255
 914:	7f ef       	ldi	r23, 0xFF	; 255
 916:	c5 01       	movw	r24, r10
 918:	2c 87       	std	Y+12, r18	; 0x0c
 91a:	71 d2       	rcall	.+1250   	; 0xdfe <strnlen_P>
 91c:	2c 01       	movw	r4, r24
 91e:	2c 85       	ldd	r18, Y+12	; 0x0c
 920:	20 68       	ori	r18, 0x80	; 128
 922:	22 2e       	mov	r2, r18
 924:	83 01       	movw	r16, r6
 926:	23 fc       	sbrc	r2, 3
 928:	19 c0       	rjmp	.+50     	; 0x95c <vfprintf+0x1c8>
 92a:	83 2d       	mov	r24, r3
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	48 16       	cp	r4, r24
 930:	59 06       	cpc	r5, r25
 932:	a0 f4       	brcc	.+40     	; 0x95c <vfprintf+0x1c8>
 934:	b7 01       	movw	r22, r14
 936:	80 e2       	ldi	r24, 0x20	; 32
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	7e d2       	rcall	.+1276   	; 0xe38 <fputc>
 93c:	3a 94       	dec	r3
 93e:	f5 cf       	rjmp	.-22     	; 0x92a <vfprintf+0x196>
 940:	f5 01       	movw	r30, r10
 942:	27 fc       	sbrc	r2, 7
 944:	85 91       	lpm	r24, Z+
 946:	27 fe       	sbrs	r2, 7
 948:	81 91       	ld	r24, Z+
 94a:	5f 01       	movw	r10, r30
 94c:	b7 01       	movw	r22, r14
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	73 d2       	rcall	.+1254   	; 0xe38 <fputc>
 952:	31 10       	cpse	r3, r1
 954:	3a 94       	dec	r3
 956:	f1 e0       	ldi	r31, 0x01	; 1
 958:	4f 1a       	sub	r4, r31
 95a:	51 08       	sbc	r5, r1
 95c:	41 14       	cp	r4, r1
 95e:	51 04       	cpc	r5, r1
 960:	79 f7       	brne	.-34     	; 0x940 <vfprintf+0x1ac>
 962:	de c0       	rjmp	.+444    	; 0xb20 <vfprintf+0x38c>
 964:	84 36       	cpi	r24, 0x64	; 100
 966:	11 f0       	breq	.+4      	; 0x96c <vfprintf+0x1d8>
 968:	89 36       	cpi	r24, 0x69	; 105
 96a:	31 f5       	brne	.+76     	; 0x9b8 <vfprintf+0x224>
 96c:	f8 01       	movw	r30, r16
 96e:	27 ff       	sbrs	r18, 7
 970:	07 c0       	rjmp	.+14     	; 0x980 <vfprintf+0x1ec>
 972:	60 81       	ld	r22, Z
 974:	71 81       	ldd	r23, Z+1	; 0x01
 976:	82 81       	ldd	r24, Z+2	; 0x02
 978:	93 81       	ldd	r25, Z+3	; 0x03
 97a:	0c 5f       	subi	r16, 0xFC	; 252
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	08 c0       	rjmp	.+16     	; 0x990 <vfprintf+0x1fc>
 980:	60 81       	ld	r22, Z
 982:	71 81       	ldd	r23, Z+1	; 0x01
 984:	07 2e       	mov	r0, r23
 986:	00 0c       	add	r0, r0
 988:	88 0b       	sbc	r24, r24
 98a:	99 0b       	sbc	r25, r25
 98c:	0e 5f       	subi	r16, 0xFE	; 254
 98e:	1f 4f       	sbci	r17, 0xFF	; 255
 990:	2f 76       	andi	r18, 0x6F	; 111
 992:	72 2e       	mov	r7, r18
 994:	97 ff       	sbrs	r25, 7
 996:	09 c0       	rjmp	.+18     	; 0x9aa <vfprintf+0x216>
 998:	90 95       	com	r25
 99a:	80 95       	com	r24
 99c:	70 95       	com	r23
 99e:	61 95       	neg	r22
 9a0:	7f 4f       	sbci	r23, 0xFF	; 255
 9a2:	8f 4f       	sbci	r24, 0xFF	; 255
 9a4:	9f 4f       	sbci	r25, 0xFF	; 255
 9a6:	20 68       	ori	r18, 0x80	; 128
 9a8:	72 2e       	mov	r7, r18
 9aa:	2a e0       	ldi	r18, 0x0A	; 10
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	a4 01       	movw	r20, r8
 9b0:	7b d2       	rcall	.+1270   	; 0xea8 <__ultoa_invert>
 9b2:	a8 2e       	mov	r10, r24
 9b4:	a8 18       	sub	r10, r8
 9b6:	43 c0       	rjmp	.+134    	; 0xa3e <vfprintf+0x2aa>
 9b8:	85 37       	cpi	r24, 0x75	; 117
 9ba:	29 f4       	brne	.+10     	; 0x9c6 <vfprintf+0x232>
 9bc:	2f 7e       	andi	r18, 0xEF	; 239
 9be:	b2 2e       	mov	r11, r18
 9c0:	2a e0       	ldi	r18, 0x0A	; 10
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	25 c0       	rjmp	.+74     	; 0xa10 <vfprintf+0x27c>
 9c6:	f2 2f       	mov	r31, r18
 9c8:	f9 7f       	andi	r31, 0xF9	; 249
 9ca:	bf 2e       	mov	r11, r31
 9cc:	8f 36       	cpi	r24, 0x6F	; 111
 9ce:	c1 f0       	breq	.+48     	; 0xa00 <vfprintf+0x26c>
 9d0:	18 f4       	brcc	.+6      	; 0x9d8 <vfprintf+0x244>
 9d2:	88 35       	cpi	r24, 0x58	; 88
 9d4:	79 f0       	breq	.+30     	; 0x9f4 <vfprintf+0x260>
 9d6:	ad c0       	rjmp	.+346    	; 0xb32 <vfprintf+0x39e>
 9d8:	80 37       	cpi	r24, 0x70	; 112
 9da:	19 f0       	breq	.+6      	; 0x9e2 <vfprintf+0x24e>
 9dc:	88 37       	cpi	r24, 0x78	; 120
 9de:	21 f0       	breq	.+8      	; 0x9e8 <vfprintf+0x254>
 9e0:	a8 c0       	rjmp	.+336    	; 0xb32 <vfprintf+0x39e>
 9e2:	2f 2f       	mov	r18, r31
 9e4:	20 61       	ori	r18, 0x10	; 16
 9e6:	b2 2e       	mov	r11, r18
 9e8:	b4 fe       	sbrs	r11, 4
 9ea:	0d c0       	rjmp	.+26     	; 0xa06 <vfprintf+0x272>
 9ec:	8b 2d       	mov	r24, r11
 9ee:	84 60       	ori	r24, 0x04	; 4
 9f0:	b8 2e       	mov	r11, r24
 9f2:	09 c0       	rjmp	.+18     	; 0xa06 <vfprintf+0x272>
 9f4:	24 ff       	sbrs	r18, 4
 9f6:	0a c0       	rjmp	.+20     	; 0xa0c <vfprintf+0x278>
 9f8:	9f 2f       	mov	r25, r31
 9fa:	96 60       	ori	r25, 0x06	; 6
 9fc:	b9 2e       	mov	r11, r25
 9fe:	06 c0       	rjmp	.+12     	; 0xa0c <vfprintf+0x278>
 a00:	28 e0       	ldi	r18, 0x08	; 8
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	05 c0       	rjmp	.+10     	; 0xa10 <vfprintf+0x27c>
 a06:	20 e1       	ldi	r18, 0x10	; 16
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <vfprintf+0x27c>
 a0c:	20 e1       	ldi	r18, 0x10	; 16
 a0e:	32 e0       	ldi	r19, 0x02	; 2
 a10:	f8 01       	movw	r30, r16
 a12:	b7 fe       	sbrs	r11, 7
 a14:	07 c0       	rjmp	.+14     	; 0xa24 <vfprintf+0x290>
 a16:	60 81       	ld	r22, Z
 a18:	71 81       	ldd	r23, Z+1	; 0x01
 a1a:	82 81       	ldd	r24, Z+2	; 0x02
 a1c:	93 81       	ldd	r25, Z+3	; 0x03
 a1e:	0c 5f       	subi	r16, 0xFC	; 252
 a20:	1f 4f       	sbci	r17, 0xFF	; 255
 a22:	06 c0       	rjmp	.+12     	; 0xa30 <vfprintf+0x29c>
 a24:	60 81       	ld	r22, Z
 a26:	71 81       	ldd	r23, Z+1	; 0x01
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 5f       	subi	r16, 0xFE	; 254
 a2e:	1f 4f       	sbci	r17, 0xFF	; 255
 a30:	a4 01       	movw	r20, r8
 a32:	3a d2       	rcall	.+1140   	; 0xea8 <__ultoa_invert>
 a34:	a8 2e       	mov	r10, r24
 a36:	a8 18       	sub	r10, r8
 a38:	fb 2d       	mov	r31, r11
 a3a:	ff 77       	andi	r31, 0x7F	; 127
 a3c:	7f 2e       	mov	r7, r31
 a3e:	76 fe       	sbrs	r7, 6
 a40:	0b c0       	rjmp	.+22     	; 0xa58 <vfprintf+0x2c4>
 a42:	37 2d       	mov	r19, r7
 a44:	3e 7f       	andi	r19, 0xFE	; 254
 a46:	a5 14       	cp	r10, r5
 a48:	50 f4       	brcc	.+20     	; 0xa5e <vfprintf+0x2ca>
 a4a:	74 fe       	sbrs	r7, 4
 a4c:	0a c0       	rjmp	.+20     	; 0xa62 <vfprintf+0x2ce>
 a4e:	72 fc       	sbrc	r7, 2
 a50:	08 c0       	rjmp	.+16     	; 0xa62 <vfprintf+0x2ce>
 a52:	37 2d       	mov	r19, r7
 a54:	3e 7e       	andi	r19, 0xEE	; 238
 a56:	05 c0       	rjmp	.+10     	; 0xa62 <vfprintf+0x2ce>
 a58:	ba 2c       	mov	r11, r10
 a5a:	37 2d       	mov	r19, r7
 a5c:	03 c0       	rjmp	.+6      	; 0xa64 <vfprintf+0x2d0>
 a5e:	ba 2c       	mov	r11, r10
 a60:	01 c0       	rjmp	.+2      	; 0xa64 <vfprintf+0x2d0>
 a62:	b5 2c       	mov	r11, r5
 a64:	34 ff       	sbrs	r19, 4
 a66:	0d c0       	rjmp	.+26     	; 0xa82 <vfprintf+0x2ee>
 a68:	fe 01       	movw	r30, r28
 a6a:	ea 0d       	add	r30, r10
 a6c:	f1 1d       	adc	r31, r1
 a6e:	80 81       	ld	r24, Z
 a70:	80 33       	cpi	r24, 0x30	; 48
 a72:	11 f4       	brne	.+4      	; 0xa78 <vfprintf+0x2e4>
 a74:	39 7e       	andi	r19, 0xE9	; 233
 a76:	09 c0       	rjmp	.+18     	; 0xa8a <vfprintf+0x2f6>
 a78:	32 ff       	sbrs	r19, 2
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <vfprintf+0x2f4>
 a7c:	b3 94       	inc	r11
 a7e:	b3 94       	inc	r11
 a80:	04 c0       	rjmp	.+8      	; 0xa8a <vfprintf+0x2f6>
 a82:	83 2f       	mov	r24, r19
 a84:	86 78       	andi	r24, 0x86	; 134
 a86:	09 f0       	breq	.+2      	; 0xa8a <vfprintf+0x2f6>
 a88:	b3 94       	inc	r11
 a8a:	33 fd       	sbrc	r19, 3
 a8c:	12 c0       	rjmp	.+36     	; 0xab2 <vfprintf+0x31e>
 a8e:	30 ff       	sbrs	r19, 0
 a90:	06 c0       	rjmp	.+12     	; 0xa9e <vfprintf+0x30a>
 a92:	5a 2c       	mov	r5, r10
 a94:	b3 14       	cp	r11, r3
 a96:	18 f4       	brcc	.+6      	; 0xa9e <vfprintf+0x30a>
 a98:	53 0c       	add	r5, r3
 a9a:	5b 18       	sub	r5, r11
 a9c:	b3 2c       	mov	r11, r3
 a9e:	b3 14       	cp	r11, r3
 aa0:	60 f4       	brcc	.+24     	; 0xaba <vfprintf+0x326>
 aa2:	b7 01       	movw	r22, r14
 aa4:	80 e2       	ldi	r24, 0x20	; 32
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	3c 87       	std	Y+12, r19	; 0x0c
 aaa:	c6 d1       	rcall	.+908    	; 0xe38 <fputc>
 aac:	b3 94       	inc	r11
 aae:	3c 85       	ldd	r19, Y+12	; 0x0c
 ab0:	f6 cf       	rjmp	.-20     	; 0xa9e <vfprintf+0x30a>
 ab2:	b3 14       	cp	r11, r3
 ab4:	10 f4       	brcc	.+4      	; 0xaba <vfprintf+0x326>
 ab6:	3b 18       	sub	r3, r11
 ab8:	01 c0       	rjmp	.+2      	; 0xabc <vfprintf+0x328>
 aba:	31 2c       	mov	r3, r1
 abc:	34 ff       	sbrs	r19, 4
 abe:	11 c0       	rjmp	.+34     	; 0xae2 <vfprintf+0x34e>
 ac0:	b7 01       	movw	r22, r14
 ac2:	80 e3       	ldi	r24, 0x30	; 48
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	3c 87       	std	Y+12, r19	; 0x0c
 ac8:	b7 d1       	rcall	.+878    	; 0xe38 <fputc>
 aca:	3c 85       	ldd	r19, Y+12	; 0x0c
 acc:	32 ff       	sbrs	r19, 2
 ace:	16 c0       	rjmp	.+44     	; 0xafc <vfprintf+0x368>
 ad0:	31 fd       	sbrc	r19, 1
 ad2:	03 c0       	rjmp	.+6      	; 0xada <vfprintf+0x346>
 ad4:	88 e7       	ldi	r24, 0x78	; 120
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	02 c0       	rjmp	.+4      	; 0xade <vfprintf+0x34a>
 ada:	88 e5       	ldi	r24, 0x58	; 88
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	b7 01       	movw	r22, r14
 ae0:	0c c0       	rjmp	.+24     	; 0xafa <vfprintf+0x366>
 ae2:	83 2f       	mov	r24, r19
 ae4:	86 78       	andi	r24, 0x86	; 134
 ae6:	51 f0       	breq	.+20     	; 0xafc <vfprintf+0x368>
 ae8:	31 ff       	sbrs	r19, 1
 aea:	02 c0       	rjmp	.+4      	; 0xaf0 <vfprintf+0x35c>
 aec:	8b e2       	ldi	r24, 0x2B	; 43
 aee:	01 c0       	rjmp	.+2      	; 0xaf2 <vfprintf+0x35e>
 af0:	80 e2       	ldi	r24, 0x20	; 32
 af2:	37 fd       	sbrc	r19, 7
 af4:	8d e2       	ldi	r24, 0x2D	; 45
 af6:	b7 01       	movw	r22, r14
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	9e d1       	rcall	.+828    	; 0xe38 <fputc>
 afc:	a5 14       	cp	r10, r5
 afe:	30 f4       	brcc	.+12     	; 0xb0c <vfprintf+0x378>
 b00:	b7 01       	movw	r22, r14
 b02:	80 e3       	ldi	r24, 0x30	; 48
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	98 d1       	rcall	.+816    	; 0xe38 <fputc>
 b08:	5a 94       	dec	r5
 b0a:	f8 cf       	rjmp	.-16     	; 0xafc <vfprintf+0x368>
 b0c:	aa 94       	dec	r10
 b0e:	f4 01       	movw	r30, r8
 b10:	ea 0d       	add	r30, r10
 b12:	f1 1d       	adc	r31, r1
 b14:	80 81       	ld	r24, Z
 b16:	b7 01       	movw	r22, r14
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	8e d1       	rcall	.+796    	; 0xe38 <fputc>
 b1c:	a1 10       	cpse	r10, r1
 b1e:	f6 cf       	rjmp	.-20     	; 0xb0c <vfprintf+0x378>
 b20:	33 20       	and	r3, r3
 b22:	09 f4       	brne	.+2      	; 0xb26 <vfprintf+0x392>
 b24:	5d ce       	rjmp	.-838    	; 0x7e0 <vfprintf+0x4c>
 b26:	b7 01       	movw	r22, r14
 b28:	80 e2       	ldi	r24, 0x20	; 32
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	85 d1       	rcall	.+778    	; 0xe38 <fputc>
 b2e:	3a 94       	dec	r3
 b30:	f7 cf       	rjmp	.-18     	; 0xb20 <vfprintf+0x38c>
 b32:	f7 01       	movw	r30, r14
 b34:	86 81       	ldd	r24, Z+6	; 0x06
 b36:	97 81       	ldd	r25, Z+7	; 0x07
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <vfprintf+0x3aa>
 b3a:	8f ef       	ldi	r24, 0xFF	; 255
 b3c:	9f ef       	ldi	r25, 0xFF	; 255
 b3e:	2c 96       	adiw	r28, 0x0c	; 12
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	f8 94       	cli
 b44:	de bf       	out	0x3e, r29	; 62
 b46:	0f be       	out	0x3f, r0	; 63
 b48:	cd bf       	out	0x3d, r28	; 61
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	1f 91       	pop	r17
 b50:	0f 91       	pop	r16
 b52:	ff 90       	pop	r15
 b54:	ef 90       	pop	r14
 b56:	df 90       	pop	r13
 b58:	cf 90       	pop	r12
 b5a:	bf 90       	pop	r11
 b5c:	af 90       	pop	r10
 b5e:	9f 90       	pop	r9
 b60:	8f 90       	pop	r8
 b62:	7f 90       	pop	r7
 b64:	6f 90       	pop	r6
 b66:	5f 90       	pop	r5
 b68:	4f 90       	pop	r4
 b6a:	3f 90       	pop	r3
 b6c:	2f 90       	pop	r2
 b6e:	08 95       	ret

00000b70 <calloc>:
 b70:	0f 93       	push	r16
 b72:	1f 93       	push	r17
 b74:	cf 93       	push	r28
 b76:	df 93       	push	r29
 b78:	86 9f       	mul	r24, r22
 b7a:	80 01       	movw	r16, r0
 b7c:	87 9f       	mul	r24, r23
 b7e:	10 0d       	add	r17, r0
 b80:	96 9f       	mul	r25, r22
 b82:	10 0d       	add	r17, r0
 b84:	11 24       	eor	r1, r1
 b86:	c8 01       	movw	r24, r16
 b88:	0d d0       	rcall	.+26     	; 0xba4 <malloc>
 b8a:	ec 01       	movw	r28, r24
 b8c:	00 97       	sbiw	r24, 0x00	; 0
 b8e:	21 f0       	breq	.+8      	; 0xb98 <calloc+0x28>
 b90:	a8 01       	movw	r20, r16
 b92:	60 e0       	ldi	r22, 0x00	; 0
 b94:	70 e0       	ldi	r23, 0x00	; 0
 b96:	3e d1       	rcall	.+636    	; 0xe14 <memset>
 b98:	ce 01       	movw	r24, r28
 b9a:	df 91       	pop	r29
 b9c:	cf 91       	pop	r28
 b9e:	1f 91       	pop	r17
 ba0:	0f 91       	pop	r16
 ba2:	08 95       	ret

00000ba4 <malloc>:
 ba4:	cf 93       	push	r28
 ba6:	df 93       	push	r29
 ba8:	82 30       	cpi	r24, 0x02	; 2
 baa:	91 05       	cpc	r25, r1
 bac:	10 f4       	brcc	.+4      	; 0xbb2 <malloc+0xe>
 bae:	82 e0       	ldi	r24, 0x02	; 2
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	e0 91 78 01 	lds	r30, 0x0178
 bb6:	f0 91 79 01 	lds	r31, 0x0179
 bba:	20 e0       	ldi	r18, 0x00	; 0
 bbc:	30 e0       	ldi	r19, 0x00	; 0
 bbe:	c0 e0       	ldi	r28, 0x00	; 0
 bc0:	d0 e0       	ldi	r29, 0x00	; 0
 bc2:	30 97       	sbiw	r30, 0x00	; 0
 bc4:	11 f1       	breq	.+68     	; 0xc0a <malloc+0x66>
 bc6:	40 81       	ld	r20, Z
 bc8:	51 81       	ldd	r21, Z+1	; 0x01
 bca:	48 17       	cp	r20, r24
 bcc:	59 07       	cpc	r21, r25
 bce:	c0 f0       	brcs	.+48     	; 0xc00 <malloc+0x5c>
 bd0:	48 17       	cp	r20, r24
 bd2:	59 07       	cpc	r21, r25
 bd4:	61 f4       	brne	.+24     	; 0xbee <malloc+0x4a>
 bd6:	82 81       	ldd	r24, Z+2	; 0x02
 bd8:	93 81       	ldd	r25, Z+3	; 0x03
 bda:	20 97       	sbiw	r28, 0x00	; 0
 bdc:	19 f0       	breq	.+6      	; 0xbe4 <malloc+0x40>
 bde:	9b 83       	std	Y+3, r25	; 0x03
 be0:	8a 83       	std	Y+2, r24	; 0x02
 be2:	2b c0       	rjmp	.+86     	; 0xc3a <malloc+0x96>
 be4:	90 93 79 01 	sts	0x0179, r25
 be8:	80 93 78 01 	sts	0x0178, r24
 bec:	26 c0       	rjmp	.+76     	; 0xc3a <malloc+0x96>
 bee:	21 15       	cp	r18, r1
 bf0:	31 05       	cpc	r19, r1
 bf2:	19 f0       	breq	.+6      	; 0xbfa <malloc+0x56>
 bf4:	42 17       	cp	r20, r18
 bf6:	53 07       	cpc	r21, r19
 bf8:	18 f4       	brcc	.+6      	; 0xc00 <malloc+0x5c>
 bfa:	9a 01       	movw	r18, r20
 bfc:	be 01       	movw	r22, r28
 bfe:	df 01       	movw	r26, r30
 c00:	ef 01       	movw	r28, r30
 c02:	02 80       	ldd	r0, Z+2	; 0x02
 c04:	f3 81       	ldd	r31, Z+3	; 0x03
 c06:	e0 2d       	mov	r30, r0
 c08:	dc cf       	rjmp	.-72     	; 0xbc2 <malloc+0x1e>
 c0a:	21 15       	cp	r18, r1
 c0c:	31 05       	cpc	r19, r1
 c0e:	09 f1       	breq	.+66     	; 0xc52 <malloc+0xae>
 c10:	28 1b       	sub	r18, r24
 c12:	39 0b       	sbc	r19, r25
 c14:	24 30       	cpi	r18, 0x04	; 4
 c16:	31 05       	cpc	r19, r1
 c18:	90 f4       	brcc	.+36     	; 0xc3e <malloc+0x9a>
 c1a:	12 96       	adiw	r26, 0x02	; 2
 c1c:	8d 91       	ld	r24, X+
 c1e:	9c 91       	ld	r25, X
 c20:	13 97       	sbiw	r26, 0x03	; 3
 c22:	61 15       	cp	r22, r1
 c24:	71 05       	cpc	r23, r1
 c26:	21 f0       	breq	.+8      	; 0xc30 <malloc+0x8c>
 c28:	fb 01       	movw	r30, r22
 c2a:	93 83       	std	Z+3, r25	; 0x03
 c2c:	82 83       	std	Z+2, r24	; 0x02
 c2e:	04 c0       	rjmp	.+8      	; 0xc38 <malloc+0x94>
 c30:	90 93 79 01 	sts	0x0179, r25
 c34:	80 93 78 01 	sts	0x0178, r24
 c38:	fd 01       	movw	r30, r26
 c3a:	32 96       	adiw	r30, 0x02	; 2
 c3c:	44 c0       	rjmp	.+136    	; 0xcc6 <malloc+0x122>
 c3e:	fd 01       	movw	r30, r26
 c40:	e2 0f       	add	r30, r18
 c42:	f3 1f       	adc	r31, r19
 c44:	81 93       	st	Z+, r24
 c46:	91 93       	st	Z+, r25
 c48:	22 50       	subi	r18, 0x02	; 2
 c4a:	31 09       	sbc	r19, r1
 c4c:	2d 93       	st	X+, r18
 c4e:	3c 93       	st	X, r19
 c50:	3a c0       	rjmp	.+116    	; 0xcc6 <malloc+0x122>
 c52:	20 91 76 01 	lds	r18, 0x0176
 c56:	30 91 77 01 	lds	r19, 0x0177
 c5a:	23 2b       	or	r18, r19
 c5c:	41 f4       	brne	.+16     	; 0xc6e <malloc+0xca>
 c5e:	20 91 02 01 	lds	r18, 0x0102
 c62:	30 91 03 01 	lds	r19, 0x0103
 c66:	30 93 77 01 	sts	0x0177, r19
 c6a:	20 93 76 01 	sts	0x0176, r18
 c6e:	20 91 00 01 	lds	r18, 0x0100
 c72:	30 91 01 01 	lds	r19, 0x0101
 c76:	21 15       	cp	r18, r1
 c78:	31 05       	cpc	r19, r1
 c7a:	41 f4       	brne	.+16     	; 0xc8c <malloc+0xe8>
 c7c:	2d b7       	in	r18, 0x3d	; 61
 c7e:	3e b7       	in	r19, 0x3e	; 62
 c80:	40 91 04 01 	lds	r20, 0x0104
 c84:	50 91 05 01 	lds	r21, 0x0105
 c88:	24 1b       	sub	r18, r20
 c8a:	35 0b       	sbc	r19, r21
 c8c:	e0 91 76 01 	lds	r30, 0x0176
 c90:	f0 91 77 01 	lds	r31, 0x0177
 c94:	e2 17       	cp	r30, r18
 c96:	f3 07       	cpc	r31, r19
 c98:	a0 f4       	brcc	.+40     	; 0xcc2 <malloc+0x11e>
 c9a:	2e 1b       	sub	r18, r30
 c9c:	3f 0b       	sbc	r19, r31
 c9e:	28 17       	cp	r18, r24
 ca0:	39 07       	cpc	r19, r25
 ca2:	78 f0       	brcs	.+30     	; 0xcc2 <malloc+0x11e>
 ca4:	ac 01       	movw	r20, r24
 ca6:	4e 5f       	subi	r20, 0xFE	; 254
 ca8:	5f 4f       	sbci	r21, 0xFF	; 255
 caa:	24 17       	cp	r18, r20
 cac:	35 07       	cpc	r19, r21
 cae:	48 f0       	brcs	.+18     	; 0xcc2 <malloc+0x11e>
 cb0:	4e 0f       	add	r20, r30
 cb2:	5f 1f       	adc	r21, r31
 cb4:	50 93 77 01 	sts	0x0177, r21
 cb8:	40 93 76 01 	sts	0x0176, r20
 cbc:	81 93       	st	Z+, r24
 cbe:	91 93       	st	Z+, r25
 cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <malloc+0x122>
 cc2:	e0 e0       	ldi	r30, 0x00	; 0
 cc4:	f0 e0       	ldi	r31, 0x00	; 0
 cc6:	cf 01       	movw	r24, r30
 cc8:	df 91       	pop	r29
 cca:	cf 91       	pop	r28
 ccc:	08 95       	ret

00000cce <free>:
 cce:	0f 93       	push	r16
 cd0:	1f 93       	push	r17
 cd2:	cf 93       	push	r28
 cd4:	df 93       	push	r29
 cd6:	00 97       	sbiw	r24, 0x00	; 0
 cd8:	09 f4       	brne	.+2      	; 0xcdc <free+0xe>
 cda:	8c c0       	rjmp	.+280    	; 0xdf4 <free+0x126>
 cdc:	fc 01       	movw	r30, r24
 cde:	32 97       	sbiw	r30, 0x02	; 2
 ce0:	13 82       	std	Z+3, r1	; 0x03
 ce2:	12 82       	std	Z+2, r1	; 0x02
 ce4:	00 91 78 01 	lds	r16, 0x0178
 ce8:	10 91 79 01 	lds	r17, 0x0179
 cec:	01 15       	cp	r16, r1
 cee:	11 05       	cpc	r17, r1
 cf0:	81 f4       	brne	.+32     	; 0xd12 <free+0x44>
 cf2:	20 81       	ld	r18, Z
 cf4:	31 81       	ldd	r19, Z+1	; 0x01
 cf6:	82 0f       	add	r24, r18
 cf8:	93 1f       	adc	r25, r19
 cfa:	20 91 76 01 	lds	r18, 0x0176
 cfe:	30 91 77 01 	lds	r19, 0x0177
 d02:	28 17       	cp	r18, r24
 d04:	39 07       	cpc	r19, r25
 d06:	79 f5       	brne	.+94     	; 0xd66 <free+0x98>
 d08:	f0 93 77 01 	sts	0x0177, r31
 d0c:	e0 93 76 01 	sts	0x0176, r30
 d10:	71 c0       	rjmp	.+226    	; 0xdf4 <free+0x126>
 d12:	d8 01       	movw	r26, r16
 d14:	40 e0       	ldi	r20, 0x00	; 0
 d16:	50 e0       	ldi	r21, 0x00	; 0
 d18:	ae 17       	cp	r26, r30
 d1a:	bf 07       	cpc	r27, r31
 d1c:	50 f4       	brcc	.+20     	; 0xd32 <free+0x64>
 d1e:	12 96       	adiw	r26, 0x02	; 2
 d20:	2d 91       	ld	r18, X+
 d22:	3c 91       	ld	r19, X
 d24:	13 97       	sbiw	r26, 0x03	; 3
 d26:	ad 01       	movw	r20, r26
 d28:	21 15       	cp	r18, r1
 d2a:	31 05       	cpc	r19, r1
 d2c:	09 f1       	breq	.+66     	; 0xd70 <free+0xa2>
 d2e:	d9 01       	movw	r26, r18
 d30:	f3 cf       	rjmp	.-26     	; 0xd18 <free+0x4a>
 d32:	9d 01       	movw	r18, r26
 d34:	da 01       	movw	r26, r20
 d36:	33 83       	std	Z+3, r19	; 0x03
 d38:	22 83       	std	Z+2, r18	; 0x02
 d3a:	60 81       	ld	r22, Z
 d3c:	71 81       	ldd	r23, Z+1	; 0x01
 d3e:	86 0f       	add	r24, r22
 d40:	97 1f       	adc	r25, r23
 d42:	82 17       	cp	r24, r18
 d44:	93 07       	cpc	r25, r19
 d46:	69 f4       	brne	.+26     	; 0xd62 <free+0x94>
 d48:	ec 01       	movw	r28, r24
 d4a:	28 81       	ld	r18, Y
 d4c:	39 81       	ldd	r19, Y+1	; 0x01
 d4e:	26 0f       	add	r18, r22
 d50:	37 1f       	adc	r19, r23
 d52:	2e 5f       	subi	r18, 0xFE	; 254
 d54:	3f 4f       	sbci	r19, 0xFF	; 255
 d56:	31 83       	std	Z+1, r19	; 0x01
 d58:	20 83       	st	Z, r18
 d5a:	8a 81       	ldd	r24, Y+2	; 0x02
 d5c:	9b 81       	ldd	r25, Y+3	; 0x03
 d5e:	93 83       	std	Z+3, r25	; 0x03
 d60:	82 83       	std	Z+2, r24	; 0x02
 d62:	45 2b       	or	r20, r21
 d64:	29 f4       	brne	.+10     	; 0xd70 <free+0xa2>
 d66:	f0 93 79 01 	sts	0x0179, r31
 d6a:	e0 93 78 01 	sts	0x0178, r30
 d6e:	42 c0       	rjmp	.+132    	; 0xdf4 <free+0x126>
 d70:	13 96       	adiw	r26, 0x03	; 3
 d72:	fc 93       	st	X, r31
 d74:	ee 93       	st	-X, r30
 d76:	12 97       	sbiw	r26, 0x02	; 2
 d78:	ed 01       	movw	r28, r26
 d7a:	49 91       	ld	r20, Y+
 d7c:	59 91       	ld	r21, Y+
 d7e:	9e 01       	movw	r18, r28
 d80:	24 0f       	add	r18, r20
 d82:	35 1f       	adc	r19, r21
 d84:	e2 17       	cp	r30, r18
 d86:	f3 07       	cpc	r31, r19
 d88:	71 f4       	brne	.+28     	; 0xda6 <free+0xd8>
 d8a:	80 81       	ld	r24, Z
 d8c:	91 81       	ldd	r25, Z+1	; 0x01
 d8e:	84 0f       	add	r24, r20
 d90:	95 1f       	adc	r25, r21
 d92:	02 96       	adiw	r24, 0x02	; 2
 d94:	11 96       	adiw	r26, 0x01	; 1
 d96:	9c 93       	st	X, r25
 d98:	8e 93       	st	-X, r24
 d9a:	82 81       	ldd	r24, Z+2	; 0x02
 d9c:	93 81       	ldd	r25, Z+3	; 0x03
 d9e:	13 96       	adiw	r26, 0x03	; 3
 da0:	9c 93       	st	X, r25
 da2:	8e 93       	st	-X, r24
 da4:	12 97       	sbiw	r26, 0x02	; 2
 da6:	e0 e0       	ldi	r30, 0x00	; 0
 da8:	f0 e0       	ldi	r31, 0x00	; 0
 daa:	d8 01       	movw	r26, r16
 dac:	12 96       	adiw	r26, 0x02	; 2
 dae:	8d 91       	ld	r24, X+
 db0:	9c 91       	ld	r25, X
 db2:	13 97       	sbiw	r26, 0x03	; 3
 db4:	00 97       	sbiw	r24, 0x00	; 0
 db6:	19 f0       	breq	.+6      	; 0xdbe <free+0xf0>
 db8:	f8 01       	movw	r30, r16
 dba:	8c 01       	movw	r16, r24
 dbc:	f6 cf       	rjmp	.-20     	; 0xdaa <free+0xdc>
 dbe:	8d 91       	ld	r24, X+
 dc0:	9c 91       	ld	r25, X
 dc2:	98 01       	movw	r18, r16
 dc4:	2e 5f       	subi	r18, 0xFE	; 254
 dc6:	3f 4f       	sbci	r19, 0xFF	; 255
 dc8:	82 0f       	add	r24, r18
 dca:	93 1f       	adc	r25, r19
 dcc:	20 91 76 01 	lds	r18, 0x0176
 dd0:	30 91 77 01 	lds	r19, 0x0177
 dd4:	28 17       	cp	r18, r24
 dd6:	39 07       	cpc	r19, r25
 dd8:	69 f4       	brne	.+26     	; 0xdf4 <free+0x126>
 dda:	30 97       	sbiw	r30, 0x00	; 0
 ddc:	29 f4       	brne	.+10     	; 0xde8 <free+0x11a>
 dde:	10 92 79 01 	sts	0x0179, r1
 de2:	10 92 78 01 	sts	0x0178, r1
 de6:	02 c0       	rjmp	.+4      	; 0xdec <free+0x11e>
 de8:	13 82       	std	Z+3, r1	; 0x03
 dea:	12 82       	std	Z+2, r1	; 0x02
 dec:	10 93 77 01 	sts	0x0177, r17
 df0:	00 93 76 01 	sts	0x0176, r16
 df4:	df 91       	pop	r29
 df6:	cf 91       	pop	r28
 df8:	1f 91       	pop	r17
 dfa:	0f 91       	pop	r16
 dfc:	08 95       	ret

00000dfe <strnlen_P>:
 dfe:	fc 01       	movw	r30, r24
 e00:	05 90       	lpm	r0, Z+
 e02:	61 50       	subi	r22, 0x01	; 1
 e04:	70 40       	sbci	r23, 0x00	; 0
 e06:	01 10       	cpse	r0, r1
 e08:	d8 f7       	brcc	.-10     	; 0xe00 <strnlen_P+0x2>
 e0a:	80 95       	com	r24
 e0c:	90 95       	com	r25
 e0e:	8e 0f       	add	r24, r30
 e10:	9f 1f       	adc	r25, r31
 e12:	08 95       	ret

00000e14 <memset>:
 e14:	dc 01       	movw	r26, r24
 e16:	01 c0       	rjmp	.+2      	; 0xe1a <memset+0x6>
 e18:	6d 93       	st	X+, r22
 e1a:	41 50       	subi	r20, 0x01	; 1
 e1c:	50 40       	sbci	r21, 0x00	; 0
 e1e:	e0 f7       	brcc	.-8      	; 0xe18 <memset+0x4>
 e20:	08 95       	ret

00000e22 <strnlen>:
 e22:	fc 01       	movw	r30, r24
 e24:	61 50       	subi	r22, 0x01	; 1
 e26:	70 40       	sbci	r23, 0x00	; 0
 e28:	01 90       	ld	r0, Z+
 e2a:	01 10       	cpse	r0, r1
 e2c:	d8 f7       	brcc	.-10     	; 0xe24 <strnlen+0x2>
 e2e:	80 95       	com	r24
 e30:	90 95       	com	r25
 e32:	8e 0f       	add	r24, r30
 e34:	9f 1f       	adc	r25, r31
 e36:	08 95       	ret

00000e38 <fputc>:
 e38:	0f 93       	push	r16
 e3a:	1f 93       	push	r17
 e3c:	cf 93       	push	r28
 e3e:	df 93       	push	r29
 e40:	fb 01       	movw	r30, r22
 e42:	23 81       	ldd	r18, Z+3	; 0x03
 e44:	21 fd       	sbrc	r18, 1
 e46:	03 c0       	rjmp	.+6      	; 0xe4e <fputc+0x16>
 e48:	8f ef       	ldi	r24, 0xFF	; 255
 e4a:	9f ef       	ldi	r25, 0xFF	; 255
 e4c:	28 c0       	rjmp	.+80     	; 0xe9e <fputc+0x66>
 e4e:	22 ff       	sbrs	r18, 2
 e50:	16 c0       	rjmp	.+44     	; 0xe7e <fputc+0x46>
 e52:	46 81       	ldd	r20, Z+6	; 0x06
 e54:	57 81       	ldd	r21, Z+7	; 0x07
 e56:	24 81       	ldd	r18, Z+4	; 0x04
 e58:	35 81       	ldd	r19, Z+5	; 0x05
 e5a:	42 17       	cp	r20, r18
 e5c:	53 07       	cpc	r21, r19
 e5e:	44 f4       	brge	.+16     	; 0xe70 <fputc+0x38>
 e60:	a0 81       	ld	r26, Z
 e62:	b1 81       	ldd	r27, Z+1	; 0x01
 e64:	9d 01       	movw	r18, r26
 e66:	2f 5f       	subi	r18, 0xFF	; 255
 e68:	3f 4f       	sbci	r19, 0xFF	; 255
 e6a:	31 83       	std	Z+1, r19	; 0x01
 e6c:	20 83       	st	Z, r18
 e6e:	8c 93       	st	X, r24
 e70:	26 81       	ldd	r18, Z+6	; 0x06
 e72:	37 81       	ldd	r19, Z+7	; 0x07
 e74:	2f 5f       	subi	r18, 0xFF	; 255
 e76:	3f 4f       	sbci	r19, 0xFF	; 255
 e78:	37 83       	std	Z+7, r19	; 0x07
 e7a:	26 83       	std	Z+6, r18	; 0x06
 e7c:	10 c0       	rjmp	.+32     	; 0xe9e <fputc+0x66>
 e7e:	eb 01       	movw	r28, r22
 e80:	09 2f       	mov	r16, r25
 e82:	18 2f       	mov	r17, r24
 e84:	00 84       	ldd	r0, Z+8	; 0x08
 e86:	f1 85       	ldd	r31, Z+9	; 0x09
 e88:	e0 2d       	mov	r30, r0
 e8a:	09 95       	icall
 e8c:	89 2b       	or	r24, r25
 e8e:	e1 f6       	brne	.-72     	; 0xe48 <fputc+0x10>
 e90:	8e 81       	ldd	r24, Y+6	; 0x06
 e92:	9f 81       	ldd	r25, Y+7	; 0x07
 e94:	01 96       	adiw	r24, 0x01	; 1
 e96:	9f 83       	std	Y+7, r25	; 0x07
 e98:	8e 83       	std	Y+6, r24	; 0x06
 e9a:	81 2f       	mov	r24, r17
 e9c:	90 2f       	mov	r25, r16
 e9e:	df 91       	pop	r29
 ea0:	cf 91       	pop	r28
 ea2:	1f 91       	pop	r17
 ea4:	0f 91       	pop	r16
 ea6:	08 95       	ret

00000ea8 <__ultoa_invert>:
 ea8:	fa 01       	movw	r30, r20
 eaa:	aa 27       	eor	r26, r26
 eac:	28 30       	cpi	r18, 0x08	; 8
 eae:	51 f1       	breq	.+84     	; 0xf04 <__ultoa_invert+0x5c>
 eb0:	20 31       	cpi	r18, 0x10	; 16
 eb2:	81 f1       	breq	.+96     	; 0xf14 <__ultoa_invert+0x6c>
 eb4:	e8 94       	clt
 eb6:	6f 93       	push	r22
 eb8:	6e 7f       	andi	r22, 0xFE	; 254
 eba:	6e 5f       	subi	r22, 0xFE	; 254
 ebc:	7f 4f       	sbci	r23, 0xFF	; 255
 ebe:	8f 4f       	sbci	r24, 0xFF	; 255
 ec0:	9f 4f       	sbci	r25, 0xFF	; 255
 ec2:	af 4f       	sbci	r26, 0xFF	; 255
 ec4:	b1 e0       	ldi	r27, 0x01	; 1
 ec6:	3e d0       	rcall	.+124    	; 0xf44 <__ultoa_invert+0x9c>
 ec8:	b4 e0       	ldi	r27, 0x04	; 4
 eca:	3c d0       	rcall	.+120    	; 0xf44 <__ultoa_invert+0x9c>
 ecc:	67 0f       	add	r22, r23
 ece:	78 1f       	adc	r23, r24
 ed0:	89 1f       	adc	r24, r25
 ed2:	9a 1f       	adc	r25, r26
 ed4:	a1 1d       	adc	r26, r1
 ed6:	68 0f       	add	r22, r24
 ed8:	79 1f       	adc	r23, r25
 eda:	8a 1f       	adc	r24, r26
 edc:	91 1d       	adc	r25, r1
 ede:	a1 1d       	adc	r26, r1
 ee0:	6a 0f       	add	r22, r26
 ee2:	71 1d       	adc	r23, r1
 ee4:	81 1d       	adc	r24, r1
 ee6:	91 1d       	adc	r25, r1
 ee8:	a1 1d       	adc	r26, r1
 eea:	20 d0       	rcall	.+64     	; 0xf2c <__ultoa_invert+0x84>
 eec:	09 f4       	brne	.+2      	; 0xef0 <__ultoa_invert+0x48>
 eee:	68 94       	set
 ef0:	3f 91       	pop	r19
 ef2:	2a e0       	ldi	r18, 0x0A	; 10
 ef4:	26 9f       	mul	r18, r22
 ef6:	11 24       	eor	r1, r1
 ef8:	30 19       	sub	r19, r0
 efa:	30 5d       	subi	r19, 0xD0	; 208
 efc:	31 93       	st	Z+, r19
 efe:	de f6       	brtc	.-74     	; 0xeb6 <__ultoa_invert+0xe>
 f00:	cf 01       	movw	r24, r30
 f02:	08 95       	ret
 f04:	46 2f       	mov	r20, r22
 f06:	47 70       	andi	r20, 0x07	; 7
 f08:	40 5d       	subi	r20, 0xD0	; 208
 f0a:	41 93       	st	Z+, r20
 f0c:	b3 e0       	ldi	r27, 0x03	; 3
 f0e:	0f d0       	rcall	.+30     	; 0xf2e <__ultoa_invert+0x86>
 f10:	c9 f7       	brne	.-14     	; 0xf04 <__ultoa_invert+0x5c>
 f12:	f6 cf       	rjmp	.-20     	; 0xf00 <__ultoa_invert+0x58>
 f14:	46 2f       	mov	r20, r22
 f16:	4f 70       	andi	r20, 0x0F	; 15
 f18:	40 5d       	subi	r20, 0xD0	; 208
 f1a:	4a 33       	cpi	r20, 0x3A	; 58
 f1c:	18 f0       	brcs	.+6      	; 0xf24 <__ultoa_invert+0x7c>
 f1e:	49 5d       	subi	r20, 0xD9	; 217
 f20:	31 fd       	sbrc	r19, 1
 f22:	40 52       	subi	r20, 0x20	; 32
 f24:	41 93       	st	Z+, r20
 f26:	02 d0       	rcall	.+4      	; 0xf2c <__ultoa_invert+0x84>
 f28:	a9 f7       	brne	.-22     	; 0xf14 <__ultoa_invert+0x6c>
 f2a:	ea cf       	rjmp	.-44     	; 0xf00 <__ultoa_invert+0x58>
 f2c:	b4 e0       	ldi	r27, 0x04	; 4
 f2e:	a6 95       	lsr	r26
 f30:	97 95       	ror	r25
 f32:	87 95       	ror	r24
 f34:	77 95       	ror	r23
 f36:	67 95       	ror	r22
 f38:	ba 95       	dec	r27
 f3a:	c9 f7       	brne	.-14     	; 0xf2e <__ultoa_invert+0x86>
 f3c:	00 97       	sbiw	r24, 0x00	; 0
 f3e:	61 05       	cpc	r22, r1
 f40:	71 05       	cpc	r23, r1
 f42:	08 95       	ret
 f44:	9b 01       	movw	r18, r22
 f46:	ac 01       	movw	r20, r24
 f48:	0a 2e       	mov	r0, r26
 f4a:	06 94       	lsr	r0
 f4c:	57 95       	ror	r21
 f4e:	47 95       	ror	r20
 f50:	37 95       	ror	r19
 f52:	27 95       	ror	r18
 f54:	ba 95       	dec	r27
 f56:	c9 f7       	brne	.-14     	; 0xf4a <__ultoa_invert+0xa2>
 f58:	62 0f       	add	r22, r18
 f5a:	73 1f       	adc	r23, r19
 f5c:	84 1f       	adc	r24, r20
 f5e:	95 1f       	adc	r25, r21
 f60:	a0 1d       	adc	r26, r0
 f62:	08 95       	ret

00000f64 <_exit>:
 f64:	f8 94       	cli

00000f66 <__stop_program>:
 f66:	ff cf       	rjmp	.-2      	; 0xf66 <__stop_program>
