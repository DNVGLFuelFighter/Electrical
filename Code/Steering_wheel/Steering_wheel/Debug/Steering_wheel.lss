
Steering_wheel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00000e08  00000e9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800162  00800162  00000efe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf2  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c0  00000000  00000000  00001c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b9  00000000  00000000  0000234e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034e  00000000  00000000  00002f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069e  00000000  00000000  00003272  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	9f c0       	rjmp	.+318    	; 0x188 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e8 e0       	ldi	r30, 0x08	; 8
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 36       	cpi	r26, 0x62	; 98
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e6       	ldi	r26, 0x62	; 98
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a5 39       	cpi	r26, 0x95	; 149
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	81 d1       	rcall	.+770    	; 0x3ce <main>
  cc:	9b c6       	rjmp	.+3382   	; 0xe04 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_init>:
 *  Author: Vilius
 */ 
#include "adc.h"

void adc_init( void) {
	clear_bit(DDRF, DDF0);
  d0:	80 98       	cbi	0x10, 0	; 16
	
	/* Voltage ref AVcc with external capacitor on AREF pin */
	set_bit(ADMUX, REFS0);
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
	/* Select prescaler to 64 --> conversion f= 125kHz */
	set_bit(ADCSRA, ADPS2);
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	84 60       	ori	r24, 0x04	; 4
  e4:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);
  e6:	80 81       	ld	r24, Z
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	80 83       	st	Z, r24
	/* Enable the ADC */
	set_bit(ADCSRA, ADEN);
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <adc_sleep>:
	//set_bit(ADCSRA, ADIE);
}

void adc_sleep( void) {
	/* Wait for the conversion to complete */
	while(test_bit(ADCSRA, ADSC));
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	86 fd       	sbrc	r24, 6
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <adc_sleep+0x4>
	/* Turn off the ADC */
	clear_bit(ADCSRA, ADEN);
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8f 77       	andi	r24, 0x7F	; 127
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <adc_input>:
}

void adc_input( CAN_packet* p) {
 10a:	dc 01       	movw	r26, r24
	/*Select the reference channel */
	ADMUX |= 0x00;
 10c:	ec e7       	ldi	r30, 0x7C	; 124
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 83       	st	Z, r24
	/* Start the conversion */
	set_bit(ADCSRA, ADSC);
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	90 81       	ld	r25, Z
 11a:	90 64       	ori	r25, 0x40	; 64
 11c:	90 83       	st	Z, r25
	/* Wait for the conversion to complete */
	while(test_bit(ADCSRA, ADSC));
 11e:	90 81       	ld	r25, Z
 120:	96 fd       	sbrc	r25, 6
 122:	fd cf       	rjmp	.-6      	; 0x11e <adc_input+0x14>
	unsigned int full_value = (512 - ADC)/2;
 124:	80 91 78 00 	lds	r24, 0x0078
 128:	90 91 79 00 	lds	r25, 0x0079
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	32 e0       	ldi	r19, 0x02	; 2
 130:	28 1b       	sub	r18, r24
 132:	39 0b       	sbc	r19, r25
 134:	36 95       	lsr	r19
 136:	27 95       	ror	r18
 138:	2f 3f       	cpi	r18, 0xFF	; 255
 13a:	31 05       	cpc	r19, r1
 13c:	19 f0       	breq	.+6      	; 0x144 <adc_input+0x3a>
 13e:	10 f0       	brcs	.+4      	; 0x144 <adc_input+0x3a>
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	30 e0       	ldi	r19, 0x00	; 0
// 	p->data[3] = (int)floor(temp_val);
// 	p->data[4] = (int)floor(temp_val);
// 	p->data[5] = (int)floor(temp_val);
// 	if(value_over_half)
// 		p->data[3] = (int)ceil(temp_val);
	p->data[1] = (full_value>>2); // left shift to fit into 8-bit msg
 144:	c9 01       	movw	r24, r18
 146:	96 95       	lsr	r25
 148:	87 95       	ror	r24
 14a:	96 95       	lsr	r25
 14c:	87 95       	ror	r24
 14e:	14 96       	adiw	r26, 0x04	; 4
 150:	8c 93       	st	X, r24
	printf("\r\n SPEED VAL %d", full_value);
 152:	3f 93       	push	r19
 154:	2f 93       	push	r18
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	9f 93       	push	r25
 15c:	8f 93       	push	r24
 15e:	57 d2       	rcall	.+1198   	; 0x60e <printf>
	printf("\r\n ADC VAL %d", ADC);
 160:	80 91 78 00 	lds	r24, 0x0078
 164:	90 91 79 00 	lds	r25, 0x0079
 168:	9f 93       	push	r25
 16a:	8f 93       	push	r24
 16c:	86 e1       	ldi	r24, 0x16	; 22
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	9f 93       	push	r25
 172:	8f 93       	push	r24
 174:	4c d2       	rcall	.+1176   	; 0x60e <printf>
 176:	8d b7       	in	r24, 0x3d	; 61
 178:	9e b7       	in	r25, 0x3e	; 62
 17a:	08 96       	adiw	r24, 0x08	; 8
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	9e bf       	out	0x3e, r25	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	8d bf       	out	0x3d, r24	; 61
 186:	08 95       	ret

00000188 <__vector_18>:
		}
	CANGCON |= 0x02;
	CANGIE=(1<<ENIT) | (1<< ENRX);
}
	
void can_health(void) {
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	0b b6       	in	r0, 0x3b	; 59
 194:	0f 92       	push	r0
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	cf 93       	push	r28
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
 1b0:	ed ee       	ldi	r30, 0xED	; 237
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	c0 81       	ld	r28, Z
 1b6:	80 91 ec 00 	lds	r24, 0x00EC
 1ba:	68 2f       	mov	r22, r24
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	80 7f       	andi	r24, 0xF0	; 240
 1c0:	80 83       	st	Z, r24
 1c2:	72 95       	swap	r23
 1c4:	62 95       	swap	r22
 1c6:	6f 70       	andi	r22, 0x0F	; 15
 1c8:	67 27       	eor	r22, r23
 1ca:	7f 70       	andi	r23, 0x0F	; 15
 1cc:	67 27       	eor	r22, r23
 1ce:	80 91 ee 00 	lds	r24, 0x00EE
 1d2:	8f 75       	andi	r24, 0x5F	; 95
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <__vector_18+0x50>
 1d6:	98 95       	break
 1d8:	20 91 f2 00 	lds	r18, 0x00F2
 1dc:	80 91 f3 00 	lds	r24, 0x00F3
 1e0:	e2 e6       	ldi	r30, 0x62	; 98
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	22 95       	swap	r18
 1f4:	26 95       	lsr	r18
 1f6:	27 70       	andi	r18, 0x07	; 7
 1f8:	82 2b       	or	r24, r18
 1fa:	91 83       	std	Z+1, r25	; 0x01
 1fc:	80 83       	st	Z, r24
 1fe:	80 91 ef 00 	lds	r24, 0x00EF
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	82 83       	std	Z+2, r24	; 0x02
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	00 97       	sbiw	r24, 0x00	; 0
 20a:	59 f0       	breq	.+22     	; 0x222 <__vector_18+0x9a>
 20c:	e5 e6       	ldi	r30, 0x65	; 101
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	8b 59       	subi	r24, 0x9B	; 155
 212:	9e 4f       	sbci	r25, 0xFE	; 254
 214:	aa ef       	ldi	r26, 0xFA	; 250
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	2c 91       	ld	r18, X
 21a:	21 93       	st	Z+, r18
 21c:	e8 17       	cp	r30, r24
 21e:	f9 07       	cpc	r31, r25
 220:	d9 f7       	brne	.-10     	; 0x218 <__vector_18+0x90>
 222:	10 92 ee 00 	sts	0x00EE, r1
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	80 93 ef 00 	sts	0x00EF, r24
 22c:	fb 01       	movw	r30, r22
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	e3 59       	subi	r30, 0x93	; 147
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	01 90       	ld	r0, Z+
 238:	f0 81       	ld	r31, Z
 23a:	e0 2d       	mov	r30, r0
 23c:	82 e6       	ldi	r24, 0x62	; 98
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	09 95       	icall
 242:	c0 93 ed 00 	sts	0x00ED, r28
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	cf 91       	pop	r28
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	0f 90       	pop	r0
 262:	0b be       	out	0x3b, r0	; 59
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <can_tx>:
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	fb 01       	movw	r30, r22
 274:	20 81       	ld	r18, Z
 276:	31 81       	ldd	r19, Z+1	; 0x01
 278:	21 15       	cp	r18, r1
 27a:	38 40       	sbci	r19, 0x08	; 8
 27c:	08 f0       	brcs	.+2      	; 0x280 <can_tx+0x12>
 27e:	98 95       	break
 280:	92 81       	ldd	r25, Z+2	; 0x02
 282:	99 30       	cpi	r25, 0x09	; 9
 284:	08 f0       	brcs	.+2      	; 0x288 <can_tx+0x1a>
 286:	98 95       	break
 288:	8f 30       	cpi	r24, 0x0F	; 15
 28a:	08 f0       	brcs	.+2      	; 0x28e <can_tx+0x20>
 28c:	98 95       	break
 28e:	82 95       	swap	r24
 290:	80 7f       	andi	r24, 0xF0	; 240
 292:	80 93 ed 00 	sts	0x00ED, r24
 296:	80 91 ef 00 	lds	r24, 0x00EF
 29a:	80 7c       	andi	r24, 0xC0	; 192
 29c:	21 f0       	breq	.+8      	; 0x2a6 <can_tx+0x38>
 29e:	80 91 ee 00 	lds	r24, 0x00EE
 2a2:	86 ff       	sbrs	r24, 6
 2a4:	55 c0       	rjmp	.+170    	; 0x350 <can_tx+0xe2>
 2a6:	10 92 ee 00 	sts	0x00EE, r1
 2aa:	10 92 ef 00 	sts	0x00EF, r1
 2ae:	82 81       	ldd	r24, Z+2	; 0x02
 2b0:	8f 3f       	cpi	r24, 0xFF	; 255
 2b2:	61 f1       	breq	.+88     	; 0x30c <can_tx+0x9e>
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	96 95       	lsr	r25
 2ba:	87 95       	ror	r24
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	80 93 f3 00 	sts	0x00F3, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	82 95       	swap	r24
 2cc:	88 0f       	add	r24, r24
 2ce:	80 7e       	andi	r24, 0xE0	; 224
 2d0:	80 93 f2 00 	sts	0x00F2, r24
 2d4:	10 92 f1 00 	sts	0x00F1, r1
 2d8:	10 92 f0 00 	sts	0x00F0, r1
 2dc:	22 81       	ldd	r18, Z+2	; 0x02
 2de:	22 23       	and	r18, r18
 2e0:	79 f0       	breq	.+30     	; 0x300 <can_tx+0x92>
 2e2:	df 01       	movw	r26, r30
 2e4:	13 96       	adiw	r26, 0x03	; 3
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ca ef       	ldi	r28, 0xFA	; 250
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
 2ee:	2d 91       	ld	r18, X+
 2f0:	28 83       	st	Y, r18
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	22 81       	ldd	r18, Z+2	; 0x02
 2f6:	42 2f       	mov	r20, r18
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	84 17       	cp	r24, r20
 2fc:	95 07       	cpc	r25, r21
 2fe:	b8 f3       	brcs	.-18     	; 0x2ee <can_tx+0x80>
 300:	ef ee       	ldi	r30, 0xEF	; 239
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	28 2b       	or	r18, r24
 308:	20 83       	st	Z, r18
 30a:	1b c0       	rjmp	.+54     	; 0x342 <can_tx+0xd4>
 30c:	80 81       	ld	r24, Z
 30e:	91 81       	ldd	r25, Z+1	; 0x01
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	96 95       	lsr	r25
 316:	87 95       	ror	r24
 318:	96 95       	lsr	r25
 31a:	87 95       	ror	r24
 31c:	80 93 f3 00 	sts	0x00F3, r24
 320:	80 81       	ld	r24, Z
 322:	82 95       	swap	r24
 324:	88 0f       	add	r24, r24
 326:	80 7e       	andi	r24, 0xE0	; 224
 328:	80 93 f2 00 	sts	0x00F2, r24
 32c:	10 92 f1 00 	sts	0x00F1, r1
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	80 93 f0 00 	sts	0x00F0, r24
 336:	af ee       	ldi	r26, 0xEF	; 239
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	9c 91       	ld	r25, X
 33c:	82 81       	ldd	r24, Z+2	; 0x02
 33e:	89 2b       	or	r24, r25
 340:	8c 93       	st	X, r24
 342:	ef ee       	ldi	r30, 0xEF	; 239
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	80 64       	ori	r24, 0x40	; 64
 34a:	80 83       	st	Z, r24
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	01 c0       	rjmp	.+2      	; 0x352 <can_tx+0xe4>
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <can_init>:
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	86 e0       	ldi	r24, 0x06	; 6
 35e:	80 93 e2 00 	sts	0x00E2, r24
 362:	8c e0       	ldi	r24, 0x0C	; 12
 364:	80 93 e3 00 	sts	0x00E3, r24
 368:	8a e5       	ldi	r24, 0x5A	; 90
 36a:	80 93 e4 00 	sts	0x00E4, r24
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	cd ee       	ldi	r28, 0xED	; 237
 372:	d0 e0       	ldi	r29, 0x00	; 0
 374:	ae ee       	ldi	r26, 0xEE	; 238
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	ef ee       	ldi	r30, 0xEF	; 239
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	98 2f       	mov	r25, r24
 37e:	92 95       	swap	r25
 380:	90 7f       	andi	r25, 0xF0	; 240
 382:	98 83       	st	Y, r25
 384:	1c 92       	st	X, r1
 386:	10 82       	st	Z, r1
 388:	8f 5f       	subi	r24, 0xFF	; 255
 38a:	8f 30       	cpi	r24, 0x0F	; 15
 38c:	b9 f7       	brne	.-18     	; 0x37c <can_init+0x24>
 38e:	e8 ed       	ldi	r30, 0xD8	; 216
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	82 60       	ori	r24, 0x02	; 2
 396:	80 83       	st	Z, r24
 398:	80 ea       	ldi	r24, 0xA0	; 160
 39a:	80 93 db 00 	sts	0x00DB, r24
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <can_packet_send>:
	*/
}

BOOL can_packet_send(char mob, CAN_packet *packet) {
	/* Clear global interrupts */
	cli();
 3a4:	f8 94       	cli
	BOOL result = can_tx(mob, packet);
 3a6:	63 df       	rcall	.-314    	; 0x26e <can_tx>
	/* Set global interrupts */
	sei();
 3a8:	78 94       	sei
	return result;
}
 3aa:	08 95       	ret

000003ac <inits>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

void inits( void) {
	can_init();
 3ac:	d5 df       	rcall	.-86     	; 0x358 <can_init>
	USART_init(MYUBRR, true);
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	83 e3       	ldi	r24, 0x33	; 51
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	be d0       	rcall	.+380    	; 0x532 <USART_init>
	sw_init();
 3b6:	77 d0       	rcall	.+238    	; 0x4a6 <sw_init>
	adc_init();
 3b8:	8b de       	rcall	.-746    	; 0xd0 <adc_init>
	printf("\r\nInitialization complete");
 3ba:	84 e2       	ldi	r24, 0x24	; 36
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	9f 93       	push	r25
 3c0:	8f 93       	push	r24
 3c2:	25 d1       	rcall	.+586    	; 0x60e <printf>
	sei();
 3c4:	78 94       	sei
	set_bit(DDRB, PB6);
 3c6:	26 9a       	sbi	0x04, 6	; 4
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	08 95       	ret

000003ce <main>:
}

int main(void)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	66 97       	sbiw	r28, 0x16	; 22
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
	/* Make two CAN packets */
	CAN_packet current_msg;
	CAN_packet updated_msg;
	
	/* Initialize module and packets*/
	inits();
 3e2:	e4 df       	rcall	.-56     	; 0x3ac <inits>
	
	/* Initialize packets */
	current_msg.id = ID_steeringWheel;
 3e4:	25 e0       	ldi	r18, 0x05	; 5
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	3a 83       	std	Y+2, r19	; 0x02
 3ea:	29 83       	std	Y+1, r18	; 0x01
	current_msg.length = 6;
 3ec:	86 e0       	ldi	r24, 0x06	; 6
 3ee:	8b 83       	std	Y+3, r24	; 0x03
	updated_msg.id = ID_steeringWheel;
 3f0:	3d 87       	std	Y+13, r19	; 0x0d
 3f2:	2c 87       	std	Y+12, r18	; 0x0c
	updated_msg.length = 6;
 3f4:	8e 87       	std	Y+14, r24	; 0x0e
	sw_input(&current_msg);
 3f6:	ce 01       	movw	r24, r28
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	64 d0       	rcall	.+200    	; 0x4c4 <sw_input>
	sw_input(&updated_msg);
 3fc:	ce 01       	movw	r24, r28
 3fe:	0c 96       	adiw	r24, 0x0c	; 12
 400:	61 d0       	rcall	.+194    	; 0x4c4 <sw_input>
	adc_input(&current_msg);
 402:	ce 01       	movw	r24, r28
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	81 de       	rcall	.-766    	; 0x10a <adc_input>
	adc_input(&updated_msg);
 408:	ce 01       	movw	r24, r28
 40a:	0c 96       	adiw	r24, 0x0c	; 12
 40c:	7e de       	rcall	.-772    	; 0x10a <adc_input>
	adc_sleep();
 40e:	72 de       	rcall	.-796    	; 0xf4 <adc_sleep>
		adc_sleep();
		/* Compare the two packets */
		different = memcmp(current_msg.data, updated_msg.data, 8);
		if (different) {			
			/* Send a message with new data */
			printf("\r\nData[0] sent - %d", updated_msg.data[0]);
 410:	0f 2e       	mov	r0, r31
 412:	fe e3       	ldi	r31, 0x3E	; 62
 414:	ef 2e       	mov	r14, r31
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	ff 2e       	mov	r15, r31
 41a:	f0 2d       	mov	r31, r0
			ret = can_packet_send(1, &updated_msg);
			current_msg = updated_msg;
 41c:	0f 2e       	mov	r0, r31
 41e:	fb e0       	ldi	r31, 0x0B	; 11
 420:	df 2e       	mov	r13, r31
 422:	f0 2d       	mov	r31, r0
		}
		//ret = can_packet_send(1, &updated_msg);
		
		if (ret) {
			printf("\r\nMessage sent");
 424:	02 e5       	ldi	r16, 0x52	; 82
 426:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 428:	2f ef       	ldi	r18, 0xFF	; 255
 42a:	80 e7       	ldi	r24, 0x70	; 112
 42c:	92 e0       	ldi	r25, 0x02	; 2
 42e:	21 50       	subi	r18, 0x01	; 1
 430:	80 40       	sbci	r24, 0x00	; 0
 432:	90 40       	sbci	r25, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <main+0x60>
 436:	00 c0       	rjmp	.+0      	; 0x438 <main+0x6a>
 438:	00 00       	nop
	adc_sleep();
	
    for(;;) {
		_delay_ms(100);
		/* Update one CAN_packet */
		sw_input(&updated_msg); 
 43a:	ce 01       	movw	r24, r28
 43c:	0c 96       	adiw	r24, 0x0c	; 12
 43e:	42 d0       	rcall	.+132    	; 0x4c4 <sw_input>
		adc_init();
 440:	47 de       	rcall	.-882    	; 0xd0 <adc_init>
		adc_input(&updated_msg);
 442:	ce 01       	movw	r24, r28
 444:	0c 96       	adiw	r24, 0x0c	; 12
 446:	61 de       	rcall	.-830    	; 0x10a <adc_input>
		adc_sleep();
 448:	55 de       	rcall	.-854    	; 0xf4 <adc_sleep>
		/* Compare the two packets */
		different = memcmp(current_msg.data, updated_msg.data, 8);
 44a:	48 e0       	ldi	r20, 0x08	; 8
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	be 01       	movw	r22, r28
 450:	61 5f       	subi	r22, 0xF1	; 241
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	ce 01       	movw	r24, r28
 456:	04 96       	adiw	r24, 0x04	; 4
 458:	83 d0       	rcall	.+262    	; 0x560 <memcmp>
		if (different) {			
 45a:	89 2b       	or	r24, r25
 45c:	09 f1       	breq	.+66     	; 0x4a0 <main+0xd2>
			/* Send a message with new data */
			printf("\r\nData[0] sent - %d", updated_msg.data[0]);
 45e:	8f 85       	ldd	r24, Y+15	; 0x0f
 460:	1f 92       	push	r1
 462:	8f 93       	push	r24
 464:	ff 92       	push	r15
 466:	ef 92       	push	r14
 468:	d2 d0       	rcall	.+420    	; 0x60e <printf>
			ret = can_packet_send(1, &updated_msg);
 46a:	be 01       	movw	r22, r28
 46c:	64 5f       	subi	r22, 0xF4	; 244
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	98 df       	rcall	.-208    	; 0x3a4 <can_packet_send>
			current_msg = updated_msg;
 474:	fe 01       	movw	r30, r28
 476:	3c 96       	adiw	r30, 0x0c	; 12
 478:	de 01       	movw	r26, r28
 47a:	11 96       	adiw	r26, 0x01	; 1
 47c:	9d 2d       	mov	r25, r13
 47e:	01 90       	ld	r0, Z+
 480:	0d 92       	st	X+, r0
 482:	9a 95       	dec	r25
 484:	e1 f7       	brne	.-8      	; 0x47e <main+0xb0>
		}
		//ret = can_packet_send(1, &updated_msg);
		
		if (ret) {
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	88 23       	and	r24, r24
 490:	39 f0       	breq	.+14     	; 0x4a0 <main+0xd2>
			printf("\r\nMessage sent");
 492:	1f 93       	push	r17
 494:	0f 93       	push	r16
 496:	bb d0       	rcall	.+374    	; 0x60e <printf>
			set_bit(DDRB, PB7);
 498:	27 9a       	sbi	0x04, 7	; 4
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <main+0xd4>
			ret = FALSE;
		} else
			clear_bit(DDRB, PB7);
 4a0:	27 98       	cbi	0x04, 7	; 4
 		//TODO: if successfully read, stop sending!
		asm("sleep");;
 4a2:	88 95       	sleep
	}
 4a4:	c1 cf       	rjmp	.-126    	; 0x428 <main+0x5a>

000004a6 <sw_init>:
#include "steering_wheel.h"

void sw_init( void) {	
	/* Indicators init */
	/* Set PE3 and PE4 as inputs */
	clear_bit(DDRE, DDE3);
 4a6:	6b 98       	cbi	0x0d, 3	; 13
	clear_bit(DDRE, DDE4);
 4a8:	6c 98       	cbi	0x0d, 4	; 13
	/* Set PE3 and PE4 as high (pull up res) */
	set_bit(PORTE, PE3);
 4aa:	73 9a       	sbi	0x0e, 3	; 14
	set_bit(PORTE, PE4);	
 4ac:	74 9a       	sbi	0x0e, 4	; 14
	
	/* Wipers init */
	clear_bit(DDRE, DDE5);
 4ae:	6d 98       	cbi	0x0d, 5	; 13
	set_bit(PORTE, PE5);
 4b0:	75 9a       	sbi	0x0e, 5	; 14
	
	/* Horn init */
	clear_bit(DDRB, DDB4);
 4b2:	24 98       	cbi	0x04, 4	; 4
	set_bit(PORTB, PB4);
 4b4:	2c 9a       	sbi	0x05, 4	; 5
	
	/* Deadman */
	clear_bit(DDRB, DDB3);
 4b6:	23 98       	cbi	0x04, 3	; 4
	set_bit(PORTB, PB3);
 4b8:	2b 9a       	sbi	0x05, 3	; 5
	
	/* Speed potentiometer uses adc_init() */
	
	/* Cruise control */
	clear_bit(DDRB, DDB2);
 4ba:	22 98       	cbi	0x04, 2	; 4
	clear_bit(DDRB, DDB1);
 4bc:	21 98       	cbi	0x04, 1	; 4
	set_bit(PORTB, PB2);
 4be:	2a 9a       	sbi	0x05, 2	; 5
	set_bit(PORTB, PB1);	
 4c0:	29 9a       	sbi	0x05, 1	; 5
 4c2:	08 95       	ret

000004c4 <sw_input>:
}

void sw_input( CAN_packet* p) {	
 4c4:	fc 01       	movw	r30, r24
	/* Initialize data */
	p->data[0] = 0x00;
 4c6:	13 82       	std	Z+3, r1	; 0x03
	/* Read right/left indicator */
	if(!test_bit(PINE, PE4))
 4c8:	64 99       	sbic	0x0c, 4	; 12
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <sw_input+0xe>
		p->data[0] |= (1<<0);
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	83 83       	std	Z+3, r24	; 0x03
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <sw_input+0x16>
	else if (!test_bit(PINE, PE3))
 4d2:	63 99       	sbic	0x0c, 3	; 12
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <sw_input+0x16>
		p->data[0] |= (1<<1);	
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	83 83       	std	Z+3, r24	; 0x03
	/* Read cruise control */
	if(!test_bit(PINB, PB2))
 4da:	1a 99       	sbic	0x03, 2	; 3
 4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <sw_input+0x22>
		p->data[0] |= (1<<2);
 4de:	83 81       	ldd	r24, Z+3	; 0x03
 4e0:	84 60       	ori	r24, 0x04	; 4
 4e2:	83 83       	std	Z+3, r24	; 0x03
 4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <sw_input+0x2c>
	else if(!test_bit(PINB, PB1))
 4e6:	19 99       	sbic	0x03, 1	; 3
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <sw_input+0x2c>
		p->data[0] |= (1<<3);	
 4ea:	83 81       	ldd	r24, Z+3	; 0x03
 4ec:	88 60       	ori	r24, 0x08	; 8
 4ee:	83 83       	std	Z+3, r24	; 0x03
	/* Read horn */
	if (!test_bit(PINB, PB4))
 4f0:	1c 99       	sbic	0x03, 4	; 3
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <sw_input+0x36>
		p->data[0] |= (1<<4);
 4f4:	83 81       	ldd	r24, Z+3	; 0x03
 4f6:	80 61       	ori	r24, 0x10	; 16
 4f8:	83 83       	std	Z+3, r24	; 0x03
	/* Read whiper */
	if (!test_bit(PINE, PE5))
 4fa:	65 99       	sbic	0x0c, 5	; 12
 4fc:	03 c0       	rjmp	.+6      	; 0x504 <sw_input+0x40>
		p->data[0] |= (1<<5);
 4fe:	83 81       	ldd	r24, Z+3	; 0x03
 500:	80 62       	ori	r24, 0x20	; 32
 502:	83 83       	std	Z+3, r24	; 0x03
	/* Read deadman */
	if (!test_bit(PINB, PB3))
 504:	1b 99       	sbic	0x03, 3	; 3
 506:	03 c0       	rjmp	.+6      	; 0x50e <sw_input+0x4a>
		p->data[0] |= (1<<6);
 508:	83 81       	ldd	r24, Z+3	; 0x03
 50a:	80 64       	ori	r24, 0x40	; 64
 50c:	83 83       	std	Z+3, r24	; 0x03
 50e:	08 95       	ret

00000510 <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 510:	e0 ec       	ldi	r30, 0xC0	; 192
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	90 81       	ld	r25, Z
 516:	95 ff       	sbrs	r25, 5
 518:	fd cf       	rjmp	.-6      	; 0x514 <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 51a:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	08 95       	ret

00000522 <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 522:	e0 ec       	ldi	r30, 0xC0	; 192
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	88 23       	and	r24, r24
 52a:	ec f7       	brge	.-6      	; 0x526 <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 52c:	80 91 c6 00 	lds	r24, 0x00C6
}
 530:	08 95       	ret

00000532 <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 532:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 536:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 53a:	86 e0       	ldi	r24, 0x06	; 6
 53c:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 540:	66 23       	and	r22, r22
 542:	41 f0       	breq	.+16     	; 0x554 <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 544:	e1 ec       	ldi	r30, 0xC1	; 193
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	80 61       	ori	r24, 0x10	; 16
 54c:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 54e:	80 81       	ld	r24, Z
 550:	88 60       	ori	r24, 0x08	; 8
 552:	80 83       	st	Z, r24
	}
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 554:	61 e9       	ldi	r22, 0x91	; 145
 556:	72 e0       	ldi	r23, 0x02	; 2
 558:	88 e8       	ldi	r24, 0x88	; 136
 55a:	92 e0       	ldi	r25, 0x02	; 2
 55c:	0e c0       	rjmp	.+28     	; 0x57a <fdevopen>
 55e:	08 95       	ret

00000560 <memcmp>:
 560:	fb 01       	movw	r30, r22
 562:	dc 01       	movw	r26, r24
 564:	04 c0       	rjmp	.+8      	; 0x56e <memcmp+0xe>
 566:	8d 91       	ld	r24, X+
 568:	01 90       	ld	r0, Z+
 56a:	80 19       	sub	r24, r0
 56c:	21 f4       	brne	.+8      	; 0x576 <memcmp+0x16>
 56e:	41 50       	subi	r20, 0x01	; 1
 570:	50 40       	sbci	r21, 0x00	; 0
 572:	c8 f7       	brcc	.-14     	; 0x566 <memcmp+0x6>
 574:	88 1b       	sub	r24, r24
 576:	99 0b       	sbc	r25, r25
 578:	08 95       	ret

0000057a <fdevopen>:
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	00 97       	sbiw	r24, 0x00	; 0
 584:	31 f4       	brne	.+12     	; 0x592 <fdevopen+0x18>
 586:	61 15       	cp	r22, r1
 588:	71 05       	cpc	r23, r1
 58a:	19 f4       	brne	.+6      	; 0x592 <fdevopen+0x18>
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	39 c0       	rjmp	.+114    	; 0x604 <fdevopen+0x8a>
 592:	8b 01       	movw	r16, r22
 594:	ec 01       	movw	r28, r24
 596:	6e e0       	ldi	r22, 0x0E	; 14
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	38 d2       	rcall	.+1136   	; 0xa10 <calloc>
 5a0:	fc 01       	movw	r30, r24
 5a2:	89 2b       	or	r24, r25
 5a4:	99 f3       	breq	.-26     	; 0x58c <fdevopen+0x12>
 5a6:	80 e8       	ldi	r24, 0x80	; 128
 5a8:	83 83       	std	Z+3, r24	; 0x03
 5aa:	01 15       	cp	r16, r1
 5ac:	11 05       	cpc	r17, r1
 5ae:	71 f0       	breq	.+28     	; 0x5cc <fdevopen+0x52>
 5b0:	13 87       	std	Z+11, r17	; 0x0b
 5b2:	02 87       	std	Z+10, r16	; 0x0a
 5b4:	81 e8       	ldi	r24, 0x81	; 129
 5b6:	83 83       	std	Z+3, r24	; 0x03
 5b8:	80 91 8b 01 	lds	r24, 0x018B
 5bc:	90 91 8c 01 	lds	r25, 0x018C
 5c0:	89 2b       	or	r24, r25
 5c2:	21 f4       	brne	.+8      	; 0x5cc <fdevopen+0x52>
 5c4:	f0 93 8c 01 	sts	0x018C, r31
 5c8:	e0 93 8b 01 	sts	0x018B, r30
 5cc:	20 97       	sbiw	r28, 0x00	; 0
 5ce:	c9 f0       	breq	.+50     	; 0x602 <fdevopen+0x88>
 5d0:	d1 87       	std	Z+9, r29	; 0x09
 5d2:	c0 87       	std	Z+8, r28	; 0x08
 5d4:	83 81       	ldd	r24, Z+3	; 0x03
 5d6:	82 60       	ori	r24, 0x02	; 2
 5d8:	83 83       	std	Z+3, r24	; 0x03
 5da:	80 91 8d 01 	lds	r24, 0x018D
 5de:	90 91 8e 01 	lds	r25, 0x018E
 5e2:	89 2b       	or	r24, r25
 5e4:	71 f4       	brne	.+28     	; 0x602 <fdevopen+0x88>
 5e6:	f0 93 8e 01 	sts	0x018E, r31
 5ea:	e0 93 8d 01 	sts	0x018D, r30
 5ee:	80 91 8f 01 	lds	r24, 0x018F
 5f2:	90 91 90 01 	lds	r25, 0x0190
 5f6:	89 2b       	or	r24, r25
 5f8:	21 f4       	brne	.+8      	; 0x602 <fdevopen+0x88>
 5fa:	f0 93 90 01 	sts	0x0190, r31
 5fe:	e0 93 8f 01 	sts	0x018F, r30
 602:	cf 01       	movw	r24, r30
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	08 95       	ret

0000060e <printf>:
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
 616:	ae 01       	movw	r20, r28
 618:	4b 5f       	subi	r20, 0xFB	; 251
 61a:	5f 4f       	sbci	r21, 0xFF	; 255
 61c:	fa 01       	movw	r30, r20
 61e:	61 91       	ld	r22, Z+
 620:	71 91       	ld	r23, Z+
 622:	af 01       	movw	r20, r30
 624:	80 91 8d 01 	lds	r24, 0x018D
 628:	90 91 8e 01 	lds	r25, 0x018E
 62c:	03 d0       	rcall	.+6      	; 0x634 <vfprintf>
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <vfprintf>:
 634:	2f 92       	push	r2
 636:	3f 92       	push	r3
 638:	4f 92       	push	r4
 63a:	5f 92       	push	r5
 63c:	6f 92       	push	r6
 63e:	7f 92       	push	r7
 640:	8f 92       	push	r8
 642:	9f 92       	push	r9
 644:	af 92       	push	r10
 646:	bf 92       	push	r11
 648:	cf 92       	push	r12
 64a:	df 92       	push	r13
 64c:	ef 92       	push	r14
 64e:	ff 92       	push	r15
 650:	0f 93       	push	r16
 652:	1f 93       	push	r17
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	2c 97       	sbiw	r28, 0x0c	; 12
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
 668:	7c 01       	movw	r14, r24
 66a:	6b 01       	movw	r12, r22
 66c:	8a 01       	movw	r16, r20
 66e:	fc 01       	movw	r30, r24
 670:	17 82       	std	Z+7, r1	; 0x07
 672:	16 82       	std	Z+6, r1	; 0x06
 674:	83 81       	ldd	r24, Z+3	; 0x03
 676:	81 ff       	sbrs	r24, 1
 678:	b0 c1       	rjmp	.+864    	; 0x9da <vfprintf+0x3a6>
 67a:	ce 01       	movw	r24, r28
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	4c 01       	movw	r8, r24
 680:	f7 01       	movw	r30, r14
 682:	93 81       	ldd	r25, Z+3	; 0x03
 684:	f6 01       	movw	r30, r12
 686:	93 fd       	sbrc	r25, 3
 688:	85 91       	lpm	r24, Z+
 68a:	93 ff       	sbrs	r25, 3
 68c:	81 91       	ld	r24, Z+
 68e:	6f 01       	movw	r12, r30
 690:	88 23       	and	r24, r24
 692:	09 f4       	brne	.+2      	; 0x696 <vfprintf+0x62>
 694:	9e c1       	rjmp	.+828    	; 0x9d2 <vfprintf+0x39e>
 696:	85 32       	cpi	r24, 0x25	; 37
 698:	39 f4       	brne	.+14     	; 0x6a8 <vfprintf+0x74>
 69a:	93 fd       	sbrc	r25, 3
 69c:	85 91       	lpm	r24, Z+
 69e:	93 ff       	sbrs	r25, 3
 6a0:	81 91       	ld	r24, Z+
 6a2:	6f 01       	movw	r12, r30
 6a4:	85 32       	cpi	r24, 0x25	; 37
 6a6:	21 f4       	brne	.+8      	; 0x6b0 <vfprintf+0x7c>
 6a8:	b7 01       	movw	r22, r14
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	15 d3       	rcall	.+1578   	; 0xcd8 <fputc>
 6ae:	e8 cf       	rjmp	.-48     	; 0x680 <vfprintf+0x4c>
 6b0:	51 2c       	mov	r5, r1
 6b2:	31 2c       	mov	r3, r1
 6b4:	20 e0       	ldi	r18, 0x00	; 0
 6b6:	20 32       	cpi	r18, 0x20	; 32
 6b8:	a0 f4       	brcc	.+40     	; 0x6e2 <vfprintf+0xae>
 6ba:	8b 32       	cpi	r24, 0x2B	; 43
 6bc:	69 f0       	breq	.+26     	; 0x6d8 <vfprintf+0xa4>
 6be:	30 f4       	brcc	.+12     	; 0x6cc <vfprintf+0x98>
 6c0:	80 32       	cpi	r24, 0x20	; 32
 6c2:	59 f0       	breq	.+22     	; 0x6da <vfprintf+0xa6>
 6c4:	83 32       	cpi	r24, 0x23	; 35
 6c6:	69 f4       	brne	.+26     	; 0x6e2 <vfprintf+0xae>
 6c8:	20 61       	ori	r18, 0x10	; 16
 6ca:	2c c0       	rjmp	.+88     	; 0x724 <vfprintf+0xf0>
 6cc:	8d 32       	cpi	r24, 0x2D	; 45
 6ce:	39 f0       	breq	.+14     	; 0x6de <vfprintf+0xaa>
 6d0:	80 33       	cpi	r24, 0x30	; 48
 6d2:	39 f4       	brne	.+14     	; 0x6e2 <vfprintf+0xae>
 6d4:	21 60       	ori	r18, 0x01	; 1
 6d6:	26 c0       	rjmp	.+76     	; 0x724 <vfprintf+0xf0>
 6d8:	22 60       	ori	r18, 0x02	; 2
 6da:	24 60       	ori	r18, 0x04	; 4
 6dc:	23 c0       	rjmp	.+70     	; 0x724 <vfprintf+0xf0>
 6de:	28 60       	ori	r18, 0x08	; 8
 6e0:	21 c0       	rjmp	.+66     	; 0x724 <vfprintf+0xf0>
 6e2:	27 fd       	sbrc	r18, 7
 6e4:	27 c0       	rjmp	.+78     	; 0x734 <vfprintf+0x100>
 6e6:	30 ed       	ldi	r19, 0xD0	; 208
 6e8:	38 0f       	add	r19, r24
 6ea:	3a 30       	cpi	r19, 0x0A	; 10
 6ec:	78 f4       	brcc	.+30     	; 0x70c <vfprintf+0xd8>
 6ee:	26 ff       	sbrs	r18, 6
 6f0:	06 c0       	rjmp	.+12     	; 0x6fe <vfprintf+0xca>
 6f2:	fa e0       	ldi	r31, 0x0A	; 10
 6f4:	5f 9e       	mul	r5, r31
 6f6:	30 0d       	add	r19, r0
 6f8:	11 24       	eor	r1, r1
 6fa:	53 2e       	mov	r5, r19
 6fc:	13 c0       	rjmp	.+38     	; 0x724 <vfprintf+0xf0>
 6fe:	8a e0       	ldi	r24, 0x0A	; 10
 700:	38 9e       	mul	r3, r24
 702:	30 0d       	add	r19, r0
 704:	11 24       	eor	r1, r1
 706:	33 2e       	mov	r3, r19
 708:	20 62       	ori	r18, 0x20	; 32
 70a:	0c c0       	rjmp	.+24     	; 0x724 <vfprintf+0xf0>
 70c:	8e 32       	cpi	r24, 0x2E	; 46
 70e:	21 f4       	brne	.+8      	; 0x718 <vfprintf+0xe4>
 710:	26 fd       	sbrc	r18, 6
 712:	5f c1       	rjmp	.+702    	; 0x9d2 <vfprintf+0x39e>
 714:	20 64       	ori	r18, 0x40	; 64
 716:	06 c0       	rjmp	.+12     	; 0x724 <vfprintf+0xf0>
 718:	8c 36       	cpi	r24, 0x6C	; 108
 71a:	11 f4       	brne	.+4      	; 0x720 <vfprintf+0xec>
 71c:	20 68       	ori	r18, 0x80	; 128
 71e:	02 c0       	rjmp	.+4      	; 0x724 <vfprintf+0xf0>
 720:	88 36       	cpi	r24, 0x68	; 104
 722:	41 f4       	brne	.+16     	; 0x734 <vfprintf+0x100>
 724:	f6 01       	movw	r30, r12
 726:	93 fd       	sbrc	r25, 3
 728:	85 91       	lpm	r24, Z+
 72a:	93 ff       	sbrs	r25, 3
 72c:	81 91       	ld	r24, Z+
 72e:	6f 01       	movw	r12, r30
 730:	81 11       	cpse	r24, r1
 732:	c1 cf       	rjmp	.-126    	; 0x6b6 <vfprintf+0x82>
 734:	98 2f       	mov	r25, r24
 736:	9f 7d       	andi	r25, 0xDF	; 223
 738:	95 54       	subi	r25, 0x45	; 69
 73a:	93 30       	cpi	r25, 0x03	; 3
 73c:	28 f4       	brcc	.+10     	; 0x748 <vfprintf+0x114>
 73e:	0c 5f       	subi	r16, 0xFC	; 252
 740:	1f 4f       	sbci	r17, 0xFF	; 255
 742:	ff e3       	ldi	r31, 0x3F	; 63
 744:	f9 83       	std	Y+1, r31	; 0x01
 746:	0d c0       	rjmp	.+26     	; 0x762 <vfprintf+0x12e>
 748:	83 36       	cpi	r24, 0x63	; 99
 74a:	31 f0       	breq	.+12     	; 0x758 <vfprintf+0x124>
 74c:	83 37       	cpi	r24, 0x73	; 115
 74e:	71 f0       	breq	.+28     	; 0x76c <vfprintf+0x138>
 750:	83 35       	cpi	r24, 0x53	; 83
 752:	09 f0       	breq	.+2      	; 0x756 <vfprintf+0x122>
 754:	57 c0       	rjmp	.+174    	; 0x804 <vfprintf+0x1d0>
 756:	21 c0       	rjmp	.+66     	; 0x79a <vfprintf+0x166>
 758:	f8 01       	movw	r30, r16
 75a:	80 81       	ld	r24, Z
 75c:	89 83       	std	Y+1, r24	; 0x01
 75e:	0e 5f       	subi	r16, 0xFE	; 254
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	44 24       	eor	r4, r4
 764:	43 94       	inc	r4
 766:	51 2c       	mov	r5, r1
 768:	54 01       	movw	r10, r8
 76a:	14 c0       	rjmp	.+40     	; 0x794 <vfprintf+0x160>
 76c:	38 01       	movw	r6, r16
 76e:	f2 e0       	ldi	r31, 0x02	; 2
 770:	6f 0e       	add	r6, r31
 772:	71 1c       	adc	r7, r1
 774:	f8 01       	movw	r30, r16
 776:	a0 80       	ld	r10, Z
 778:	b1 80       	ldd	r11, Z+1	; 0x01
 77a:	26 ff       	sbrs	r18, 6
 77c:	03 c0       	rjmp	.+6      	; 0x784 <vfprintf+0x150>
 77e:	65 2d       	mov	r22, r5
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	02 c0       	rjmp	.+4      	; 0x788 <vfprintf+0x154>
 784:	6f ef       	ldi	r22, 0xFF	; 255
 786:	7f ef       	ldi	r23, 0xFF	; 255
 788:	c5 01       	movw	r24, r10
 78a:	2c 87       	std	Y+12, r18	; 0x0c
 78c:	9a d2       	rcall	.+1332   	; 0xcc2 <strnlen>
 78e:	2c 01       	movw	r4, r24
 790:	83 01       	movw	r16, r6
 792:	2c 85       	ldd	r18, Y+12	; 0x0c
 794:	2f 77       	andi	r18, 0x7F	; 127
 796:	22 2e       	mov	r2, r18
 798:	16 c0       	rjmp	.+44     	; 0x7c6 <vfprintf+0x192>
 79a:	38 01       	movw	r6, r16
 79c:	f2 e0       	ldi	r31, 0x02	; 2
 79e:	6f 0e       	add	r6, r31
 7a0:	71 1c       	adc	r7, r1
 7a2:	f8 01       	movw	r30, r16
 7a4:	a0 80       	ld	r10, Z
 7a6:	b1 80       	ldd	r11, Z+1	; 0x01
 7a8:	26 ff       	sbrs	r18, 6
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <vfprintf+0x17e>
 7ac:	65 2d       	mov	r22, r5
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <vfprintf+0x182>
 7b2:	6f ef       	ldi	r22, 0xFF	; 255
 7b4:	7f ef       	ldi	r23, 0xFF	; 255
 7b6:	c5 01       	movw	r24, r10
 7b8:	2c 87       	std	Y+12, r18	; 0x0c
 7ba:	71 d2       	rcall	.+1250   	; 0xc9e <strnlen_P>
 7bc:	2c 01       	movw	r4, r24
 7be:	2c 85       	ldd	r18, Y+12	; 0x0c
 7c0:	20 68       	ori	r18, 0x80	; 128
 7c2:	22 2e       	mov	r2, r18
 7c4:	83 01       	movw	r16, r6
 7c6:	23 fc       	sbrc	r2, 3
 7c8:	19 c0       	rjmp	.+50     	; 0x7fc <vfprintf+0x1c8>
 7ca:	83 2d       	mov	r24, r3
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	48 16       	cp	r4, r24
 7d0:	59 06       	cpc	r5, r25
 7d2:	a0 f4       	brcc	.+40     	; 0x7fc <vfprintf+0x1c8>
 7d4:	b7 01       	movw	r22, r14
 7d6:	80 e2       	ldi	r24, 0x20	; 32
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	7e d2       	rcall	.+1276   	; 0xcd8 <fputc>
 7dc:	3a 94       	dec	r3
 7de:	f5 cf       	rjmp	.-22     	; 0x7ca <vfprintf+0x196>
 7e0:	f5 01       	movw	r30, r10
 7e2:	27 fc       	sbrc	r2, 7
 7e4:	85 91       	lpm	r24, Z+
 7e6:	27 fe       	sbrs	r2, 7
 7e8:	81 91       	ld	r24, Z+
 7ea:	5f 01       	movw	r10, r30
 7ec:	b7 01       	movw	r22, r14
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	73 d2       	rcall	.+1254   	; 0xcd8 <fputc>
 7f2:	31 10       	cpse	r3, r1
 7f4:	3a 94       	dec	r3
 7f6:	f1 e0       	ldi	r31, 0x01	; 1
 7f8:	4f 1a       	sub	r4, r31
 7fa:	51 08       	sbc	r5, r1
 7fc:	41 14       	cp	r4, r1
 7fe:	51 04       	cpc	r5, r1
 800:	79 f7       	brne	.-34     	; 0x7e0 <vfprintf+0x1ac>
 802:	de c0       	rjmp	.+444    	; 0x9c0 <vfprintf+0x38c>
 804:	84 36       	cpi	r24, 0x64	; 100
 806:	11 f0       	breq	.+4      	; 0x80c <vfprintf+0x1d8>
 808:	89 36       	cpi	r24, 0x69	; 105
 80a:	31 f5       	brne	.+76     	; 0x858 <vfprintf+0x224>
 80c:	f8 01       	movw	r30, r16
 80e:	27 ff       	sbrs	r18, 7
 810:	07 c0       	rjmp	.+14     	; 0x820 <vfprintf+0x1ec>
 812:	60 81       	ld	r22, Z
 814:	71 81       	ldd	r23, Z+1	; 0x01
 816:	82 81       	ldd	r24, Z+2	; 0x02
 818:	93 81       	ldd	r25, Z+3	; 0x03
 81a:	0c 5f       	subi	r16, 0xFC	; 252
 81c:	1f 4f       	sbci	r17, 0xFF	; 255
 81e:	08 c0       	rjmp	.+16     	; 0x830 <vfprintf+0x1fc>
 820:	60 81       	ld	r22, Z
 822:	71 81       	ldd	r23, Z+1	; 0x01
 824:	07 2e       	mov	r0, r23
 826:	00 0c       	add	r0, r0
 828:	88 0b       	sbc	r24, r24
 82a:	99 0b       	sbc	r25, r25
 82c:	0e 5f       	subi	r16, 0xFE	; 254
 82e:	1f 4f       	sbci	r17, 0xFF	; 255
 830:	2f 76       	andi	r18, 0x6F	; 111
 832:	72 2e       	mov	r7, r18
 834:	97 ff       	sbrs	r25, 7
 836:	09 c0       	rjmp	.+18     	; 0x84a <vfprintf+0x216>
 838:	90 95       	com	r25
 83a:	80 95       	com	r24
 83c:	70 95       	com	r23
 83e:	61 95       	neg	r22
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	20 68       	ori	r18, 0x80	; 128
 848:	72 2e       	mov	r7, r18
 84a:	2a e0       	ldi	r18, 0x0A	; 10
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	a4 01       	movw	r20, r8
 850:	7b d2       	rcall	.+1270   	; 0xd48 <__ultoa_invert>
 852:	a8 2e       	mov	r10, r24
 854:	a8 18       	sub	r10, r8
 856:	43 c0       	rjmp	.+134    	; 0x8de <vfprintf+0x2aa>
 858:	85 37       	cpi	r24, 0x75	; 117
 85a:	29 f4       	brne	.+10     	; 0x866 <vfprintf+0x232>
 85c:	2f 7e       	andi	r18, 0xEF	; 239
 85e:	b2 2e       	mov	r11, r18
 860:	2a e0       	ldi	r18, 0x0A	; 10
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	25 c0       	rjmp	.+74     	; 0x8b0 <vfprintf+0x27c>
 866:	f2 2f       	mov	r31, r18
 868:	f9 7f       	andi	r31, 0xF9	; 249
 86a:	bf 2e       	mov	r11, r31
 86c:	8f 36       	cpi	r24, 0x6F	; 111
 86e:	c1 f0       	breq	.+48     	; 0x8a0 <vfprintf+0x26c>
 870:	18 f4       	brcc	.+6      	; 0x878 <vfprintf+0x244>
 872:	88 35       	cpi	r24, 0x58	; 88
 874:	79 f0       	breq	.+30     	; 0x894 <vfprintf+0x260>
 876:	ad c0       	rjmp	.+346    	; 0x9d2 <vfprintf+0x39e>
 878:	80 37       	cpi	r24, 0x70	; 112
 87a:	19 f0       	breq	.+6      	; 0x882 <vfprintf+0x24e>
 87c:	88 37       	cpi	r24, 0x78	; 120
 87e:	21 f0       	breq	.+8      	; 0x888 <vfprintf+0x254>
 880:	a8 c0       	rjmp	.+336    	; 0x9d2 <vfprintf+0x39e>
 882:	2f 2f       	mov	r18, r31
 884:	20 61       	ori	r18, 0x10	; 16
 886:	b2 2e       	mov	r11, r18
 888:	b4 fe       	sbrs	r11, 4
 88a:	0d c0       	rjmp	.+26     	; 0x8a6 <vfprintf+0x272>
 88c:	8b 2d       	mov	r24, r11
 88e:	84 60       	ori	r24, 0x04	; 4
 890:	b8 2e       	mov	r11, r24
 892:	09 c0       	rjmp	.+18     	; 0x8a6 <vfprintf+0x272>
 894:	24 ff       	sbrs	r18, 4
 896:	0a c0       	rjmp	.+20     	; 0x8ac <vfprintf+0x278>
 898:	9f 2f       	mov	r25, r31
 89a:	96 60       	ori	r25, 0x06	; 6
 89c:	b9 2e       	mov	r11, r25
 89e:	06 c0       	rjmp	.+12     	; 0x8ac <vfprintf+0x278>
 8a0:	28 e0       	ldi	r18, 0x08	; 8
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <vfprintf+0x27c>
 8a6:	20 e1       	ldi	r18, 0x10	; 16
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <vfprintf+0x27c>
 8ac:	20 e1       	ldi	r18, 0x10	; 16
 8ae:	32 e0       	ldi	r19, 0x02	; 2
 8b0:	f8 01       	movw	r30, r16
 8b2:	b7 fe       	sbrs	r11, 7
 8b4:	07 c0       	rjmp	.+14     	; 0x8c4 <vfprintf+0x290>
 8b6:	60 81       	ld	r22, Z
 8b8:	71 81       	ldd	r23, Z+1	; 0x01
 8ba:	82 81       	ldd	r24, Z+2	; 0x02
 8bc:	93 81       	ldd	r25, Z+3	; 0x03
 8be:	0c 5f       	subi	r16, 0xFC	; 252
 8c0:	1f 4f       	sbci	r17, 0xFF	; 255
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <vfprintf+0x29c>
 8c4:	60 81       	ld	r22, Z
 8c6:	71 81       	ldd	r23, Z+1	; 0x01
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 5f       	subi	r16, 0xFE	; 254
 8ce:	1f 4f       	sbci	r17, 0xFF	; 255
 8d0:	a4 01       	movw	r20, r8
 8d2:	3a d2       	rcall	.+1140   	; 0xd48 <__ultoa_invert>
 8d4:	a8 2e       	mov	r10, r24
 8d6:	a8 18       	sub	r10, r8
 8d8:	fb 2d       	mov	r31, r11
 8da:	ff 77       	andi	r31, 0x7F	; 127
 8dc:	7f 2e       	mov	r7, r31
 8de:	76 fe       	sbrs	r7, 6
 8e0:	0b c0       	rjmp	.+22     	; 0x8f8 <vfprintf+0x2c4>
 8e2:	37 2d       	mov	r19, r7
 8e4:	3e 7f       	andi	r19, 0xFE	; 254
 8e6:	a5 14       	cp	r10, r5
 8e8:	50 f4       	brcc	.+20     	; 0x8fe <vfprintf+0x2ca>
 8ea:	74 fe       	sbrs	r7, 4
 8ec:	0a c0       	rjmp	.+20     	; 0x902 <vfprintf+0x2ce>
 8ee:	72 fc       	sbrc	r7, 2
 8f0:	08 c0       	rjmp	.+16     	; 0x902 <vfprintf+0x2ce>
 8f2:	37 2d       	mov	r19, r7
 8f4:	3e 7e       	andi	r19, 0xEE	; 238
 8f6:	05 c0       	rjmp	.+10     	; 0x902 <vfprintf+0x2ce>
 8f8:	ba 2c       	mov	r11, r10
 8fa:	37 2d       	mov	r19, r7
 8fc:	03 c0       	rjmp	.+6      	; 0x904 <vfprintf+0x2d0>
 8fe:	ba 2c       	mov	r11, r10
 900:	01 c0       	rjmp	.+2      	; 0x904 <vfprintf+0x2d0>
 902:	b5 2c       	mov	r11, r5
 904:	34 ff       	sbrs	r19, 4
 906:	0d c0       	rjmp	.+26     	; 0x922 <vfprintf+0x2ee>
 908:	fe 01       	movw	r30, r28
 90a:	ea 0d       	add	r30, r10
 90c:	f1 1d       	adc	r31, r1
 90e:	80 81       	ld	r24, Z
 910:	80 33       	cpi	r24, 0x30	; 48
 912:	11 f4       	brne	.+4      	; 0x918 <vfprintf+0x2e4>
 914:	39 7e       	andi	r19, 0xE9	; 233
 916:	09 c0       	rjmp	.+18     	; 0x92a <vfprintf+0x2f6>
 918:	32 ff       	sbrs	r19, 2
 91a:	06 c0       	rjmp	.+12     	; 0x928 <vfprintf+0x2f4>
 91c:	b3 94       	inc	r11
 91e:	b3 94       	inc	r11
 920:	04 c0       	rjmp	.+8      	; 0x92a <vfprintf+0x2f6>
 922:	83 2f       	mov	r24, r19
 924:	86 78       	andi	r24, 0x86	; 134
 926:	09 f0       	breq	.+2      	; 0x92a <vfprintf+0x2f6>
 928:	b3 94       	inc	r11
 92a:	33 fd       	sbrc	r19, 3
 92c:	12 c0       	rjmp	.+36     	; 0x952 <vfprintf+0x31e>
 92e:	30 ff       	sbrs	r19, 0
 930:	06 c0       	rjmp	.+12     	; 0x93e <vfprintf+0x30a>
 932:	5a 2c       	mov	r5, r10
 934:	b3 14       	cp	r11, r3
 936:	18 f4       	brcc	.+6      	; 0x93e <vfprintf+0x30a>
 938:	53 0c       	add	r5, r3
 93a:	5b 18       	sub	r5, r11
 93c:	b3 2c       	mov	r11, r3
 93e:	b3 14       	cp	r11, r3
 940:	60 f4       	brcc	.+24     	; 0x95a <vfprintf+0x326>
 942:	b7 01       	movw	r22, r14
 944:	80 e2       	ldi	r24, 0x20	; 32
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	3c 87       	std	Y+12, r19	; 0x0c
 94a:	c6 d1       	rcall	.+908    	; 0xcd8 <fputc>
 94c:	b3 94       	inc	r11
 94e:	3c 85       	ldd	r19, Y+12	; 0x0c
 950:	f6 cf       	rjmp	.-20     	; 0x93e <vfprintf+0x30a>
 952:	b3 14       	cp	r11, r3
 954:	10 f4       	brcc	.+4      	; 0x95a <vfprintf+0x326>
 956:	3b 18       	sub	r3, r11
 958:	01 c0       	rjmp	.+2      	; 0x95c <vfprintf+0x328>
 95a:	31 2c       	mov	r3, r1
 95c:	34 ff       	sbrs	r19, 4
 95e:	11 c0       	rjmp	.+34     	; 0x982 <vfprintf+0x34e>
 960:	b7 01       	movw	r22, r14
 962:	80 e3       	ldi	r24, 0x30	; 48
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	3c 87       	std	Y+12, r19	; 0x0c
 968:	b7 d1       	rcall	.+878    	; 0xcd8 <fputc>
 96a:	3c 85       	ldd	r19, Y+12	; 0x0c
 96c:	32 ff       	sbrs	r19, 2
 96e:	16 c0       	rjmp	.+44     	; 0x99c <vfprintf+0x368>
 970:	31 fd       	sbrc	r19, 1
 972:	03 c0       	rjmp	.+6      	; 0x97a <vfprintf+0x346>
 974:	88 e7       	ldi	r24, 0x78	; 120
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	02 c0       	rjmp	.+4      	; 0x97e <vfprintf+0x34a>
 97a:	88 e5       	ldi	r24, 0x58	; 88
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	b7 01       	movw	r22, r14
 980:	0c c0       	rjmp	.+24     	; 0x99a <vfprintf+0x366>
 982:	83 2f       	mov	r24, r19
 984:	86 78       	andi	r24, 0x86	; 134
 986:	51 f0       	breq	.+20     	; 0x99c <vfprintf+0x368>
 988:	31 ff       	sbrs	r19, 1
 98a:	02 c0       	rjmp	.+4      	; 0x990 <vfprintf+0x35c>
 98c:	8b e2       	ldi	r24, 0x2B	; 43
 98e:	01 c0       	rjmp	.+2      	; 0x992 <vfprintf+0x35e>
 990:	80 e2       	ldi	r24, 0x20	; 32
 992:	37 fd       	sbrc	r19, 7
 994:	8d e2       	ldi	r24, 0x2D	; 45
 996:	b7 01       	movw	r22, r14
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	9e d1       	rcall	.+828    	; 0xcd8 <fputc>
 99c:	a5 14       	cp	r10, r5
 99e:	30 f4       	brcc	.+12     	; 0x9ac <vfprintf+0x378>
 9a0:	b7 01       	movw	r22, r14
 9a2:	80 e3       	ldi	r24, 0x30	; 48
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	98 d1       	rcall	.+816    	; 0xcd8 <fputc>
 9a8:	5a 94       	dec	r5
 9aa:	f8 cf       	rjmp	.-16     	; 0x99c <vfprintf+0x368>
 9ac:	aa 94       	dec	r10
 9ae:	f4 01       	movw	r30, r8
 9b0:	ea 0d       	add	r30, r10
 9b2:	f1 1d       	adc	r31, r1
 9b4:	80 81       	ld	r24, Z
 9b6:	b7 01       	movw	r22, r14
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	8e d1       	rcall	.+796    	; 0xcd8 <fputc>
 9bc:	a1 10       	cpse	r10, r1
 9be:	f6 cf       	rjmp	.-20     	; 0x9ac <vfprintf+0x378>
 9c0:	33 20       	and	r3, r3
 9c2:	09 f4       	brne	.+2      	; 0x9c6 <vfprintf+0x392>
 9c4:	5d ce       	rjmp	.-838    	; 0x680 <vfprintf+0x4c>
 9c6:	b7 01       	movw	r22, r14
 9c8:	80 e2       	ldi	r24, 0x20	; 32
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	85 d1       	rcall	.+778    	; 0xcd8 <fputc>
 9ce:	3a 94       	dec	r3
 9d0:	f7 cf       	rjmp	.-18     	; 0x9c0 <vfprintf+0x38c>
 9d2:	f7 01       	movw	r30, r14
 9d4:	86 81       	ldd	r24, Z+6	; 0x06
 9d6:	97 81       	ldd	r25, Z+7	; 0x07
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <vfprintf+0x3aa>
 9da:	8f ef       	ldi	r24, 0xFF	; 255
 9dc:	9f ef       	ldi	r25, 0xFF	; 255
 9de:	2c 96       	adiw	r28, 0x0c	; 12
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	f8 94       	cli
 9e4:	de bf       	out	0x3e, r29	; 62
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	cd bf       	out	0x3d, r28	; 61
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	1f 91       	pop	r17
 9f0:	0f 91       	pop	r16
 9f2:	ff 90       	pop	r15
 9f4:	ef 90       	pop	r14
 9f6:	df 90       	pop	r13
 9f8:	cf 90       	pop	r12
 9fa:	bf 90       	pop	r11
 9fc:	af 90       	pop	r10
 9fe:	9f 90       	pop	r9
 a00:	8f 90       	pop	r8
 a02:	7f 90       	pop	r7
 a04:	6f 90       	pop	r6
 a06:	5f 90       	pop	r5
 a08:	4f 90       	pop	r4
 a0a:	3f 90       	pop	r3
 a0c:	2f 90       	pop	r2
 a0e:	08 95       	ret

00000a10 <calloc>:
 a10:	0f 93       	push	r16
 a12:	1f 93       	push	r17
 a14:	cf 93       	push	r28
 a16:	df 93       	push	r29
 a18:	86 9f       	mul	r24, r22
 a1a:	80 01       	movw	r16, r0
 a1c:	87 9f       	mul	r24, r23
 a1e:	10 0d       	add	r17, r0
 a20:	96 9f       	mul	r25, r22
 a22:	10 0d       	add	r17, r0
 a24:	11 24       	eor	r1, r1
 a26:	c8 01       	movw	r24, r16
 a28:	0d d0       	rcall	.+26     	; 0xa44 <malloc>
 a2a:	ec 01       	movw	r28, r24
 a2c:	00 97       	sbiw	r24, 0x00	; 0
 a2e:	21 f0       	breq	.+8      	; 0xa38 <calloc+0x28>
 a30:	a8 01       	movw	r20, r16
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	3e d1       	rcall	.+636    	; 0xcb4 <memset>
 a38:	ce 01       	movw	r24, r28
 a3a:	df 91       	pop	r29
 a3c:	cf 91       	pop	r28
 a3e:	1f 91       	pop	r17
 a40:	0f 91       	pop	r16
 a42:	08 95       	ret

00000a44 <malloc>:
 a44:	cf 93       	push	r28
 a46:	df 93       	push	r29
 a48:	82 30       	cpi	r24, 0x02	; 2
 a4a:	91 05       	cpc	r25, r1
 a4c:	10 f4       	brcc	.+4      	; 0xa52 <malloc+0xe>
 a4e:	82 e0       	ldi	r24, 0x02	; 2
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	e0 91 93 01 	lds	r30, 0x0193
 a56:	f0 91 94 01 	lds	r31, 0x0194
 a5a:	20 e0       	ldi	r18, 0x00	; 0
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	c0 e0       	ldi	r28, 0x00	; 0
 a60:	d0 e0       	ldi	r29, 0x00	; 0
 a62:	30 97       	sbiw	r30, 0x00	; 0
 a64:	11 f1       	breq	.+68     	; 0xaaa <malloc+0x66>
 a66:	40 81       	ld	r20, Z
 a68:	51 81       	ldd	r21, Z+1	; 0x01
 a6a:	48 17       	cp	r20, r24
 a6c:	59 07       	cpc	r21, r25
 a6e:	c0 f0       	brcs	.+48     	; 0xaa0 <malloc+0x5c>
 a70:	48 17       	cp	r20, r24
 a72:	59 07       	cpc	r21, r25
 a74:	61 f4       	brne	.+24     	; 0xa8e <malloc+0x4a>
 a76:	82 81       	ldd	r24, Z+2	; 0x02
 a78:	93 81       	ldd	r25, Z+3	; 0x03
 a7a:	20 97       	sbiw	r28, 0x00	; 0
 a7c:	19 f0       	breq	.+6      	; 0xa84 <malloc+0x40>
 a7e:	9b 83       	std	Y+3, r25	; 0x03
 a80:	8a 83       	std	Y+2, r24	; 0x02
 a82:	2b c0       	rjmp	.+86     	; 0xada <malloc+0x96>
 a84:	90 93 94 01 	sts	0x0194, r25
 a88:	80 93 93 01 	sts	0x0193, r24
 a8c:	26 c0       	rjmp	.+76     	; 0xada <malloc+0x96>
 a8e:	21 15       	cp	r18, r1
 a90:	31 05       	cpc	r19, r1
 a92:	19 f0       	breq	.+6      	; 0xa9a <malloc+0x56>
 a94:	42 17       	cp	r20, r18
 a96:	53 07       	cpc	r21, r19
 a98:	18 f4       	brcc	.+6      	; 0xaa0 <malloc+0x5c>
 a9a:	9a 01       	movw	r18, r20
 a9c:	be 01       	movw	r22, r28
 a9e:	df 01       	movw	r26, r30
 aa0:	ef 01       	movw	r28, r30
 aa2:	02 80       	ldd	r0, Z+2	; 0x02
 aa4:	f3 81       	ldd	r31, Z+3	; 0x03
 aa6:	e0 2d       	mov	r30, r0
 aa8:	dc cf       	rjmp	.-72     	; 0xa62 <malloc+0x1e>
 aaa:	21 15       	cp	r18, r1
 aac:	31 05       	cpc	r19, r1
 aae:	09 f1       	breq	.+66     	; 0xaf2 <malloc+0xae>
 ab0:	28 1b       	sub	r18, r24
 ab2:	39 0b       	sbc	r19, r25
 ab4:	24 30       	cpi	r18, 0x04	; 4
 ab6:	31 05       	cpc	r19, r1
 ab8:	90 f4       	brcc	.+36     	; 0xade <malloc+0x9a>
 aba:	12 96       	adiw	r26, 0x02	; 2
 abc:	8d 91       	ld	r24, X+
 abe:	9c 91       	ld	r25, X
 ac0:	13 97       	sbiw	r26, 0x03	; 3
 ac2:	61 15       	cp	r22, r1
 ac4:	71 05       	cpc	r23, r1
 ac6:	21 f0       	breq	.+8      	; 0xad0 <malloc+0x8c>
 ac8:	fb 01       	movw	r30, r22
 aca:	93 83       	std	Z+3, r25	; 0x03
 acc:	82 83       	std	Z+2, r24	; 0x02
 ace:	04 c0       	rjmp	.+8      	; 0xad8 <malloc+0x94>
 ad0:	90 93 94 01 	sts	0x0194, r25
 ad4:	80 93 93 01 	sts	0x0193, r24
 ad8:	fd 01       	movw	r30, r26
 ada:	32 96       	adiw	r30, 0x02	; 2
 adc:	44 c0       	rjmp	.+136    	; 0xb66 <malloc+0x122>
 ade:	fd 01       	movw	r30, r26
 ae0:	e2 0f       	add	r30, r18
 ae2:	f3 1f       	adc	r31, r19
 ae4:	81 93       	st	Z+, r24
 ae6:	91 93       	st	Z+, r25
 ae8:	22 50       	subi	r18, 0x02	; 2
 aea:	31 09       	sbc	r19, r1
 aec:	2d 93       	st	X+, r18
 aee:	3c 93       	st	X, r19
 af0:	3a c0       	rjmp	.+116    	; 0xb66 <malloc+0x122>
 af2:	20 91 91 01 	lds	r18, 0x0191
 af6:	30 91 92 01 	lds	r19, 0x0192
 afa:	23 2b       	or	r18, r19
 afc:	41 f4       	brne	.+16     	; 0xb0e <malloc+0xca>
 afe:	20 91 02 01 	lds	r18, 0x0102
 b02:	30 91 03 01 	lds	r19, 0x0103
 b06:	30 93 92 01 	sts	0x0192, r19
 b0a:	20 93 91 01 	sts	0x0191, r18
 b0e:	20 91 00 01 	lds	r18, 0x0100
 b12:	30 91 01 01 	lds	r19, 0x0101
 b16:	21 15       	cp	r18, r1
 b18:	31 05       	cpc	r19, r1
 b1a:	41 f4       	brne	.+16     	; 0xb2c <malloc+0xe8>
 b1c:	2d b7       	in	r18, 0x3d	; 61
 b1e:	3e b7       	in	r19, 0x3e	; 62
 b20:	40 91 04 01 	lds	r20, 0x0104
 b24:	50 91 05 01 	lds	r21, 0x0105
 b28:	24 1b       	sub	r18, r20
 b2a:	35 0b       	sbc	r19, r21
 b2c:	e0 91 91 01 	lds	r30, 0x0191
 b30:	f0 91 92 01 	lds	r31, 0x0192
 b34:	e2 17       	cp	r30, r18
 b36:	f3 07       	cpc	r31, r19
 b38:	a0 f4       	brcc	.+40     	; 0xb62 <malloc+0x11e>
 b3a:	2e 1b       	sub	r18, r30
 b3c:	3f 0b       	sbc	r19, r31
 b3e:	28 17       	cp	r18, r24
 b40:	39 07       	cpc	r19, r25
 b42:	78 f0       	brcs	.+30     	; 0xb62 <malloc+0x11e>
 b44:	ac 01       	movw	r20, r24
 b46:	4e 5f       	subi	r20, 0xFE	; 254
 b48:	5f 4f       	sbci	r21, 0xFF	; 255
 b4a:	24 17       	cp	r18, r20
 b4c:	35 07       	cpc	r19, r21
 b4e:	48 f0       	brcs	.+18     	; 0xb62 <malloc+0x11e>
 b50:	4e 0f       	add	r20, r30
 b52:	5f 1f       	adc	r21, r31
 b54:	50 93 92 01 	sts	0x0192, r21
 b58:	40 93 91 01 	sts	0x0191, r20
 b5c:	81 93       	st	Z+, r24
 b5e:	91 93       	st	Z+, r25
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <malloc+0x122>
 b62:	e0 e0       	ldi	r30, 0x00	; 0
 b64:	f0 e0       	ldi	r31, 0x00	; 0
 b66:	cf 01       	movw	r24, r30
 b68:	df 91       	pop	r29
 b6a:	cf 91       	pop	r28
 b6c:	08 95       	ret

00000b6e <free>:
 b6e:	0f 93       	push	r16
 b70:	1f 93       	push	r17
 b72:	cf 93       	push	r28
 b74:	df 93       	push	r29
 b76:	00 97       	sbiw	r24, 0x00	; 0
 b78:	09 f4       	brne	.+2      	; 0xb7c <free+0xe>
 b7a:	8c c0       	rjmp	.+280    	; 0xc94 <free+0x126>
 b7c:	fc 01       	movw	r30, r24
 b7e:	32 97       	sbiw	r30, 0x02	; 2
 b80:	13 82       	std	Z+3, r1	; 0x03
 b82:	12 82       	std	Z+2, r1	; 0x02
 b84:	00 91 93 01 	lds	r16, 0x0193
 b88:	10 91 94 01 	lds	r17, 0x0194
 b8c:	01 15       	cp	r16, r1
 b8e:	11 05       	cpc	r17, r1
 b90:	81 f4       	brne	.+32     	; 0xbb2 <free+0x44>
 b92:	20 81       	ld	r18, Z
 b94:	31 81       	ldd	r19, Z+1	; 0x01
 b96:	82 0f       	add	r24, r18
 b98:	93 1f       	adc	r25, r19
 b9a:	20 91 91 01 	lds	r18, 0x0191
 b9e:	30 91 92 01 	lds	r19, 0x0192
 ba2:	28 17       	cp	r18, r24
 ba4:	39 07       	cpc	r19, r25
 ba6:	79 f5       	brne	.+94     	; 0xc06 <free+0x98>
 ba8:	f0 93 92 01 	sts	0x0192, r31
 bac:	e0 93 91 01 	sts	0x0191, r30
 bb0:	71 c0       	rjmp	.+226    	; 0xc94 <free+0x126>
 bb2:	d8 01       	movw	r26, r16
 bb4:	40 e0       	ldi	r20, 0x00	; 0
 bb6:	50 e0       	ldi	r21, 0x00	; 0
 bb8:	ae 17       	cp	r26, r30
 bba:	bf 07       	cpc	r27, r31
 bbc:	50 f4       	brcc	.+20     	; 0xbd2 <free+0x64>
 bbe:	12 96       	adiw	r26, 0x02	; 2
 bc0:	2d 91       	ld	r18, X+
 bc2:	3c 91       	ld	r19, X
 bc4:	13 97       	sbiw	r26, 0x03	; 3
 bc6:	ad 01       	movw	r20, r26
 bc8:	21 15       	cp	r18, r1
 bca:	31 05       	cpc	r19, r1
 bcc:	09 f1       	breq	.+66     	; 0xc10 <free+0xa2>
 bce:	d9 01       	movw	r26, r18
 bd0:	f3 cf       	rjmp	.-26     	; 0xbb8 <free+0x4a>
 bd2:	9d 01       	movw	r18, r26
 bd4:	da 01       	movw	r26, r20
 bd6:	33 83       	std	Z+3, r19	; 0x03
 bd8:	22 83       	std	Z+2, r18	; 0x02
 bda:	60 81       	ld	r22, Z
 bdc:	71 81       	ldd	r23, Z+1	; 0x01
 bde:	86 0f       	add	r24, r22
 be0:	97 1f       	adc	r25, r23
 be2:	82 17       	cp	r24, r18
 be4:	93 07       	cpc	r25, r19
 be6:	69 f4       	brne	.+26     	; 0xc02 <free+0x94>
 be8:	ec 01       	movw	r28, r24
 bea:	28 81       	ld	r18, Y
 bec:	39 81       	ldd	r19, Y+1	; 0x01
 bee:	26 0f       	add	r18, r22
 bf0:	37 1f       	adc	r19, r23
 bf2:	2e 5f       	subi	r18, 0xFE	; 254
 bf4:	3f 4f       	sbci	r19, 0xFF	; 255
 bf6:	31 83       	std	Z+1, r19	; 0x01
 bf8:	20 83       	st	Z, r18
 bfa:	8a 81       	ldd	r24, Y+2	; 0x02
 bfc:	9b 81       	ldd	r25, Y+3	; 0x03
 bfe:	93 83       	std	Z+3, r25	; 0x03
 c00:	82 83       	std	Z+2, r24	; 0x02
 c02:	45 2b       	or	r20, r21
 c04:	29 f4       	brne	.+10     	; 0xc10 <free+0xa2>
 c06:	f0 93 94 01 	sts	0x0194, r31
 c0a:	e0 93 93 01 	sts	0x0193, r30
 c0e:	42 c0       	rjmp	.+132    	; 0xc94 <free+0x126>
 c10:	13 96       	adiw	r26, 0x03	; 3
 c12:	fc 93       	st	X, r31
 c14:	ee 93       	st	-X, r30
 c16:	12 97       	sbiw	r26, 0x02	; 2
 c18:	ed 01       	movw	r28, r26
 c1a:	49 91       	ld	r20, Y+
 c1c:	59 91       	ld	r21, Y+
 c1e:	9e 01       	movw	r18, r28
 c20:	24 0f       	add	r18, r20
 c22:	35 1f       	adc	r19, r21
 c24:	e2 17       	cp	r30, r18
 c26:	f3 07       	cpc	r31, r19
 c28:	71 f4       	brne	.+28     	; 0xc46 <free+0xd8>
 c2a:	80 81       	ld	r24, Z
 c2c:	91 81       	ldd	r25, Z+1	; 0x01
 c2e:	84 0f       	add	r24, r20
 c30:	95 1f       	adc	r25, r21
 c32:	02 96       	adiw	r24, 0x02	; 2
 c34:	11 96       	adiw	r26, 0x01	; 1
 c36:	9c 93       	st	X, r25
 c38:	8e 93       	st	-X, r24
 c3a:	82 81       	ldd	r24, Z+2	; 0x02
 c3c:	93 81       	ldd	r25, Z+3	; 0x03
 c3e:	13 96       	adiw	r26, 0x03	; 3
 c40:	9c 93       	st	X, r25
 c42:	8e 93       	st	-X, r24
 c44:	12 97       	sbiw	r26, 0x02	; 2
 c46:	e0 e0       	ldi	r30, 0x00	; 0
 c48:	f0 e0       	ldi	r31, 0x00	; 0
 c4a:	d8 01       	movw	r26, r16
 c4c:	12 96       	adiw	r26, 0x02	; 2
 c4e:	8d 91       	ld	r24, X+
 c50:	9c 91       	ld	r25, X
 c52:	13 97       	sbiw	r26, 0x03	; 3
 c54:	00 97       	sbiw	r24, 0x00	; 0
 c56:	19 f0       	breq	.+6      	; 0xc5e <free+0xf0>
 c58:	f8 01       	movw	r30, r16
 c5a:	8c 01       	movw	r16, r24
 c5c:	f6 cf       	rjmp	.-20     	; 0xc4a <free+0xdc>
 c5e:	8d 91       	ld	r24, X+
 c60:	9c 91       	ld	r25, X
 c62:	98 01       	movw	r18, r16
 c64:	2e 5f       	subi	r18, 0xFE	; 254
 c66:	3f 4f       	sbci	r19, 0xFF	; 255
 c68:	82 0f       	add	r24, r18
 c6a:	93 1f       	adc	r25, r19
 c6c:	20 91 91 01 	lds	r18, 0x0191
 c70:	30 91 92 01 	lds	r19, 0x0192
 c74:	28 17       	cp	r18, r24
 c76:	39 07       	cpc	r19, r25
 c78:	69 f4       	brne	.+26     	; 0xc94 <free+0x126>
 c7a:	30 97       	sbiw	r30, 0x00	; 0
 c7c:	29 f4       	brne	.+10     	; 0xc88 <free+0x11a>
 c7e:	10 92 94 01 	sts	0x0194, r1
 c82:	10 92 93 01 	sts	0x0193, r1
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <free+0x11e>
 c88:	13 82       	std	Z+3, r1	; 0x03
 c8a:	12 82       	std	Z+2, r1	; 0x02
 c8c:	10 93 92 01 	sts	0x0192, r17
 c90:	00 93 91 01 	sts	0x0191, r16
 c94:	df 91       	pop	r29
 c96:	cf 91       	pop	r28
 c98:	1f 91       	pop	r17
 c9a:	0f 91       	pop	r16
 c9c:	08 95       	ret

00000c9e <strnlen_P>:
 c9e:	fc 01       	movw	r30, r24
 ca0:	05 90       	lpm	r0, Z+
 ca2:	61 50       	subi	r22, 0x01	; 1
 ca4:	70 40       	sbci	r23, 0x00	; 0
 ca6:	01 10       	cpse	r0, r1
 ca8:	d8 f7       	brcc	.-10     	; 0xca0 <strnlen_P+0x2>
 caa:	80 95       	com	r24
 cac:	90 95       	com	r25
 cae:	8e 0f       	add	r24, r30
 cb0:	9f 1f       	adc	r25, r31
 cb2:	08 95       	ret

00000cb4 <memset>:
 cb4:	dc 01       	movw	r26, r24
 cb6:	01 c0       	rjmp	.+2      	; 0xcba <memset+0x6>
 cb8:	6d 93       	st	X+, r22
 cba:	41 50       	subi	r20, 0x01	; 1
 cbc:	50 40       	sbci	r21, 0x00	; 0
 cbe:	e0 f7       	brcc	.-8      	; 0xcb8 <memset+0x4>
 cc0:	08 95       	ret

00000cc2 <strnlen>:
 cc2:	fc 01       	movw	r30, r24
 cc4:	61 50       	subi	r22, 0x01	; 1
 cc6:	70 40       	sbci	r23, 0x00	; 0
 cc8:	01 90       	ld	r0, Z+
 cca:	01 10       	cpse	r0, r1
 ccc:	d8 f7       	brcc	.-10     	; 0xcc4 <strnlen+0x2>
 cce:	80 95       	com	r24
 cd0:	90 95       	com	r25
 cd2:	8e 0f       	add	r24, r30
 cd4:	9f 1f       	adc	r25, r31
 cd6:	08 95       	ret

00000cd8 <fputc>:
 cd8:	0f 93       	push	r16
 cda:	1f 93       	push	r17
 cdc:	cf 93       	push	r28
 cde:	df 93       	push	r29
 ce0:	fb 01       	movw	r30, r22
 ce2:	23 81       	ldd	r18, Z+3	; 0x03
 ce4:	21 fd       	sbrc	r18, 1
 ce6:	03 c0       	rjmp	.+6      	; 0xcee <fputc+0x16>
 ce8:	8f ef       	ldi	r24, 0xFF	; 255
 cea:	9f ef       	ldi	r25, 0xFF	; 255
 cec:	28 c0       	rjmp	.+80     	; 0xd3e <fputc+0x66>
 cee:	22 ff       	sbrs	r18, 2
 cf0:	16 c0       	rjmp	.+44     	; 0xd1e <fputc+0x46>
 cf2:	46 81       	ldd	r20, Z+6	; 0x06
 cf4:	57 81       	ldd	r21, Z+7	; 0x07
 cf6:	24 81       	ldd	r18, Z+4	; 0x04
 cf8:	35 81       	ldd	r19, Z+5	; 0x05
 cfa:	42 17       	cp	r20, r18
 cfc:	53 07       	cpc	r21, r19
 cfe:	44 f4       	brge	.+16     	; 0xd10 <fputc+0x38>
 d00:	a0 81       	ld	r26, Z
 d02:	b1 81       	ldd	r27, Z+1	; 0x01
 d04:	9d 01       	movw	r18, r26
 d06:	2f 5f       	subi	r18, 0xFF	; 255
 d08:	3f 4f       	sbci	r19, 0xFF	; 255
 d0a:	31 83       	std	Z+1, r19	; 0x01
 d0c:	20 83       	st	Z, r18
 d0e:	8c 93       	st	X, r24
 d10:	26 81       	ldd	r18, Z+6	; 0x06
 d12:	37 81       	ldd	r19, Z+7	; 0x07
 d14:	2f 5f       	subi	r18, 0xFF	; 255
 d16:	3f 4f       	sbci	r19, 0xFF	; 255
 d18:	37 83       	std	Z+7, r19	; 0x07
 d1a:	26 83       	std	Z+6, r18	; 0x06
 d1c:	10 c0       	rjmp	.+32     	; 0xd3e <fputc+0x66>
 d1e:	eb 01       	movw	r28, r22
 d20:	09 2f       	mov	r16, r25
 d22:	18 2f       	mov	r17, r24
 d24:	00 84       	ldd	r0, Z+8	; 0x08
 d26:	f1 85       	ldd	r31, Z+9	; 0x09
 d28:	e0 2d       	mov	r30, r0
 d2a:	09 95       	icall
 d2c:	89 2b       	or	r24, r25
 d2e:	e1 f6       	brne	.-72     	; 0xce8 <fputc+0x10>
 d30:	8e 81       	ldd	r24, Y+6	; 0x06
 d32:	9f 81       	ldd	r25, Y+7	; 0x07
 d34:	01 96       	adiw	r24, 0x01	; 1
 d36:	9f 83       	std	Y+7, r25	; 0x07
 d38:	8e 83       	std	Y+6, r24	; 0x06
 d3a:	81 2f       	mov	r24, r17
 d3c:	90 2f       	mov	r25, r16
 d3e:	df 91       	pop	r29
 d40:	cf 91       	pop	r28
 d42:	1f 91       	pop	r17
 d44:	0f 91       	pop	r16
 d46:	08 95       	ret

00000d48 <__ultoa_invert>:
 d48:	fa 01       	movw	r30, r20
 d4a:	aa 27       	eor	r26, r26
 d4c:	28 30       	cpi	r18, 0x08	; 8
 d4e:	51 f1       	breq	.+84     	; 0xda4 <__ultoa_invert+0x5c>
 d50:	20 31       	cpi	r18, 0x10	; 16
 d52:	81 f1       	breq	.+96     	; 0xdb4 <__ultoa_invert+0x6c>
 d54:	e8 94       	clt
 d56:	6f 93       	push	r22
 d58:	6e 7f       	andi	r22, 0xFE	; 254
 d5a:	6e 5f       	subi	r22, 0xFE	; 254
 d5c:	7f 4f       	sbci	r23, 0xFF	; 255
 d5e:	8f 4f       	sbci	r24, 0xFF	; 255
 d60:	9f 4f       	sbci	r25, 0xFF	; 255
 d62:	af 4f       	sbci	r26, 0xFF	; 255
 d64:	b1 e0       	ldi	r27, 0x01	; 1
 d66:	3e d0       	rcall	.+124    	; 0xde4 <__ultoa_invert+0x9c>
 d68:	b4 e0       	ldi	r27, 0x04	; 4
 d6a:	3c d0       	rcall	.+120    	; 0xde4 <__ultoa_invert+0x9c>
 d6c:	67 0f       	add	r22, r23
 d6e:	78 1f       	adc	r23, r24
 d70:	89 1f       	adc	r24, r25
 d72:	9a 1f       	adc	r25, r26
 d74:	a1 1d       	adc	r26, r1
 d76:	68 0f       	add	r22, r24
 d78:	79 1f       	adc	r23, r25
 d7a:	8a 1f       	adc	r24, r26
 d7c:	91 1d       	adc	r25, r1
 d7e:	a1 1d       	adc	r26, r1
 d80:	6a 0f       	add	r22, r26
 d82:	71 1d       	adc	r23, r1
 d84:	81 1d       	adc	r24, r1
 d86:	91 1d       	adc	r25, r1
 d88:	a1 1d       	adc	r26, r1
 d8a:	20 d0       	rcall	.+64     	; 0xdcc <__ultoa_invert+0x84>
 d8c:	09 f4       	brne	.+2      	; 0xd90 <__ultoa_invert+0x48>
 d8e:	68 94       	set
 d90:	3f 91       	pop	r19
 d92:	2a e0       	ldi	r18, 0x0A	; 10
 d94:	26 9f       	mul	r18, r22
 d96:	11 24       	eor	r1, r1
 d98:	30 19       	sub	r19, r0
 d9a:	30 5d       	subi	r19, 0xD0	; 208
 d9c:	31 93       	st	Z+, r19
 d9e:	de f6       	brtc	.-74     	; 0xd56 <__ultoa_invert+0xe>
 da0:	cf 01       	movw	r24, r30
 da2:	08 95       	ret
 da4:	46 2f       	mov	r20, r22
 da6:	47 70       	andi	r20, 0x07	; 7
 da8:	40 5d       	subi	r20, 0xD0	; 208
 daa:	41 93       	st	Z+, r20
 dac:	b3 e0       	ldi	r27, 0x03	; 3
 dae:	0f d0       	rcall	.+30     	; 0xdce <__ultoa_invert+0x86>
 db0:	c9 f7       	brne	.-14     	; 0xda4 <__ultoa_invert+0x5c>
 db2:	f6 cf       	rjmp	.-20     	; 0xda0 <__ultoa_invert+0x58>
 db4:	46 2f       	mov	r20, r22
 db6:	4f 70       	andi	r20, 0x0F	; 15
 db8:	40 5d       	subi	r20, 0xD0	; 208
 dba:	4a 33       	cpi	r20, 0x3A	; 58
 dbc:	18 f0       	brcs	.+6      	; 0xdc4 <__ultoa_invert+0x7c>
 dbe:	49 5d       	subi	r20, 0xD9	; 217
 dc0:	31 fd       	sbrc	r19, 1
 dc2:	40 52       	subi	r20, 0x20	; 32
 dc4:	41 93       	st	Z+, r20
 dc6:	02 d0       	rcall	.+4      	; 0xdcc <__ultoa_invert+0x84>
 dc8:	a9 f7       	brne	.-22     	; 0xdb4 <__ultoa_invert+0x6c>
 dca:	ea cf       	rjmp	.-44     	; 0xda0 <__ultoa_invert+0x58>
 dcc:	b4 e0       	ldi	r27, 0x04	; 4
 dce:	a6 95       	lsr	r26
 dd0:	97 95       	ror	r25
 dd2:	87 95       	ror	r24
 dd4:	77 95       	ror	r23
 dd6:	67 95       	ror	r22
 dd8:	ba 95       	dec	r27
 dda:	c9 f7       	brne	.-14     	; 0xdce <__ultoa_invert+0x86>
 ddc:	00 97       	sbiw	r24, 0x00	; 0
 dde:	61 05       	cpc	r22, r1
 de0:	71 05       	cpc	r23, r1
 de2:	08 95       	ret
 de4:	9b 01       	movw	r18, r22
 de6:	ac 01       	movw	r20, r24
 de8:	0a 2e       	mov	r0, r26
 dea:	06 94       	lsr	r0
 dec:	57 95       	ror	r21
 dee:	47 95       	ror	r20
 df0:	37 95       	ror	r19
 df2:	27 95       	ror	r18
 df4:	ba 95       	dec	r27
 df6:	c9 f7       	brne	.-14     	; 0xdea <__ultoa_invert+0xa2>
 df8:	62 0f       	add	r22, r18
 dfa:	73 1f       	adc	r23, r19
 dfc:	84 1f       	adc	r24, r20
 dfe:	95 1f       	adc	r25, r21
 e00:	a0 1d       	adc	r26, r0
 e02:	08 95       	ret

00000e04 <_exit>:
 e04:	f8 94       	cli

00000e06 <__stop_program>:
 e06:	ff cf       	rjmp	.-2      	; 0xe06 <__stop_program>
