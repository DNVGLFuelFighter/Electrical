
DNVGLFF_UV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00000d36  00000dca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800164  00800164  00000e2e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000880  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004c1  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000683  00000000  00000000  00001cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a3  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e7  00000000  00000000  00002833  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000301a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	c5 c1       	rjmp	.+906    	; 0x3e0 <__vector_21>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 e3       	ldi	r30, 0x36	; 54
  a8:	fd e0       	ldi	r31, 0x0D	; 13
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a4 36       	cpi	r26, 0x64	; 100
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a4 e6       	ldi	r26, 0x64	; 100
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a7 39       	cpi	r26, 0x97	; 151
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	76 d1       	rcall	.+748    	; 0x3b8 <main>
  cc:	32 c6       	rjmp	.+3172   	; 0xd32 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <__vector_18>:
        CANIDT4 = 1<<RTRTAG;
		CANCDMOB|=packet->length;
		}
    CANCDMOB|=0x40; //enable TX
	return TRUE;
	}
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	cf 93       	push	r28
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
  f8:	ed ee       	ldi	r30, 0xED	; 237
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	c0 81       	ld	r28, Z
  fe:	80 91 ec 00 	lds	r24, 0x00EC
 102:	68 2f       	mov	r22, r24
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	80 83       	st	Z, r24
 10a:	72 95       	swap	r23
 10c:	62 95       	swap	r22
 10e:	6f 70       	andi	r22, 0x0F	; 15
 110:	67 27       	eor	r22, r23
 112:	7f 70       	andi	r23, 0x0F	; 15
 114:	67 27       	eor	r22, r23
 116:	80 91 ee 00 	lds	r24, 0x00EE
 11a:	8f 75       	andi	r24, 0x5F	; 95
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_18+0x50>
 11e:	98 95       	break
 120:	20 91 f2 00 	lds	r18, 0x00F2
 124:	80 91 f3 00 	lds	r24, 0x00F3
 128:	e4 e6       	ldi	r30, 0x64	; 100
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	22 95       	swap	r18
 13c:	26 95       	lsr	r18
 13e:	27 70       	andi	r18, 0x07	; 7
 140:	82 2b       	or	r24, r18
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
 146:	80 91 ef 00 	lds	r24, 0x00EF
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	59 f0       	breq	.+22     	; 0x16a <__vector_18+0x9a>
 154:	e7 e6       	ldi	r30, 0x67	; 103
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	89 59       	subi	r24, 0x99	; 153
 15a:	9e 4f       	sbci	r25, 0xFE	; 254
 15c:	aa ef       	ldi	r26, 0xFA	; 250
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	2c 91       	ld	r18, X
 162:	21 93       	st	Z+, r18
 164:	e8 17       	cp	r30, r24
 166:	f9 07       	cpc	r31, r25
 168:	d9 f7       	brne	.-10     	; 0x160 <__vector_18+0x90>
 16a:	10 92 ee 00 	sts	0x00EE, r1
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 ef 00 	sts	0x00EF, r24
 174:	fb 01       	movw	r30, r22
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e1 59       	subi	r30, 0x91	; 145
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	01 90       	ld	r0, Z+
 180:	f0 81       	ld	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	84 e6       	ldi	r24, 0x64	; 100
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	09 95       	icall
 18a:	c0 93 ed 00 	sts	0x00ED, r28
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <prepare_rx>:

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
 1b6:	8f 30       	cpi	r24, 0x0F	; 15
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <prepare_rx+0x6>
 1ba:	6d c0       	rjmp	.+218    	; 0x296 <prepare_rx+0xe0>
		return TRUE;
	canlist[ (unsigned)mob]=callback;
 1bc:	e8 2f       	mov	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e1 59       	subi	r30, 0x91	; 145
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	31 83       	std	Z+1, r19	; 0x01
 1ca:	20 83       	st	Z, r18
    CANPAGE = mob << 4;
 1cc:	98 2f       	mov	r25, r24
 1ce:	92 95       	swap	r25
 1d0:	90 7f       	andi	r25, 0xF0	; 240
 1d2:	90 93 ed 00 	sts	0x00ED, r25
	if( callback==0)			// release this MOB 
 1d6:	23 2b       	or	r18, r19
 1d8:	d9 f4       	brne	.+54     	; 0x210 <prepare_rx+0x5a>
		{
		CANSTMOB = 0x00;    	// cancel pending operation
 1da:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0x00;
 1de:	10 92 ef 00 	sts	0x00EF, r1
		unsigned mask=1<<mob;
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	a9 01       	movw	r20, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <prepare_rx+0x38>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <prepare_rx+0x34>
 1f2:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
 1f4:	ee ed       	ldi	r30, 0xDE	; 222
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	20 81       	ld	r18, Z
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
 200:	ef ed       	ldi	r30, 0xDF	; 223
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	90 95       	com	r25
 208:	89 23       	and	r24, r25
 20a:	80 83       	st	Z, r24
		return FALSE;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
 210:	90 91 ef 00 	lds	r25, 0x00EF
 214:	90 7c       	andi	r25, 0xC0	; 192
 216:	09 f0       	breq	.+2      	; 0x21a <prepare_rx+0x64>
 218:	40 c0       	rjmp	.+128    	; 0x29a <prepare_rx+0xe4>
		return TRUE;			// no vacancy ...
	CANSTMOB = 0x00;    	// cancel pending operation 
 21a:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;		
 21e:	ef ee       	ldi	r30, 0xEF	; 239
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	10 82       	st	Z, r1
	CANHPMOB = 0x00;		// enable direct mob indexing, see doc
 224:	10 92 ec 00 	sts	0x00EC, r1
	CANIDT1=id >>3;
 228:	9b 01       	movw	r18, r22
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	36 95       	lsr	r19
 234:	27 95       	ror	r18
 236:	20 93 f3 00 	sts	0x00F3, r18
	CANIDT2=id <<5;
 23a:	62 95       	swap	r22
 23c:	66 0f       	add	r22, r22
 23e:	60 7e       	andi	r22, 0xE0	; 224
 240:	60 93 f2 00 	sts	0x00F2, r22
	CANIDM1=idmask >>3;
 244:	9a 01       	movw	r18, r20
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	20 93 f7 00 	sts	0x00F7, r18
	CANIDM2=idmask <<5;
 256:	42 95       	swap	r20
 258:	44 0f       	add	r20, r20
 25a:	40 7e       	andi	r20, 0xE0	; 224
 25c:	40 93 f6 00 	sts	0x00F6, r20
	CANIDM3=0;
 260:	10 92 f5 00 	sts	0x00F5, r1
	CANIDM4=0;
 264:	10 92 f4 00 	sts	0x00F4, r1
	CANCDMOB=0x80; // enable RX
 268:	90 e8       	ldi	r25, 0x80	; 128
 26a:	90 83       	st	Z, r25
	unsigned mask=1<<mob;
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	a9 01       	movw	r20, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <prepare_rx+0xc2>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <prepare_rx+0xbe>
 27c:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
 27e:	ee ed       	ldi	r30, 0xDE	; 222
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	20 81       	ld	r18, Z
 284:	82 2b       	or	r24, r18
 286:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
 288:	ef ed       	ldi	r30, 0xDF	; 223
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	89 2b       	or	r24, r25
 290:	80 83       	st	Z, r24
	return FALSE;
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
	}

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
		return TRUE;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return FALSE;
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
		return TRUE;			// no vacancy ...
 29a:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return FALSE;
	}
 29c:	08 95       	ret

0000029e <can_init>:

void can_init( void)
	{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	unsigned mob;
//! \bug different baud rate support not implemented yet 
#if F_CPU == 8000000
	//Old implementation
	CANBT1=0x06;	// 8MHz, 100kbit/s
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2=0x0c;
 2a8:	8c e0       	ldi	r24, 0x0C	; 12
 2aa:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3=0x5a;
 2ae:	8a e5       	ldi	r24, 0x5A	; 90
 2b0:	80 93 e4 00 	sts	0x00E4, r24
 2b4:	80 e0       	ldi	r24, 0x00	; 0
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2b6:	cd ee       	ldi	r28, 0xED	; 237
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
 2ba:	ae ee       	ldi	r26, 0xEE	; 238
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
 2be:	ef ee       	ldi	r30, 0xEF	; 239
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2c2:	98 2f       	mov	r25, r24
 2c4:	92 95       	swap	r25
 2c6:	90 7f       	andi	r25, 0xF0	; 240
 2c8:	98 83       	st	Y, r25
		CANSTMOB = 0;
 2ca:	1c 92       	st	X, r1
		CANCDMOB = 0;
 2cc:	10 82       	st	Z, r1
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
#else
	CANBT1=0x26;	// 16 MHz, 100kbit/s
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
 2d0:	8f 30       	cpi	r24, 0x0F	; 15
 2d2:	b9 f7       	brne	.-18     	; 0x2c2 <can_init+0x24>
		{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
		}
	CANGCON |= 0x02;
 2d4:	e8 ed       	ldi	r30, 0xD8	; 216
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX);
 2de:	80 ea       	ldi	r24, 0xA0	; 160
 2e0:	80 93 db 00 	sts	0x00DB, r24
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <CAN_messageRX>:
#include <util/delay.h>
#include <stdio.h>

#include "LED.h"

void CAN_messageRX(CAN_packet *p, unsigned char mob) {		
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	6c 01       	movw	r12, r24
	//USART_tx_string("\n\rMessage received!");
	toggle_bit(DDRB, PB6);
 2fc:	94 b1       	in	r25, 0x04	; 4
 2fe:	80 e4       	ldi	r24, 0x40	; 64
 300:	89 27       	eor	r24, r25
 302:	84 b9       	out	0x04, r24	; 4
// 	}
	/***********************************************************
	Printing fuction for the throttle input
	***********************************************************/
	/*if (p->id == 13) {*/
		printf("\r\nMessage ID - %d", p->id);
 304:	f6 01       	movw	r30, r12
 306:	81 81       	ldd	r24, Z+1	; 0x01
 308:	8f 93       	push	r24
 30a:	80 81       	ld	r24, Z
 30c:	8f 93       	push	r24
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	9f 93       	push	r25
 314:	8f 93       	push	r24
 316:	0d d1       	rcall	.+538    	; 0x532 <printf>
		printf("\r\nMessage length - %d", p->length);
 318:	f6 01       	movw	r30, r12
 31a:	82 81       	ldd	r24, Z+2	; 0x02
 31c:	1f 92       	push	r1
 31e:	8f 93       	push	r24
 320:	88 e1       	ldi	r24, 0x18	; 24
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	9f 93       	push	r25
 326:	8f 93       	push	r24
 328:	04 d1       	rcall	.+520    	; 0x532 <printf>
		for(int i = 0; i < p->length; i++) {
 32a:	f6 01       	movw	r30, r12
 32c:	82 81       	ldd	r24, Z+2	; 0x02
 32e:	2d b7       	in	r18, 0x3d	; 61
 330:	3e b7       	in	r19, 0x3e	; 62
 332:	28 5f       	subi	r18, 0xF8	; 248
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	3e bf       	out	0x3e, r19	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	2d bf       	out	0x3d, r18	; 61
 340:	88 23       	and	r24, r24
 342:	f9 f0       	breq	.+62     	; 0x382 <CAN_messageRX+0x98>
 344:	76 01       	movw	r14, r12
 346:	33 e0       	ldi	r19, 0x03	; 3
 348:	e3 0e       	add	r14, r19
 34a:	f1 1c       	adc	r15, r1
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	d0 e0       	ldi	r29, 0x00	; 0
			
			printf("\r\nData[%d] received - %u", i, p->data[i]);
 350:	0e e2       	ldi	r16, 0x2E	; 46
 352:	11 e0       	ldi	r17, 0x01	; 1
 354:	f7 01       	movw	r30, r14
 356:	81 91       	ld	r24, Z+
 358:	7f 01       	movw	r14, r30
 35a:	1f 92       	push	r1
 35c:	8f 93       	push	r24
 35e:	df 93       	push	r29
 360:	cf 93       	push	r28
 362:	1f 93       	push	r17
 364:	0f 93       	push	r16
 366:	e5 d0       	rcall	.+458    	; 0x532 <printf>
	Printing fuction for the throttle input
	***********************************************************/
	/*if (p->id == 13) {*/
		printf("\r\nMessage ID - %d", p->id);
		printf("\r\nMessage length - %d", p->length);
		for(int i = 0; i < p->length; i++) {
 368:	21 96       	adiw	r28, 0x01	; 1
 36a:	f6 01       	movw	r30, r12
 36c:	22 81       	ldd	r18, Z+2	; 0x02
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	c2 17       	cp	r28, r18
 37e:	d3 07       	cpc	r29, r19
 380:	4c f3       	brlt	.-46     	; 0x354 <CAN_messageRX+0x6a>
			
			printf("\r\nData[%d] received - %u", i, p->data[i]);
		}
		printf("\n");
 382:	8a e0       	ldi	r24, 0x0A	; 10
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	e8 d0       	rcall	.+464    	; 0x558 <putchar>
	/*}*/
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	08 95       	ret

0000039a <inits>:

void inits(void) {
	can_init();
 39a:	81 df       	rcall	.-254    	; 0x29e <can_init>
	USART_init(MYUBRR, true);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	83 e3       	ldi	r24, 0x33	; 51
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	61 d0       	rcall	.+194    	; 0x466 <USART_init>
	printf("\r\nReceiver initialized");
 3a4:	87 e4       	ldi	r24, 0x47	; 71
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	9f 93       	push	r25
 3aa:	8f 93       	push	r24
 3ac:	c2 d0       	rcall	.+388    	; 0x532 <printf>
	set_bit(DDRB, PB6);
 3ae:	26 9a       	sbi	0x04, 6	; 4
	clear_bit(PORTB, PB6);
 3b0:	2e 98       	cbi	0x05, 6	; 5
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	08 95       	ret

000003b8 <main>:
}

int main(void) {
	inits();
 3b8:	f0 df       	rcall	.-32     	; 0x39a <inits>

	DDRB |= (1<<DDB5);
 3ba:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= (1<<PB5);
 3bc:	2d 9a       	sbi	0x05, 5	; 5
	
	BOOL ret;	
	ret = prepare_rx(0, 20, 0, CAN_messageRX);
 3be:	25 e7       	ldi	r18, 0x75	; 117
 3c0:	31 e0       	ldi	r19, 0x01	; 1
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	64 e1       	ldi	r22, 0x14	; 20
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	f4 de       	rcall	.-536    	; 0x1b6 <prepare_rx>

	sei();
 3ce:	78 94       	sei
	message.length = 1;
	message.data[0] = 0b000000;	// For message structure see front light module documentation
	
	while (true) {
		if(ret) {
			toggle_bit(DDRB, PB6);
 3d0:	20 e4       	ldi	r18, 0x40	; 64
	message.id = ID_lightsFront;
	message.length = 1;
	message.data[0] = 0b000000;	// For message structure see front light module documentation
	
	while (true) {
		if(ret) {
 3d2:	81 11       	cpse	r24, r1
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <main+0x20>
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <main+0x1e>
			toggle_bit(DDRB, PB6);
 3d8:	94 b1       	in	r25, 0x04	; 4
 3da:	92 27       	eor	r25, r18
 3dc:	94 b9       	out	0x04, r25	; 4
 3de:	f9 cf       	rjmp	.-14     	; 0x3d2 <main+0x1a>

000003e0 <__vector_21>:
// 			clear_bit(DDRB, PB6);
// 		}
    }
}

ISR(USART0_RX_vect) {
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	0b b6       	in	r0, 0x3b	; 59
 3ec:	0f 92       	push	r0
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	6f 93       	push	r22
 3f8:	7f 93       	push	r23
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
 402:	ef 93       	push	r30
 404:	ff 93       	push	r31
	unsigned char c = USART_rx();
 406:	27 d0       	rcall	.+78     	; 0x456 <USART_rx>
	printf("\r\n%c", c);
 408:	1f 92       	push	r1
 40a:	8f 93       	push	r24
 40c:	8e e5       	ldi	r24, 0x5E	; 94
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	9f 93       	push	r25
 412:	8f 93       	push	r24
 414:	8e d0       	rcall	.+284    	; 0x532 <printf>
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
}
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0b be       	out	0x3b, r0	; 59
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 444:	e0 ec       	ldi	r30, 0xC0	; 192
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	90 81       	ld	r25, Z
 44a:	95 ff       	sbrs	r25, 5
 44c:	fd cf       	rjmp	.-6      	; 0x448 <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 44e:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	08 95       	ret

00000456 <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 456:	e0 ec       	ldi	r30, 0xC0	; 192
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	88 23       	and	r24, r24
 45e:	ec f7       	brge	.-6      	; 0x45a <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 460:	80 91 c6 00 	lds	r24, 0x00C6
}
 464:	08 95       	ret

00000466 <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 466:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 46a:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 46e:	86 e0       	ldi	r24, 0x06	; 6
 470:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 474:	66 23       	and	r22, r22
 476:	41 f0       	breq	.+16     	; 0x488 <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 478:	e1 ec       	ldi	r30, 0xC1	; 193
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	80 61       	ori	r24, 0x10	; 16
 480:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 482:	80 81       	ld	r24, Z
 484:	88 60       	ori	r24, 0x08	; 8
 486:	80 83       	st	Z, r24
	}
	set_bit(UCSR0B, RXCIE0);
 488:	e1 ec       	ldi	r30, 0xC1	; 193
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	80 68       	ori	r24, 0x80	; 128
 490:	80 83       	st	Z, r24
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 492:	6b e2       	ldi	r22, 0x2B	; 43
 494:	72 e0       	ldi	r23, 0x02	; 2
 496:	82 e2       	ldi	r24, 0x22	; 34
 498:	92 e0       	ldi	r25, 0x02	; 2
 49a:	01 c0       	rjmp	.+2      	; 0x49e <fdevopen>
 49c:	08 95       	ret

0000049e <fdevopen>:
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	00 97       	sbiw	r24, 0x00	; 0
 4a8:	31 f4       	brne	.+12     	; 0x4b6 <fdevopen+0x18>
 4aa:	61 15       	cp	r22, r1
 4ac:	71 05       	cpc	r23, r1
 4ae:	19 f4       	brne	.+6      	; 0x4b6 <fdevopen+0x18>
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	39 c0       	rjmp	.+114    	; 0x528 <fdevopen+0x8a>
 4b6:	8b 01       	movw	r16, r22
 4b8:	ec 01       	movw	r28, r24
 4ba:	6e e0       	ldi	r22, 0x0E	; 14
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	3d d2       	rcall	.+1146   	; 0x93e <calloc>
 4c4:	fc 01       	movw	r30, r24
 4c6:	89 2b       	or	r24, r25
 4c8:	99 f3       	breq	.-26     	; 0x4b0 <fdevopen+0x12>
 4ca:	80 e8       	ldi	r24, 0x80	; 128
 4cc:	83 83       	std	Z+3, r24	; 0x03
 4ce:	01 15       	cp	r16, r1
 4d0:	11 05       	cpc	r17, r1
 4d2:	71 f0       	breq	.+28     	; 0x4f0 <fdevopen+0x52>
 4d4:	13 87       	std	Z+11, r17	; 0x0b
 4d6:	02 87       	std	Z+10, r16	; 0x0a
 4d8:	81 e8       	ldi	r24, 0x81	; 129
 4da:	83 83       	std	Z+3, r24	; 0x03
 4dc:	80 91 8d 01 	lds	r24, 0x018D
 4e0:	90 91 8e 01 	lds	r25, 0x018E
 4e4:	89 2b       	or	r24, r25
 4e6:	21 f4       	brne	.+8      	; 0x4f0 <fdevopen+0x52>
 4e8:	f0 93 8e 01 	sts	0x018E, r31
 4ec:	e0 93 8d 01 	sts	0x018D, r30
 4f0:	20 97       	sbiw	r28, 0x00	; 0
 4f2:	c9 f0       	breq	.+50     	; 0x526 <fdevopen+0x88>
 4f4:	d1 87       	std	Z+9, r29	; 0x09
 4f6:	c0 87       	std	Z+8, r28	; 0x08
 4f8:	83 81       	ldd	r24, Z+3	; 0x03
 4fa:	82 60       	ori	r24, 0x02	; 2
 4fc:	83 83       	std	Z+3, r24	; 0x03
 4fe:	80 91 8f 01 	lds	r24, 0x018F
 502:	90 91 90 01 	lds	r25, 0x0190
 506:	89 2b       	or	r24, r25
 508:	71 f4       	brne	.+28     	; 0x526 <fdevopen+0x88>
 50a:	f0 93 90 01 	sts	0x0190, r31
 50e:	e0 93 8f 01 	sts	0x018F, r30
 512:	80 91 91 01 	lds	r24, 0x0191
 516:	90 91 92 01 	lds	r25, 0x0192
 51a:	89 2b       	or	r24, r25
 51c:	21 f4       	brne	.+8      	; 0x526 <fdevopen+0x88>
 51e:	f0 93 92 01 	sts	0x0192, r31
 522:	e0 93 91 01 	sts	0x0191, r30
 526:	cf 01       	movw	r24, r30
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	1f 91       	pop	r17
 52e:	0f 91       	pop	r16
 530:	08 95       	ret

00000532 <printf>:
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	ae 01       	movw	r20, r28
 53c:	4b 5f       	subi	r20, 0xFB	; 251
 53e:	5f 4f       	sbci	r21, 0xFF	; 255
 540:	fa 01       	movw	r30, r20
 542:	61 91       	ld	r22, Z+
 544:	71 91       	ld	r23, Z+
 546:	af 01       	movw	r20, r30
 548:	80 91 8f 01 	lds	r24, 0x018F
 54c:	90 91 90 01 	lds	r25, 0x0190
 550:	08 d0       	rcall	.+16     	; 0x562 <vfprintf>
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <putchar>:
 558:	60 91 8f 01 	lds	r22, 0x018F
 55c:	70 91 90 01 	lds	r23, 0x0190
 560:	52 c3       	rjmp	.+1700   	; 0xc06 <fputc>

00000562 <vfprintf>:
 562:	2f 92       	push	r2
 564:	3f 92       	push	r3
 566:	4f 92       	push	r4
 568:	5f 92       	push	r5
 56a:	6f 92       	push	r6
 56c:	7f 92       	push	r7
 56e:	8f 92       	push	r8
 570:	9f 92       	push	r9
 572:	af 92       	push	r10
 574:	bf 92       	push	r11
 576:	cf 92       	push	r12
 578:	df 92       	push	r13
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	2c 97       	sbiw	r28, 0x0c	; 12
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	f8 94       	cli
 590:	de bf       	out	0x3e, r29	; 62
 592:	0f be       	out	0x3f, r0	; 63
 594:	cd bf       	out	0x3d, r28	; 61
 596:	7c 01       	movw	r14, r24
 598:	6b 01       	movw	r12, r22
 59a:	8a 01       	movw	r16, r20
 59c:	fc 01       	movw	r30, r24
 59e:	17 82       	std	Z+7, r1	; 0x07
 5a0:	16 82       	std	Z+6, r1	; 0x06
 5a2:	83 81       	ldd	r24, Z+3	; 0x03
 5a4:	81 ff       	sbrs	r24, 1
 5a6:	b0 c1       	rjmp	.+864    	; 0x908 <vfprintf+0x3a6>
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	4c 01       	movw	r8, r24
 5ae:	f7 01       	movw	r30, r14
 5b0:	93 81       	ldd	r25, Z+3	; 0x03
 5b2:	f6 01       	movw	r30, r12
 5b4:	93 fd       	sbrc	r25, 3
 5b6:	85 91       	lpm	r24, Z+
 5b8:	93 ff       	sbrs	r25, 3
 5ba:	81 91       	ld	r24, Z+
 5bc:	6f 01       	movw	r12, r30
 5be:	88 23       	and	r24, r24
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <vfprintf+0x62>
 5c2:	9e c1       	rjmp	.+828    	; 0x900 <vfprintf+0x39e>
 5c4:	85 32       	cpi	r24, 0x25	; 37
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <vfprintf+0x74>
 5c8:	93 fd       	sbrc	r25, 3
 5ca:	85 91       	lpm	r24, Z+
 5cc:	93 ff       	sbrs	r25, 3
 5ce:	81 91       	ld	r24, Z+
 5d0:	6f 01       	movw	r12, r30
 5d2:	85 32       	cpi	r24, 0x25	; 37
 5d4:	21 f4       	brne	.+8      	; 0x5de <vfprintf+0x7c>
 5d6:	b7 01       	movw	r22, r14
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	15 d3       	rcall	.+1578   	; 0xc06 <fputc>
 5dc:	e8 cf       	rjmp	.-48     	; 0x5ae <vfprintf+0x4c>
 5de:	51 2c       	mov	r5, r1
 5e0:	31 2c       	mov	r3, r1
 5e2:	20 e0       	ldi	r18, 0x00	; 0
 5e4:	20 32       	cpi	r18, 0x20	; 32
 5e6:	a0 f4       	brcc	.+40     	; 0x610 <vfprintf+0xae>
 5e8:	8b 32       	cpi	r24, 0x2B	; 43
 5ea:	69 f0       	breq	.+26     	; 0x606 <vfprintf+0xa4>
 5ec:	30 f4       	brcc	.+12     	; 0x5fa <vfprintf+0x98>
 5ee:	80 32       	cpi	r24, 0x20	; 32
 5f0:	59 f0       	breq	.+22     	; 0x608 <vfprintf+0xa6>
 5f2:	83 32       	cpi	r24, 0x23	; 35
 5f4:	69 f4       	brne	.+26     	; 0x610 <vfprintf+0xae>
 5f6:	20 61       	ori	r18, 0x10	; 16
 5f8:	2c c0       	rjmp	.+88     	; 0x652 <vfprintf+0xf0>
 5fa:	8d 32       	cpi	r24, 0x2D	; 45
 5fc:	39 f0       	breq	.+14     	; 0x60c <vfprintf+0xaa>
 5fe:	80 33       	cpi	r24, 0x30	; 48
 600:	39 f4       	brne	.+14     	; 0x610 <vfprintf+0xae>
 602:	21 60       	ori	r18, 0x01	; 1
 604:	26 c0       	rjmp	.+76     	; 0x652 <vfprintf+0xf0>
 606:	22 60       	ori	r18, 0x02	; 2
 608:	24 60       	ori	r18, 0x04	; 4
 60a:	23 c0       	rjmp	.+70     	; 0x652 <vfprintf+0xf0>
 60c:	28 60       	ori	r18, 0x08	; 8
 60e:	21 c0       	rjmp	.+66     	; 0x652 <vfprintf+0xf0>
 610:	27 fd       	sbrc	r18, 7
 612:	27 c0       	rjmp	.+78     	; 0x662 <vfprintf+0x100>
 614:	30 ed       	ldi	r19, 0xD0	; 208
 616:	38 0f       	add	r19, r24
 618:	3a 30       	cpi	r19, 0x0A	; 10
 61a:	78 f4       	brcc	.+30     	; 0x63a <vfprintf+0xd8>
 61c:	26 ff       	sbrs	r18, 6
 61e:	06 c0       	rjmp	.+12     	; 0x62c <vfprintf+0xca>
 620:	fa e0       	ldi	r31, 0x0A	; 10
 622:	5f 9e       	mul	r5, r31
 624:	30 0d       	add	r19, r0
 626:	11 24       	eor	r1, r1
 628:	53 2e       	mov	r5, r19
 62a:	13 c0       	rjmp	.+38     	; 0x652 <vfprintf+0xf0>
 62c:	8a e0       	ldi	r24, 0x0A	; 10
 62e:	38 9e       	mul	r3, r24
 630:	30 0d       	add	r19, r0
 632:	11 24       	eor	r1, r1
 634:	33 2e       	mov	r3, r19
 636:	20 62       	ori	r18, 0x20	; 32
 638:	0c c0       	rjmp	.+24     	; 0x652 <vfprintf+0xf0>
 63a:	8e 32       	cpi	r24, 0x2E	; 46
 63c:	21 f4       	brne	.+8      	; 0x646 <vfprintf+0xe4>
 63e:	26 fd       	sbrc	r18, 6
 640:	5f c1       	rjmp	.+702    	; 0x900 <vfprintf+0x39e>
 642:	20 64       	ori	r18, 0x40	; 64
 644:	06 c0       	rjmp	.+12     	; 0x652 <vfprintf+0xf0>
 646:	8c 36       	cpi	r24, 0x6C	; 108
 648:	11 f4       	brne	.+4      	; 0x64e <vfprintf+0xec>
 64a:	20 68       	ori	r18, 0x80	; 128
 64c:	02 c0       	rjmp	.+4      	; 0x652 <vfprintf+0xf0>
 64e:	88 36       	cpi	r24, 0x68	; 104
 650:	41 f4       	brne	.+16     	; 0x662 <vfprintf+0x100>
 652:	f6 01       	movw	r30, r12
 654:	93 fd       	sbrc	r25, 3
 656:	85 91       	lpm	r24, Z+
 658:	93 ff       	sbrs	r25, 3
 65a:	81 91       	ld	r24, Z+
 65c:	6f 01       	movw	r12, r30
 65e:	81 11       	cpse	r24, r1
 660:	c1 cf       	rjmp	.-126    	; 0x5e4 <vfprintf+0x82>
 662:	98 2f       	mov	r25, r24
 664:	9f 7d       	andi	r25, 0xDF	; 223
 666:	95 54       	subi	r25, 0x45	; 69
 668:	93 30       	cpi	r25, 0x03	; 3
 66a:	28 f4       	brcc	.+10     	; 0x676 <vfprintf+0x114>
 66c:	0c 5f       	subi	r16, 0xFC	; 252
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	ff e3       	ldi	r31, 0x3F	; 63
 672:	f9 83       	std	Y+1, r31	; 0x01
 674:	0d c0       	rjmp	.+26     	; 0x690 <vfprintf+0x12e>
 676:	83 36       	cpi	r24, 0x63	; 99
 678:	31 f0       	breq	.+12     	; 0x686 <vfprintf+0x124>
 67a:	83 37       	cpi	r24, 0x73	; 115
 67c:	71 f0       	breq	.+28     	; 0x69a <vfprintf+0x138>
 67e:	83 35       	cpi	r24, 0x53	; 83
 680:	09 f0       	breq	.+2      	; 0x684 <vfprintf+0x122>
 682:	57 c0       	rjmp	.+174    	; 0x732 <vfprintf+0x1d0>
 684:	21 c0       	rjmp	.+66     	; 0x6c8 <vfprintf+0x166>
 686:	f8 01       	movw	r30, r16
 688:	80 81       	ld	r24, Z
 68a:	89 83       	std	Y+1, r24	; 0x01
 68c:	0e 5f       	subi	r16, 0xFE	; 254
 68e:	1f 4f       	sbci	r17, 0xFF	; 255
 690:	44 24       	eor	r4, r4
 692:	43 94       	inc	r4
 694:	51 2c       	mov	r5, r1
 696:	54 01       	movw	r10, r8
 698:	14 c0       	rjmp	.+40     	; 0x6c2 <vfprintf+0x160>
 69a:	38 01       	movw	r6, r16
 69c:	f2 e0       	ldi	r31, 0x02	; 2
 69e:	6f 0e       	add	r6, r31
 6a0:	71 1c       	adc	r7, r1
 6a2:	f8 01       	movw	r30, r16
 6a4:	a0 80       	ld	r10, Z
 6a6:	b1 80       	ldd	r11, Z+1	; 0x01
 6a8:	26 ff       	sbrs	r18, 6
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <vfprintf+0x150>
 6ac:	65 2d       	mov	r22, r5
 6ae:	70 e0       	ldi	r23, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <vfprintf+0x154>
 6b2:	6f ef       	ldi	r22, 0xFF	; 255
 6b4:	7f ef       	ldi	r23, 0xFF	; 255
 6b6:	c5 01       	movw	r24, r10
 6b8:	2c 87       	std	Y+12, r18	; 0x0c
 6ba:	9a d2       	rcall	.+1332   	; 0xbf0 <strnlen>
 6bc:	2c 01       	movw	r4, r24
 6be:	83 01       	movw	r16, r6
 6c0:	2c 85       	ldd	r18, Y+12	; 0x0c
 6c2:	2f 77       	andi	r18, 0x7F	; 127
 6c4:	22 2e       	mov	r2, r18
 6c6:	16 c0       	rjmp	.+44     	; 0x6f4 <vfprintf+0x192>
 6c8:	38 01       	movw	r6, r16
 6ca:	f2 e0       	ldi	r31, 0x02	; 2
 6cc:	6f 0e       	add	r6, r31
 6ce:	71 1c       	adc	r7, r1
 6d0:	f8 01       	movw	r30, r16
 6d2:	a0 80       	ld	r10, Z
 6d4:	b1 80       	ldd	r11, Z+1	; 0x01
 6d6:	26 ff       	sbrs	r18, 6
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <vfprintf+0x17e>
 6da:	65 2d       	mov	r22, r5
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <vfprintf+0x182>
 6e0:	6f ef       	ldi	r22, 0xFF	; 255
 6e2:	7f ef       	ldi	r23, 0xFF	; 255
 6e4:	c5 01       	movw	r24, r10
 6e6:	2c 87       	std	Y+12, r18	; 0x0c
 6e8:	71 d2       	rcall	.+1250   	; 0xbcc <strnlen_P>
 6ea:	2c 01       	movw	r4, r24
 6ec:	2c 85       	ldd	r18, Y+12	; 0x0c
 6ee:	20 68       	ori	r18, 0x80	; 128
 6f0:	22 2e       	mov	r2, r18
 6f2:	83 01       	movw	r16, r6
 6f4:	23 fc       	sbrc	r2, 3
 6f6:	19 c0       	rjmp	.+50     	; 0x72a <vfprintf+0x1c8>
 6f8:	83 2d       	mov	r24, r3
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	48 16       	cp	r4, r24
 6fe:	59 06       	cpc	r5, r25
 700:	a0 f4       	brcc	.+40     	; 0x72a <vfprintf+0x1c8>
 702:	b7 01       	movw	r22, r14
 704:	80 e2       	ldi	r24, 0x20	; 32
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	7e d2       	rcall	.+1276   	; 0xc06 <fputc>
 70a:	3a 94       	dec	r3
 70c:	f5 cf       	rjmp	.-22     	; 0x6f8 <vfprintf+0x196>
 70e:	f5 01       	movw	r30, r10
 710:	27 fc       	sbrc	r2, 7
 712:	85 91       	lpm	r24, Z+
 714:	27 fe       	sbrs	r2, 7
 716:	81 91       	ld	r24, Z+
 718:	5f 01       	movw	r10, r30
 71a:	b7 01       	movw	r22, r14
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	73 d2       	rcall	.+1254   	; 0xc06 <fputc>
 720:	31 10       	cpse	r3, r1
 722:	3a 94       	dec	r3
 724:	f1 e0       	ldi	r31, 0x01	; 1
 726:	4f 1a       	sub	r4, r31
 728:	51 08       	sbc	r5, r1
 72a:	41 14       	cp	r4, r1
 72c:	51 04       	cpc	r5, r1
 72e:	79 f7       	brne	.-34     	; 0x70e <vfprintf+0x1ac>
 730:	de c0       	rjmp	.+444    	; 0x8ee <vfprintf+0x38c>
 732:	84 36       	cpi	r24, 0x64	; 100
 734:	11 f0       	breq	.+4      	; 0x73a <vfprintf+0x1d8>
 736:	89 36       	cpi	r24, 0x69	; 105
 738:	31 f5       	brne	.+76     	; 0x786 <vfprintf+0x224>
 73a:	f8 01       	movw	r30, r16
 73c:	27 ff       	sbrs	r18, 7
 73e:	07 c0       	rjmp	.+14     	; 0x74e <vfprintf+0x1ec>
 740:	60 81       	ld	r22, Z
 742:	71 81       	ldd	r23, Z+1	; 0x01
 744:	82 81       	ldd	r24, Z+2	; 0x02
 746:	93 81       	ldd	r25, Z+3	; 0x03
 748:	0c 5f       	subi	r16, 0xFC	; 252
 74a:	1f 4f       	sbci	r17, 0xFF	; 255
 74c:	08 c0       	rjmp	.+16     	; 0x75e <vfprintf+0x1fc>
 74e:	60 81       	ld	r22, Z
 750:	71 81       	ldd	r23, Z+1	; 0x01
 752:	07 2e       	mov	r0, r23
 754:	00 0c       	add	r0, r0
 756:	88 0b       	sbc	r24, r24
 758:	99 0b       	sbc	r25, r25
 75a:	0e 5f       	subi	r16, 0xFE	; 254
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	2f 76       	andi	r18, 0x6F	; 111
 760:	72 2e       	mov	r7, r18
 762:	97 ff       	sbrs	r25, 7
 764:	09 c0       	rjmp	.+18     	; 0x778 <vfprintf+0x216>
 766:	90 95       	com	r25
 768:	80 95       	com	r24
 76a:	70 95       	com	r23
 76c:	61 95       	neg	r22
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	8f 4f       	sbci	r24, 0xFF	; 255
 772:	9f 4f       	sbci	r25, 0xFF	; 255
 774:	20 68       	ori	r18, 0x80	; 128
 776:	72 2e       	mov	r7, r18
 778:	2a e0       	ldi	r18, 0x0A	; 10
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	a4 01       	movw	r20, r8
 77e:	7b d2       	rcall	.+1270   	; 0xc76 <__ultoa_invert>
 780:	a8 2e       	mov	r10, r24
 782:	a8 18       	sub	r10, r8
 784:	43 c0       	rjmp	.+134    	; 0x80c <vfprintf+0x2aa>
 786:	85 37       	cpi	r24, 0x75	; 117
 788:	29 f4       	brne	.+10     	; 0x794 <vfprintf+0x232>
 78a:	2f 7e       	andi	r18, 0xEF	; 239
 78c:	b2 2e       	mov	r11, r18
 78e:	2a e0       	ldi	r18, 0x0A	; 10
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	25 c0       	rjmp	.+74     	; 0x7de <vfprintf+0x27c>
 794:	f2 2f       	mov	r31, r18
 796:	f9 7f       	andi	r31, 0xF9	; 249
 798:	bf 2e       	mov	r11, r31
 79a:	8f 36       	cpi	r24, 0x6F	; 111
 79c:	c1 f0       	breq	.+48     	; 0x7ce <vfprintf+0x26c>
 79e:	18 f4       	brcc	.+6      	; 0x7a6 <vfprintf+0x244>
 7a0:	88 35       	cpi	r24, 0x58	; 88
 7a2:	79 f0       	breq	.+30     	; 0x7c2 <vfprintf+0x260>
 7a4:	ad c0       	rjmp	.+346    	; 0x900 <vfprintf+0x39e>
 7a6:	80 37       	cpi	r24, 0x70	; 112
 7a8:	19 f0       	breq	.+6      	; 0x7b0 <vfprintf+0x24e>
 7aa:	88 37       	cpi	r24, 0x78	; 120
 7ac:	21 f0       	breq	.+8      	; 0x7b6 <vfprintf+0x254>
 7ae:	a8 c0       	rjmp	.+336    	; 0x900 <vfprintf+0x39e>
 7b0:	2f 2f       	mov	r18, r31
 7b2:	20 61       	ori	r18, 0x10	; 16
 7b4:	b2 2e       	mov	r11, r18
 7b6:	b4 fe       	sbrs	r11, 4
 7b8:	0d c0       	rjmp	.+26     	; 0x7d4 <vfprintf+0x272>
 7ba:	8b 2d       	mov	r24, r11
 7bc:	84 60       	ori	r24, 0x04	; 4
 7be:	b8 2e       	mov	r11, r24
 7c0:	09 c0       	rjmp	.+18     	; 0x7d4 <vfprintf+0x272>
 7c2:	24 ff       	sbrs	r18, 4
 7c4:	0a c0       	rjmp	.+20     	; 0x7da <vfprintf+0x278>
 7c6:	9f 2f       	mov	r25, r31
 7c8:	96 60       	ori	r25, 0x06	; 6
 7ca:	b9 2e       	mov	r11, r25
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <vfprintf+0x278>
 7ce:	28 e0       	ldi	r18, 0x08	; 8
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	05 c0       	rjmp	.+10     	; 0x7de <vfprintf+0x27c>
 7d4:	20 e1       	ldi	r18, 0x10	; 16
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <vfprintf+0x27c>
 7da:	20 e1       	ldi	r18, 0x10	; 16
 7dc:	32 e0       	ldi	r19, 0x02	; 2
 7de:	f8 01       	movw	r30, r16
 7e0:	b7 fe       	sbrs	r11, 7
 7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <vfprintf+0x290>
 7e4:	60 81       	ld	r22, Z
 7e6:	71 81       	ldd	r23, Z+1	; 0x01
 7e8:	82 81       	ldd	r24, Z+2	; 0x02
 7ea:	93 81       	ldd	r25, Z+3	; 0x03
 7ec:	0c 5f       	subi	r16, 0xFC	; 252
 7ee:	1f 4f       	sbci	r17, 0xFF	; 255
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0x29c>
 7f2:	60 81       	ld	r22, Z
 7f4:	71 81       	ldd	r23, Z+1	; 0x01
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 5f       	subi	r16, 0xFE	; 254
 7fc:	1f 4f       	sbci	r17, 0xFF	; 255
 7fe:	a4 01       	movw	r20, r8
 800:	3a d2       	rcall	.+1140   	; 0xc76 <__ultoa_invert>
 802:	a8 2e       	mov	r10, r24
 804:	a8 18       	sub	r10, r8
 806:	fb 2d       	mov	r31, r11
 808:	ff 77       	andi	r31, 0x7F	; 127
 80a:	7f 2e       	mov	r7, r31
 80c:	76 fe       	sbrs	r7, 6
 80e:	0b c0       	rjmp	.+22     	; 0x826 <vfprintf+0x2c4>
 810:	37 2d       	mov	r19, r7
 812:	3e 7f       	andi	r19, 0xFE	; 254
 814:	a5 14       	cp	r10, r5
 816:	50 f4       	brcc	.+20     	; 0x82c <vfprintf+0x2ca>
 818:	74 fe       	sbrs	r7, 4
 81a:	0a c0       	rjmp	.+20     	; 0x830 <vfprintf+0x2ce>
 81c:	72 fc       	sbrc	r7, 2
 81e:	08 c0       	rjmp	.+16     	; 0x830 <vfprintf+0x2ce>
 820:	37 2d       	mov	r19, r7
 822:	3e 7e       	andi	r19, 0xEE	; 238
 824:	05 c0       	rjmp	.+10     	; 0x830 <vfprintf+0x2ce>
 826:	ba 2c       	mov	r11, r10
 828:	37 2d       	mov	r19, r7
 82a:	03 c0       	rjmp	.+6      	; 0x832 <vfprintf+0x2d0>
 82c:	ba 2c       	mov	r11, r10
 82e:	01 c0       	rjmp	.+2      	; 0x832 <vfprintf+0x2d0>
 830:	b5 2c       	mov	r11, r5
 832:	34 ff       	sbrs	r19, 4
 834:	0d c0       	rjmp	.+26     	; 0x850 <vfprintf+0x2ee>
 836:	fe 01       	movw	r30, r28
 838:	ea 0d       	add	r30, r10
 83a:	f1 1d       	adc	r31, r1
 83c:	80 81       	ld	r24, Z
 83e:	80 33       	cpi	r24, 0x30	; 48
 840:	11 f4       	brne	.+4      	; 0x846 <vfprintf+0x2e4>
 842:	39 7e       	andi	r19, 0xE9	; 233
 844:	09 c0       	rjmp	.+18     	; 0x858 <vfprintf+0x2f6>
 846:	32 ff       	sbrs	r19, 2
 848:	06 c0       	rjmp	.+12     	; 0x856 <vfprintf+0x2f4>
 84a:	b3 94       	inc	r11
 84c:	b3 94       	inc	r11
 84e:	04 c0       	rjmp	.+8      	; 0x858 <vfprintf+0x2f6>
 850:	83 2f       	mov	r24, r19
 852:	86 78       	andi	r24, 0x86	; 134
 854:	09 f0       	breq	.+2      	; 0x858 <vfprintf+0x2f6>
 856:	b3 94       	inc	r11
 858:	33 fd       	sbrc	r19, 3
 85a:	12 c0       	rjmp	.+36     	; 0x880 <vfprintf+0x31e>
 85c:	30 ff       	sbrs	r19, 0
 85e:	06 c0       	rjmp	.+12     	; 0x86c <vfprintf+0x30a>
 860:	5a 2c       	mov	r5, r10
 862:	b3 14       	cp	r11, r3
 864:	18 f4       	brcc	.+6      	; 0x86c <vfprintf+0x30a>
 866:	53 0c       	add	r5, r3
 868:	5b 18       	sub	r5, r11
 86a:	b3 2c       	mov	r11, r3
 86c:	b3 14       	cp	r11, r3
 86e:	60 f4       	brcc	.+24     	; 0x888 <vfprintf+0x326>
 870:	b7 01       	movw	r22, r14
 872:	80 e2       	ldi	r24, 0x20	; 32
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	3c 87       	std	Y+12, r19	; 0x0c
 878:	c6 d1       	rcall	.+908    	; 0xc06 <fputc>
 87a:	b3 94       	inc	r11
 87c:	3c 85       	ldd	r19, Y+12	; 0x0c
 87e:	f6 cf       	rjmp	.-20     	; 0x86c <vfprintf+0x30a>
 880:	b3 14       	cp	r11, r3
 882:	10 f4       	brcc	.+4      	; 0x888 <vfprintf+0x326>
 884:	3b 18       	sub	r3, r11
 886:	01 c0       	rjmp	.+2      	; 0x88a <vfprintf+0x328>
 888:	31 2c       	mov	r3, r1
 88a:	34 ff       	sbrs	r19, 4
 88c:	11 c0       	rjmp	.+34     	; 0x8b0 <vfprintf+0x34e>
 88e:	b7 01       	movw	r22, r14
 890:	80 e3       	ldi	r24, 0x30	; 48
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	3c 87       	std	Y+12, r19	; 0x0c
 896:	b7 d1       	rcall	.+878    	; 0xc06 <fputc>
 898:	3c 85       	ldd	r19, Y+12	; 0x0c
 89a:	32 ff       	sbrs	r19, 2
 89c:	16 c0       	rjmp	.+44     	; 0x8ca <vfprintf+0x368>
 89e:	31 fd       	sbrc	r19, 1
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <vfprintf+0x346>
 8a2:	88 e7       	ldi	r24, 0x78	; 120
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <vfprintf+0x34a>
 8a8:	88 e5       	ldi	r24, 0x58	; 88
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	b7 01       	movw	r22, r14
 8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <vfprintf+0x366>
 8b0:	83 2f       	mov	r24, r19
 8b2:	86 78       	andi	r24, 0x86	; 134
 8b4:	51 f0       	breq	.+20     	; 0x8ca <vfprintf+0x368>
 8b6:	31 ff       	sbrs	r19, 1
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <vfprintf+0x35c>
 8ba:	8b e2       	ldi	r24, 0x2B	; 43
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <vfprintf+0x35e>
 8be:	80 e2       	ldi	r24, 0x20	; 32
 8c0:	37 fd       	sbrc	r19, 7
 8c2:	8d e2       	ldi	r24, 0x2D	; 45
 8c4:	b7 01       	movw	r22, r14
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	9e d1       	rcall	.+828    	; 0xc06 <fputc>
 8ca:	a5 14       	cp	r10, r5
 8cc:	30 f4       	brcc	.+12     	; 0x8da <vfprintf+0x378>
 8ce:	b7 01       	movw	r22, r14
 8d0:	80 e3       	ldi	r24, 0x30	; 48
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	98 d1       	rcall	.+816    	; 0xc06 <fputc>
 8d6:	5a 94       	dec	r5
 8d8:	f8 cf       	rjmp	.-16     	; 0x8ca <vfprintf+0x368>
 8da:	aa 94       	dec	r10
 8dc:	f4 01       	movw	r30, r8
 8de:	ea 0d       	add	r30, r10
 8e0:	f1 1d       	adc	r31, r1
 8e2:	80 81       	ld	r24, Z
 8e4:	b7 01       	movw	r22, r14
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	8e d1       	rcall	.+796    	; 0xc06 <fputc>
 8ea:	a1 10       	cpse	r10, r1
 8ec:	f6 cf       	rjmp	.-20     	; 0x8da <vfprintf+0x378>
 8ee:	33 20       	and	r3, r3
 8f0:	09 f4       	brne	.+2      	; 0x8f4 <vfprintf+0x392>
 8f2:	5d ce       	rjmp	.-838    	; 0x5ae <vfprintf+0x4c>
 8f4:	b7 01       	movw	r22, r14
 8f6:	80 e2       	ldi	r24, 0x20	; 32
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	85 d1       	rcall	.+778    	; 0xc06 <fputc>
 8fc:	3a 94       	dec	r3
 8fe:	f7 cf       	rjmp	.-18     	; 0x8ee <vfprintf+0x38c>
 900:	f7 01       	movw	r30, r14
 902:	86 81       	ldd	r24, Z+6	; 0x06
 904:	97 81       	ldd	r25, Z+7	; 0x07
 906:	02 c0       	rjmp	.+4      	; 0x90c <vfprintf+0x3aa>
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	9f ef       	ldi	r25, 0xFF	; 255
 90c:	2c 96       	adiw	r28, 0x0c	; 12
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	f8 94       	cli
 912:	de bf       	out	0x3e, r29	; 62
 914:	0f be       	out	0x3f, r0	; 63
 916:	cd bf       	out	0x3d, r28	; 61
 918:	df 91       	pop	r29
 91a:	cf 91       	pop	r28
 91c:	1f 91       	pop	r17
 91e:	0f 91       	pop	r16
 920:	ff 90       	pop	r15
 922:	ef 90       	pop	r14
 924:	df 90       	pop	r13
 926:	cf 90       	pop	r12
 928:	bf 90       	pop	r11
 92a:	af 90       	pop	r10
 92c:	9f 90       	pop	r9
 92e:	8f 90       	pop	r8
 930:	7f 90       	pop	r7
 932:	6f 90       	pop	r6
 934:	5f 90       	pop	r5
 936:	4f 90       	pop	r4
 938:	3f 90       	pop	r3
 93a:	2f 90       	pop	r2
 93c:	08 95       	ret

0000093e <calloc>:
 93e:	0f 93       	push	r16
 940:	1f 93       	push	r17
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
 946:	86 9f       	mul	r24, r22
 948:	80 01       	movw	r16, r0
 94a:	87 9f       	mul	r24, r23
 94c:	10 0d       	add	r17, r0
 94e:	96 9f       	mul	r25, r22
 950:	10 0d       	add	r17, r0
 952:	11 24       	eor	r1, r1
 954:	c8 01       	movw	r24, r16
 956:	0d d0       	rcall	.+26     	; 0x972 <malloc>
 958:	ec 01       	movw	r28, r24
 95a:	00 97       	sbiw	r24, 0x00	; 0
 95c:	21 f0       	breq	.+8      	; 0x966 <calloc+0x28>
 95e:	a8 01       	movw	r20, r16
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	70 e0       	ldi	r23, 0x00	; 0
 964:	3e d1       	rcall	.+636    	; 0xbe2 <memset>
 966:	ce 01       	movw	r24, r28
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	1f 91       	pop	r17
 96e:	0f 91       	pop	r16
 970:	08 95       	ret

00000972 <malloc>:
 972:	cf 93       	push	r28
 974:	df 93       	push	r29
 976:	82 30       	cpi	r24, 0x02	; 2
 978:	91 05       	cpc	r25, r1
 97a:	10 f4       	brcc	.+4      	; 0x980 <malloc+0xe>
 97c:	82 e0       	ldi	r24, 0x02	; 2
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	e0 91 95 01 	lds	r30, 0x0195
 984:	f0 91 96 01 	lds	r31, 0x0196
 988:	20 e0       	ldi	r18, 0x00	; 0
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	c0 e0       	ldi	r28, 0x00	; 0
 98e:	d0 e0       	ldi	r29, 0x00	; 0
 990:	30 97       	sbiw	r30, 0x00	; 0
 992:	11 f1       	breq	.+68     	; 0x9d8 <malloc+0x66>
 994:	40 81       	ld	r20, Z
 996:	51 81       	ldd	r21, Z+1	; 0x01
 998:	48 17       	cp	r20, r24
 99a:	59 07       	cpc	r21, r25
 99c:	c0 f0       	brcs	.+48     	; 0x9ce <malloc+0x5c>
 99e:	48 17       	cp	r20, r24
 9a0:	59 07       	cpc	r21, r25
 9a2:	61 f4       	brne	.+24     	; 0x9bc <malloc+0x4a>
 9a4:	82 81       	ldd	r24, Z+2	; 0x02
 9a6:	93 81       	ldd	r25, Z+3	; 0x03
 9a8:	20 97       	sbiw	r28, 0x00	; 0
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <malloc+0x40>
 9ac:	9b 83       	std	Y+3, r25	; 0x03
 9ae:	8a 83       	std	Y+2, r24	; 0x02
 9b0:	2b c0       	rjmp	.+86     	; 0xa08 <malloc+0x96>
 9b2:	90 93 96 01 	sts	0x0196, r25
 9b6:	80 93 95 01 	sts	0x0195, r24
 9ba:	26 c0       	rjmp	.+76     	; 0xa08 <malloc+0x96>
 9bc:	21 15       	cp	r18, r1
 9be:	31 05       	cpc	r19, r1
 9c0:	19 f0       	breq	.+6      	; 0x9c8 <malloc+0x56>
 9c2:	42 17       	cp	r20, r18
 9c4:	53 07       	cpc	r21, r19
 9c6:	18 f4       	brcc	.+6      	; 0x9ce <malloc+0x5c>
 9c8:	9a 01       	movw	r18, r20
 9ca:	be 01       	movw	r22, r28
 9cc:	df 01       	movw	r26, r30
 9ce:	ef 01       	movw	r28, r30
 9d0:	02 80       	ldd	r0, Z+2	; 0x02
 9d2:	f3 81       	ldd	r31, Z+3	; 0x03
 9d4:	e0 2d       	mov	r30, r0
 9d6:	dc cf       	rjmp	.-72     	; 0x990 <malloc+0x1e>
 9d8:	21 15       	cp	r18, r1
 9da:	31 05       	cpc	r19, r1
 9dc:	09 f1       	breq	.+66     	; 0xa20 <malloc+0xae>
 9de:	28 1b       	sub	r18, r24
 9e0:	39 0b       	sbc	r19, r25
 9e2:	24 30       	cpi	r18, 0x04	; 4
 9e4:	31 05       	cpc	r19, r1
 9e6:	90 f4       	brcc	.+36     	; 0xa0c <malloc+0x9a>
 9e8:	12 96       	adiw	r26, 0x02	; 2
 9ea:	8d 91       	ld	r24, X+
 9ec:	9c 91       	ld	r25, X
 9ee:	13 97       	sbiw	r26, 0x03	; 3
 9f0:	61 15       	cp	r22, r1
 9f2:	71 05       	cpc	r23, r1
 9f4:	21 f0       	breq	.+8      	; 0x9fe <malloc+0x8c>
 9f6:	fb 01       	movw	r30, r22
 9f8:	93 83       	std	Z+3, r25	; 0x03
 9fa:	82 83       	std	Z+2, r24	; 0x02
 9fc:	04 c0       	rjmp	.+8      	; 0xa06 <malloc+0x94>
 9fe:	90 93 96 01 	sts	0x0196, r25
 a02:	80 93 95 01 	sts	0x0195, r24
 a06:	fd 01       	movw	r30, r26
 a08:	32 96       	adiw	r30, 0x02	; 2
 a0a:	44 c0       	rjmp	.+136    	; 0xa94 <malloc+0x122>
 a0c:	fd 01       	movw	r30, r26
 a0e:	e2 0f       	add	r30, r18
 a10:	f3 1f       	adc	r31, r19
 a12:	81 93       	st	Z+, r24
 a14:	91 93       	st	Z+, r25
 a16:	22 50       	subi	r18, 0x02	; 2
 a18:	31 09       	sbc	r19, r1
 a1a:	2d 93       	st	X+, r18
 a1c:	3c 93       	st	X, r19
 a1e:	3a c0       	rjmp	.+116    	; 0xa94 <malloc+0x122>
 a20:	20 91 93 01 	lds	r18, 0x0193
 a24:	30 91 94 01 	lds	r19, 0x0194
 a28:	23 2b       	or	r18, r19
 a2a:	41 f4       	brne	.+16     	; 0xa3c <malloc+0xca>
 a2c:	20 91 02 01 	lds	r18, 0x0102
 a30:	30 91 03 01 	lds	r19, 0x0103
 a34:	30 93 94 01 	sts	0x0194, r19
 a38:	20 93 93 01 	sts	0x0193, r18
 a3c:	20 91 00 01 	lds	r18, 0x0100
 a40:	30 91 01 01 	lds	r19, 0x0101
 a44:	21 15       	cp	r18, r1
 a46:	31 05       	cpc	r19, r1
 a48:	41 f4       	brne	.+16     	; 0xa5a <malloc+0xe8>
 a4a:	2d b7       	in	r18, 0x3d	; 61
 a4c:	3e b7       	in	r19, 0x3e	; 62
 a4e:	40 91 04 01 	lds	r20, 0x0104
 a52:	50 91 05 01 	lds	r21, 0x0105
 a56:	24 1b       	sub	r18, r20
 a58:	35 0b       	sbc	r19, r21
 a5a:	e0 91 93 01 	lds	r30, 0x0193
 a5e:	f0 91 94 01 	lds	r31, 0x0194
 a62:	e2 17       	cp	r30, r18
 a64:	f3 07       	cpc	r31, r19
 a66:	a0 f4       	brcc	.+40     	; 0xa90 <malloc+0x11e>
 a68:	2e 1b       	sub	r18, r30
 a6a:	3f 0b       	sbc	r19, r31
 a6c:	28 17       	cp	r18, r24
 a6e:	39 07       	cpc	r19, r25
 a70:	78 f0       	brcs	.+30     	; 0xa90 <malloc+0x11e>
 a72:	ac 01       	movw	r20, r24
 a74:	4e 5f       	subi	r20, 0xFE	; 254
 a76:	5f 4f       	sbci	r21, 0xFF	; 255
 a78:	24 17       	cp	r18, r20
 a7a:	35 07       	cpc	r19, r21
 a7c:	48 f0       	brcs	.+18     	; 0xa90 <malloc+0x11e>
 a7e:	4e 0f       	add	r20, r30
 a80:	5f 1f       	adc	r21, r31
 a82:	50 93 94 01 	sts	0x0194, r21
 a86:	40 93 93 01 	sts	0x0193, r20
 a8a:	81 93       	st	Z+, r24
 a8c:	91 93       	st	Z+, r25
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <malloc+0x122>
 a90:	e0 e0       	ldi	r30, 0x00	; 0
 a92:	f0 e0       	ldi	r31, 0x00	; 0
 a94:	cf 01       	movw	r24, r30
 a96:	df 91       	pop	r29
 a98:	cf 91       	pop	r28
 a9a:	08 95       	ret

00000a9c <free>:
 a9c:	0f 93       	push	r16
 a9e:	1f 93       	push	r17
 aa0:	cf 93       	push	r28
 aa2:	df 93       	push	r29
 aa4:	00 97       	sbiw	r24, 0x00	; 0
 aa6:	09 f4       	brne	.+2      	; 0xaaa <free+0xe>
 aa8:	8c c0       	rjmp	.+280    	; 0xbc2 <free+0x126>
 aaa:	fc 01       	movw	r30, r24
 aac:	32 97       	sbiw	r30, 0x02	; 2
 aae:	13 82       	std	Z+3, r1	; 0x03
 ab0:	12 82       	std	Z+2, r1	; 0x02
 ab2:	00 91 95 01 	lds	r16, 0x0195
 ab6:	10 91 96 01 	lds	r17, 0x0196
 aba:	01 15       	cp	r16, r1
 abc:	11 05       	cpc	r17, r1
 abe:	81 f4       	brne	.+32     	; 0xae0 <free+0x44>
 ac0:	20 81       	ld	r18, Z
 ac2:	31 81       	ldd	r19, Z+1	; 0x01
 ac4:	82 0f       	add	r24, r18
 ac6:	93 1f       	adc	r25, r19
 ac8:	20 91 93 01 	lds	r18, 0x0193
 acc:	30 91 94 01 	lds	r19, 0x0194
 ad0:	28 17       	cp	r18, r24
 ad2:	39 07       	cpc	r19, r25
 ad4:	79 f5       	brne	.+94     	; 0xb34 <free+0x98>
 ad6:	f0 93 94 01 	sts	0x0194, r31
 ada:	e0 93 93 01 	sts	0x0193, r30
 ade:	71 c0       	rjmp	.+226    	; 0xbc2 <free+0x126>
 ae0:	d8 01       	movw	r26, r16
 ae2:	40 e0       	ldi	r20, 0x00	; 0
 ae4:	50 e0       	ldi	r21, 0x00	; 0
 ae6:	ae 17       	cp	r26, r30
 ae8:	bf 07       	cpc	r27, r31
 aea:	50 f4       	brcc	.+20     	; 0xb00 <free+0x64>
 aec:	12 96       	adiw	r26, 0x02	; 2
 aee:	2d 91       	ld	r18, X+
 af0:	3c 91       	ld	r19, X
 af2:	13 97       	sbiw	r26, 0x03	; 3
 af4:	ad 01       	movw	r20, r26
 af6:	21 15       	cp	r18, r1
 af8:	31 05       	cpc	r19, r1
 afa:	09 f1       	breq	.+66     	; 0xb3e <free+0xa2>
 afc:	d9 01       	movw	r26, r18
 afe:	f3 cf       	rjmp	.-26     	; 0xae6 <free+0x4a>
 b00:	9d 01       	movw	r18, r26
 b02:	da 01       	movw	r26, r20
 b04:	33 83       	std	Z+3, r19	; 0x03
 b06:	22 83       	std	Z+2, r18	; 0x02
 b08:	60 81       	ld	r22, Z
 b0a:	71 81       	ldd	r23, Z+1	; 0x01
 b0c:	86 0f       	add	r24, r22
 b0e:	97 1f       	adc	r25, r23
 b10:	82 17       	cp	r24, r18
 b12:	93 07       	cpc	r25, r19
 b14:	69 f4       	brne	.+26     	; 0xb30 <free+0x94>
 b16:	ec 01       	movw	r28, r24
 b18:	28 81       	ld	r18, Y
 b1a:	39 81       	ldd	r19, Y+1	; 0x01
 b1c:	26 0f       	add	r18, r22
 b1e:	37 1f       	adc	r19, r23
 b20:	2e 5f       	subi	r18, 0xFE	; 254
 b22:	3f 4f       	sbci	r19, 0xFF	; 255
 b24:	31 83       	std	Z+1, r19	; 0x01
 b26:	20 83       	st	Z, r18
 b28:	8a 81       	ldd	r24, Y+2	; 0x02
 b2a:	9b 81       	ldd	r25, Y+3	; 0x03
 b2c:	93 83       	std	Z+3, r25	; 0x03
 b2e:	82 83       	std	Z+2, r24	; 0x02
 b30:	45 2b       	or	r20, r21
 b32:	29 f4       	brne	.+10     	; 0xb3e <free+0xa2>
 b34:	f0 93 96 01 	sts	0x0196, r31
 b38:	e0 93 95 01 	sts	0x0195, r30
 b3c:	42 c0       	rjmp	.+132    	; 0xbc2 <free+0x126>
 b3e:	13 96       	adiw	r26, 0x03	; 3
 b40:	fc 93       	st	X, r31
 b42:	ee 93       	st	-X, r30
 b44:	12 97       	sbiw	r26, 0x02	; 2
 b46:	ed 01       	movw	r28, r26
 b48:	49 91       	ld	r20, Y+
 b4a:	59 91       	ld	r21, Y+
 b4c:	9e 01       	movw	r18, r28
 b4e:	24 0f       	add	r18, r20
 b50:	35 1f       	adc	r19, r21
 b52:	e2 17       	cp	r30, r18
 b54:	f3 07       	cpc	r31, r19
 b56:	71 f4       	brne	.+28     	; 0xb74 <free+0xd8>
 b58:	80 81       	ld	r24, Z
 b5a:	91 81       	ldd	r25, Z+1	; 0x01
 b5c:	84 0f       	add	r24, r20
 b5e:	95 1f       	adc	r25, r21
 b60:	02 96       	adiw	r24, 0x02	; 2
 b62:	11 96       	adiw	r26, 0x01	; 1
 b64:	9c 93       	st	X, r25
 b66:	8e 93       	st	-X, r24
 b68:	82 81       	ldd	r24, Z+2	; 0x02
 b6a:	93 81       	ldd	r25, Z+3	; 0x03
 b6c:	13 96       	adiw	r26, 0x03	; 3
 b6e:	9c 93       	st	X, r25
 b70:	8e 93       	st	-X, r24
 b72:	12 97       	sbiw	r26, 0x02	; 2
 b74:	e0 e0       	ldi	r30, 0x00	; 0
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	d8 01       	movw	r26, r16
 b7a:	12 96       	adiw	r26, 0x02	; 2
 b7c:	8d 91       	ld	r24, X+
 b7e:	9c 91       	ld	r25, X
 b80:	13 97       	sbiw	r26, 0x03	; 3
 b82:	00 97       	sbiw	r24, 0x00	; 0
 b84:	19 f0       	breq	.+6      	; 0xb8c <free+0xf0>
 b86:	f8 01       	movw	r30, r16
 b88:	8c 01       	movw	r16, r24
 b8a:	f6 cf       	rjmp	.-20     	; 0xb78 <free+0xdc>
 b8c:	8d 91       	ld	r24, X+
 b8e:	9c 91       	ld	r25, X
 b90:	98 01       	movw	r18, r16
 b92:	2e 5f       	subi	r18, 0xFE	; 254
 b94:	3f 4f       	sbci	r19, 0xFF	; 255
 b96:	82 0f       	add	r24, r18
 b98:	93 1f       	adc	r25, r19
 b9a:	20 91 93 01 	lds	r18, 0x0193
 b9e:	30 91 94 01 	lds	r19, 0x0194
 ba2:	28 17       	cp	r18, r24
 ba4:	39 07       	cpc	r19, r25
 ba6:	69 f4       	brne	.+26     	; 0xbc2 <free+0x126>
 ba8:	30 97       	sbiw	r30, 0x00	; 0
 baa:	29 f4       	brne	.+10     	; 0xbb6 <free+0x11a>
 bac:	10 92 96 01 	sts	0x0196, r1
 bb0:	10 92 95 01 	sts	0x0195, r1
 bb4:	02 c0       	rjmp	.+4      	; 0xbba <free+0x11e>
 bb6:	13 82       	std	Z+3, r1	; 0x03
 bb8:	12 82       	std	Z+2, r1	; 0x02
 bba:	10 93 94 01 	sts	0x0194, r17
 bbe:	00 93 93 01 	sts	0x0193, r16
 bc2:	df 91       	pop	r29
 bc4:	cf 91       	pop	r28
 bc6:	1f 91       	pop	r17
 bc8:	0f 91       	pop	r16
 bca:	08 95       	ret

00000bcc <strnlen_P>:
 bcc:	fc 01       	movw	r30, r24
 bce:	05 90       	lpm	r0, Z+
 bd0:	61 50       	subi	r22, 0x01	; 1
 bd2:	70 40       	sbci	r23, 0x00	; 0
 bd4:	01 10       	cpse	r0, r1
 bd6:	d8 f7       	brcc	.-10     	; 0xbce <strnlen_P+0x2>
 bd8:	80 95       	com	r24
 bda:	90 95       	com	r25
 bdc:	8e 0f       	add	r24, r30
 bde:	9f 1f       	adc	r25, r31
 be0:	08 95       	ret

00000be2 <memset>:
 be2:	dc 01       	movw	r26, r24
 be4:	01 c0       	rjmp	.+2      	; 0xbe8 <memset+0x6>
 be6:	6d 93       	st	X+, r22
 be8:	41 50       	subi	r20, 0x01	; 1
 bea:	50 40       	sbci	r21, 0x00	; 0
 bec:	e0 f7       	brcc	.-8      	; 0xbe6 <memset+0x4>
 bee:	08 95       	ret

00000bf0 <strnlen>:
 bf0:	fc 01       	movw	r30, r24
 bf2:	61 50       	subi	r22, 0x01	; 1
 bf4:	70 40       	sbci	r23, 0x00	; 0
 bf6:	01 90       	ld	r0, Z+
 bf8:	01 10       	cpse	r0, r1
 bfa:	d8 f7       	brcc	.-10     	; 0xbf2 <strnlen+0x2>
 bfc:	80 95       	com	r24
 bfe:	90 95       	com	r25
 c00:	8e 0f       	add	r24, r30
 c02:	9f 1f       	adc	r25, r31
 c04:	08 95       	ret

00000c06 <fputc>:
 c06:	0f 93       	push	r16
 c08:	1f 93       	push	r17
 c0a:	cf 93       	push	r28
 c0c:	df 93       	push	r29
 c0e:	fb 01       	movw	r30, r22
 c10:	23 81       	ldd	r18, Z+3	; 0x03
 c12:	21 fd       	sbrc	r18, 1
 c14:	03 c0       	rjmp	.+6      	; 0xc1c <fputc+0x16>
 c16:	8f ef       	ldi	r24, 0xFF	; 255
 c18:	9f ef       	ldi	r25, 0xFF	; 255
 c1a:	28 c0       	rjmp	.+80     	; 0xc6c <fputc+0x66>
 c1c:	22 ff       	sbrs	r18, 2
 c1e:	16 c0       	rjmp	.+44     	; 0xc4c <fputc+0x46>
 c20:	46 81       	ldd	r20, Z+6	; 0x06
 c22:	57 81       	ldd	r21, Z+7	; 0x07
 c24:	24 81       	ldd	r18, Z+4	; 0x04
 c26:	35 81       	ldd	r19, Z+5	; 0x05
 c28:	42 17       	cp	r20, r18
 c2a:	53 07       	cpc	r21, r19
 c2c:	44 f4       	brge	.+16     	; 0xc3e <fputc+0x38>
 c2e:	a0 81       	ld	r26, Z
 c30:	b1 81       	ldd	r27, Z+1	; 0x01
 c32:	9d 01       	movw	r18, r26
 c34:	2f 5f       	subi	r18, 0xFF	; 255
 c36:	3f 4f       	sbci	r19, 0xFF	; 255
 c38:	31 83       	std	Z+1, r19	; 0x01
 c3a:	20 83       	st	Z, r18
 c3c:	8c 93       	st	X, r24
 c3e:	26 81       	ldd	r18, Z+6	; 0x06
 c40:	37 81       	ldd	r19, Z+7	; 0x07
 c42:	2f 5f       	subi	r18, 0xFF	; 255
 c44:	3f 4f       	sbci	r19, 0xFF	; 255
 c46:	37 83       	std	Z+7, r19	; 0x07
 c48:	26 83       	std	Z+6, r18	; 0x06
 c4a:	10 c0       	rjmp	.+32     	; 0xc6c <fputc+0x66>
 c4c:	eb 01       	movw	r28, r22
 c4e:	09 2f       	mov	r16, r25
 c50:	18 2f       	mov	r17, r24
 c52:	00 84       	ldd	r0, Z+8	; 0x08
 c54:	f1 85       	ldd	r31, Z+9	; 0x09
 c56:	e0 2d       	mov	r30, r0
 c58:	09 95       	icall
 c5a:	89 2b       	or	r24, r25
 c5c:	e1 f6       	brne	.-72     	; 0xc16 <fputc+0x10>
 c5e:	8e 81       	ldd	r24, Y+6	; 0x06
 c60:	9f 81       	ldd	r25, Y+7	; 0x07
 c62:	01 96       	adiw	r24, 0x01	; 1
 c64:	9f 83       	std	Y+7, r25	; 0x07
 c66:	8e 83       	std	Y+6, r24	; 0x06
 c68:	81 2f       	mov	r24, r17
 c6a:	90 2f       	mov	r25, r16
 c6c:	df 91       	pop	r29
 c6e:	cf 91       	pop	r28
 c70:	1f 91       	pop	r17
 c72:	0f 91       	pop	r16
 c74:	08 95       	ret

00000c76 <__ultoa_invert>:
 c76:	fa 01       	movw	r30, r20
 c78:	aa 27       	eor	r26, r26
 c7a:	28 30       	cpi	r18, 0x08	; 8
 c7c:	51 f1       	breq	.+84     	; 0xcd2 <__ultoa_invert+0x5c>
 c7e:	20 31       	cpi	r18, 0x10	; 16
 c80:	81 f1       	breq	.+96     	; 0xce2 <__ultoa_invert+0x6c>
 c82:	e8 94       	clt
 c84:	6f 93       	push	r22
 c86:	6e 7f       	andi	r22, 0xFE	; 254
 c88:	6e 5f       	subi	r22, 0xFE	; 254
 c8a:	7f 4f       	sbci	r23, 0xFF	; 255
 c8c:	8f 4f       	sbci	r24, 0xFF	; 255
 c8e:	9f 4f       	sbci	r25, 0xFF	; 255
 c90:	af 4f       	sbci	r26, 0xFF	; 255
 c92:	b1 e0       	ldi	r27, 0x01	; 1
 c94:	3e d0       	rcall	.+124    	; 0xd12 <__ultoa_invert+0x9c>
 c96:	b4 e0       	ldi	r27, 0x04	; 4
 c98:	3c d0       	rcall	.+120    	; 0xd12 <__ultoa_invert+0x9c>
 c9a:	67 0f       	add	r22, r23
 c9c:	78 1f       	adc	r23, r24
 c9e:	89 1f       	adc	r24, r25
 ca0:	9a 1f       	adc	r25, r26
 ca2:	a1 1d       	adc	r26, r1
 ca4:	68 0f       	add	r22, r24
 ca6:	79 1f       	adc	r23, r25
 ca8:	8a 1f       	adc	r24, r26
 caa:	91 1d       	adc	r25, r1
 cac:	a1 1d       	adc	r26, r1
 cae:	6a 0f       	add	r22, r26
 cb0:	71 1d       	adc	r23, r1
 cb2:	81 1d       	adc	r24, r1
 cb4:	91 1d       	adc	r25, r1
 cb6:	a1 1d       	adc	r26, r1
 cb8:	20 d0       	rcall	.+64     	; 0xcfa <__ultoa_invert+0x84>
 cba:	09 f4       	brne	.+2      	; 0xcbe <__ultoa_invert+0x48>
 cbc:	68 94       	set
 cbe:	3f 91       	pop	r19
 cc0:	2a e0       	ldi	r18, 0x0A	; 10
 cc2:	26 9f       	mul	r18, r22
 cc4:	11 24       	eor	r1, r1
 cc6:	30 19       	sub	r19, r0
 cc8:	30 5d       	subi	r19, 0xD0	; 208
 cca:	31 93       	st	Z+, r19
 ccc:	de f6       	brtc	.-74     	; 0xc84 <__ultoa_invert+0xe>
 cce:	cf 01       	movw	r24, r30
 cd0:	08 95       	ret
 cd2:	46 2f       	mov	r20, r22
 cd4:	47 70       	andi	r20, 0x07	; 7
 cd6:	40 5d       	subi	r20, 0xD0	; 208
 cd8:	41 93       	st	Z+, r20
 cda:	b3 e0       	ldi	r27, 0x03	; 3
 cdc:	0f d0       	rcall	.+30     	; 0xcfc <__ultoa_invert+0x86>
 cde:	c9 f7       	brne	.-14     	; 0xcd2 <__ultoa_invert+0x5c>
 ce0:	f6 cf       	rjmp	.-20     	; 0xcce <__ultoa_invert+0x58>
 ce2:	46 2f       	mov	r20, r22
 ce4:	4f 70       	andi	r20, 0x0F	; 15
 ce6:	40 5d       	subi	r20, 0xD0	; 208
 ce8:	4a 33       	cpi	r20, 0x3A	; 58
 cea:	18 f0       	brcs	.+6      	; 0xcf2 <__ultoa_invert+0x7c>
 cec:	49 5d       	subi	r20, 0xD9	; 217
 cee:	31 fd       	sbrc	r19, 1
 cf0:	40 52       	subi	r20, 0x20	; 32
 cf2:	41 93       	st	Z+, r20
 cf4:	02 d0       	rcall	.+4      	; 0xcfa <__ultoa_invert+0x84>
 cf6:	a9 f7       	brne	.-22     	; 0xce2 <__ultoa_invert+0x6c>
 cf8:	ea cf       	rjmp	.-44     	; 0xcce <__ultoa_invert+0x58>
 cfa:	b4 e0       	ldi	r27, 0x04	; 4
 cfc:	a6 95       	lsr	r26
 cfe:	97 95       	ror	r25
 d00:	87 95       	ror	r24
 d02:	77 95       	ror	r23
 d04:	67 95       	ror	r22
 d06:	ba 95       	dec	r27
 d08:	c9 f7       	brne	.-14     	; 0xcfc <__ultoa_invert+0x86>
 d0a:	00 97       	sbiw	r24, 0x00	; 0
 d0c:	61 05       	cpc	r22, r1
 d0e:	71 05       	cpc	r23, r1
 d10:	08 95       	ret
 d12:	9b 01       	movw	r18, r22
 d14:	ac 01       	movw	r20, r24
 d16:	0a 2e       	mov	r0, r26
 d18:	06 94       	lsr	r0
 d1a:	57 95       	ror	r21
 d1c:	47 95       	ror	r20
 d1e:	37 95       	ror	r19
 d20:	27 95       	ror	r18
 d22:	ba 95       	dec	r27
 d24:	c9 f7       	brne	.-14     	; 0xd18 <__ultoa_invert+0xa2>
 d26:	62 0f       	add	r22, r18
 d28:	73 1f       	adc	r23, r19
 d2a:	84 1f       	adc	r24, r20
 d2c:	95 1f       	adc	r25, r21
 d2e:	a0 1d       	adc	r26, r0
 d30:	08 95       	ret

00000d32 <_exit>:
 d32:	f8 94       	cli

00000d34 <__stop_program>:
 d34:	ff cf       	rjmp	.-2      	; 0xd34 <__stop_program>
