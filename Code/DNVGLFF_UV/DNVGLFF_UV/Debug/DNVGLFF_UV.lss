
DNVGLFF_UV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000ce2  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080015e  0080015e  00000dd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007dd  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000048e  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000658  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000021e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000285  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000641  00000000  00000000  00002649  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002c8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e2 ee       	ldi	r30, 0xE2	; 226
  a8:	fc e0       	ldi	r31, 0x0C	; 12
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 35       	cpi	r26, 0x5E	; 94
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	ae e5       	ldi	r26, 0x5E	; 94
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a1 39       	cpi	r26, 0x91	; 145
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	7e d1       	rcall	.+764    	; 0x3c8 <main>
  cc:	08 c6       	rjmp	.+3088   	; 0xcde <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <__vector_18>:
        CANIDT4 = 1<<RTRTAG;
		CANCDMOB|=packet->length;
		}
    CANCDMOB|=0x40; //enable TX
	return TRUE;
	}
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	cf 93       	push	r28
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
  f8:	ed ee       	ldi	r30, 0xED	; 237
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	c0 81       	ld	r28, Z
  fe:	80 91 ec 00 	lds	r24, 0x00EC
 102:	68 2f       	mov	r22, r24
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	80 83       	st	Z, r24
 10a:	72 95       	swap	r23
 10c:	62 95       	swap	r22
 10e:	6f 70       	andi	r22, 0x0F	; 15
 110:	67 27       	eor	r22, r23
 112:	7f 70       	andi	r23, 0x0F	; 15
 114:	67 27       	eor	r22, r23
 116:	80 91 ee 00 	lds	r24, 0x00EE
 11a:	8f 75       	andi	r24, 0x5F	; 95
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_18+0x50>
 11e:	98 95       	break
 120:	20 91 f2 00 	lds	r18, 0x00F2
 124:	80 91 f3 00 	lds	r24, 0x00F3
 128:	ee e5       	ldi	r30, 0x5E	; 94
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	22 95       	swap	r18
 13c:	26 95       	lsr	r18
 13e:	27 70       	andi	r18, 0x07	; 7
 140:	82 2b       	or	r24, r18
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
 146:	80 91 ef 00 	lds	r24, 0x00EF
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	59 f0       	breq	.+22     	; 0x16a <__vector_18+0x9a>
 154:	e1 e6       	ldi	r30, 0x61	; 97
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	8f 59       	subi	r24, 0x9F	; 159
 15a:	9e 4f       	sbci	r25, 0xFE	; 254
 15c:	aa ef       	ldi	r26, 0xFA	; 250
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	2c 91       	ld	r18, X
 162:	21 93       	st	Z+, r18
 164:	e8 17       	cp	r30, r24
 166:	f9 07       	cpc	r31, r25
 168:	d9 f7       	brne	.-10     	; 0x160 <__vector_18+0x90>
 16a:	10 92 ee 00 	sts	0x00EE, r1
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 ef 00 	sts	0x00EF, r24
 174:	fb 01       	movw	r30, r22
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e7 59       	subi	r30, 0x97	; 151
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	01 90       	ld	r0, Z+
 180:	f0 81       	ld	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	8e e5       	ldi	r24, 0x5E	; 94
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	09 95       	icall
 18a:	c0 93 ed 00 	sts	0x00ED, r28
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <prepare_rx>:

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
 1b6:	8f 30       	cpi	r24, 0x0F	; 15
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <prepare_rx+0x6>
 1ba:	6d c0       	rjmp	.+218    	; 0x296 <prepare_rx+0xe0>
		return TRUE;
	canlist[ (unsigned)mob]=callback;
 1bc:	e8 2f       	mov	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e7 59       	subi	r30, 0x97	; 151
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	31 83       	std	Z+1, r19	; 0x01
 1ca:	20 83       	st	Z, r18
    CANPAGE = mob << 4;
 1cc:	98 2f       	mov	r25, r24
 1ce:	92 95       	swap	r25
 1d0:	90 7f       	andi	r25, 0xF0	; 240
 1d2:	90 93 ed 00 	sts	0x00ED, r25
	if( callback==0)			// release this MOB 
 1d6:	23 2b       	or	r18, r19
 1d8:	d9 f4       	brne	.+54     	; 0x210 <prepare_rx+0x5a>
		{
		CANSTMOB = 0x00;    	// cancel pending operation
 1da:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0x00;
 1de:	10 92 ef 00 	sts	0x00EF, r1
		unsigned mask=1<<mob;
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	a9 01       	movw	r20, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <prepare_rx+0x38>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <prepare_rx+0x34>
 1f2:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
 1f4:	ee ed       	ldi	r30, 0xDE	; 222
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	20 81       	ld	r18, Z
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
 200:	ef ed       	ldi	r30, 0xDF	; 223
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	90 95       	com	r25
 208:	89 23       	and	r24, r25
 20a:	80 83       	st	Z, r24
		return FALSE;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
 210:	90 91 ef 00 	lds	r25, 0x00EF
 214:	90 7c       	andi	r25, 0xC0	; 192
 216:	09 f0       	breq	.+2      	; 0x21a <prepare_rx+0x64>
 218:	40 c0       	rjmp	.+128    	; 0x29a <prepare_rx+0xe4>
		return TRUE;			// no vacancy ...
	CANSTMOB = 0x00;    	// cancel pending operation 
 21a:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;		
 21e:	ef ee       	ldi	r30, 0xEF	; 239
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	10 82       	st	Z, r1
	CANHPMOB = 0x00;		// enable direct mob indexing, see doc
 224:	10 92 ec 00 	sts	0x00EC, r1
	CANIDT1=id >>3;
 228:	9b 01       	movw	r18, r22
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	36 95       	lsr	r19
 234:	27 95       	ror	r18
 236:	20 93 f3 00 	sts	0x00F3, r18
	CANIDT2=id <<5;
 23a:	62 95       	swap	r22
 23c:	66 0f       	add	r22, r22
 23e:	60 7e       	andi	r22, 0xE0	; 224
 240:	60 93 f2 00 	sts	0x00F2, r22
	CANIDM1=idmask >>3;
 244:	9a 01       	movw	r18, r20
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	20 93 f7 00 	sts	0x00F7, r18
	CANIDM2=idmask <<5;
 256:	42 95       	swap	r20
 258:	44 0f       	add	r20, r20
 25a:	40 7e       	andi	r20, 0xE0	; 224
 25c:	40 93 f6 00 	sts	0x00F6, r20
	CANIDM3=0;
 260:	10 92 f5 00 	sts	0x00F5, r1
	CANIDM4=0;
 264:	10 92 f4 00 	sts	0x00F4, r1
	CANCDMOB=0x80; // enable RX
 268:	90 e8       	ldi	r25, 0x80	; 128
 26a:	90 83       	st	Z, r25
	unsigned mask=1<<mob;
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	a9 01       	movw	r20, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <prepare_rx+0xc2>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <prepare_rx+0xbe>
 27c:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
 27e:	ee ed       	ldi	r30, 0xDE	; 222
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	20 81       	ld	r18, Z
 284:	82 2b       	or	r24, r18
 286:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
 288:	ef ed       	ldi	r30, 0xDF	; 223
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	89 2b       	or	r24, r25
 290:	80 83       	st	Z, r24
	return FALSE;
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
	}

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
		return TRUE;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return FALSE;
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
		return TRUE;			// no vacancy ...
 29a:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return FALSE;
	}
 29c:	08 95       	ret

0000029e <can_init>:

void can_init( void)
	{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	unsigned mob;
//! \bug different baud rate support not implemented yet 
#if F_CPU == 8000000
	//Old implementation
	CANBT1=0x06;	// 8MHz, 100kbit/s
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2=0x0c;
 2a8:	8c e0       	ldi	r24, 0x0C	; 12
 2aa:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3=0x5a;
 2ae:	8a e5       	ldi	r24, 0x5A	; 90
 2b0:	80 93 e4 00 	sts	0x00E4, r24
 2b4:	80 e0       	ldi	r24, 0x00	; 0
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2b6:	cd ee       	ldi	r28, 0xED	; 237
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
 2ba:	ae ee       	ldi	r26, 0xEE	; 238
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
 2be:	ef ee       	ldi	r30, 0xEF	; 239
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2c2:	98 2f       	mov	r25, r24
 2c4:	92 95       	swap	r25
 2c6:	90 7f       	andi	r25, 0xF0	; 240
 2c8:	98 83       	st	Y, r25
		CANSTMOB = 0;
 2ca:	1c 92       	st	X, r1
		CANCDMOB = 0;
 2cc:	10 82       	st	Z, r1
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
#else
	CANBT1=0x26;	// 16 MHz, 100kbit/s
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
 2d0:	8f 30       	cpi	r24, 0x0F	; 15
 2d2:	b9 f7       	brne	.-18     	; 0x2c2 <can_init+0x24>
		{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
		}
	CANGCON |= 0x02;
 2d4:	e8 ed       	ldi	r30, 0xD8	; 216
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX);
 2de:	80 ea       	ldi	r24, 0xA0	; 160
 2e0:	80 93 db 00 	sts	0x00DB, r24
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <CAN_messageRX>:
#include <util/delay.h>
#include <stdio.h>

#include "LED.h"

void CAN_messageRX(CAN_packet *p, unsigned char mob) {		
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	fc 01       	movw	r30, r24
	//USART_tx_string("\n\rMessage received!");
	toggle_bit(DDRB, PB6);
 2fc:	84 b1       	in	r24, 0x04	; 4
 2fe:	90 e4       	ldi	r25, 0x40	; 64
 300:	98 27       	eor	r25, r24
 302:	94 b9       	out	0x04, r25	; 4
// 		printf("\r\nSpeed - %u m/s", data);
// 	}
	/***********************************************************
	Printing function for the throttle input
	***********************************************************/
	if (p->id == 15) {
 304:	80 81       	ld	r24, Z
 306:	91 81       	ldd	r25, Z+1	; 0x01
 308:	0f 97       	sbiw	r24, 0x0f	; 15
 30a:	09 f0       	breq	.+2      	; 0x30e <CAN_messageRX+0x24>
 30c:	45 c0       	rjmp	.+138    	; 0x398 <CAN_messageRX+0xae>
 30e:	8f 01       	movw	r16, r30
		printf("\r\nMessage ID - %d", p->id);
 310:	1f 92       	push	r1
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	8f 93       	push	r24
 316:	86 e0       	ldi	r24, 0x06	; 6
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	9f 93       	push	r25
 31c:	8f 93       	push	r24
 31e:	df d0       	rcall	.+446    	; 0x4de <printf>
		printf("\r\nMessage length - %d", p->length);
 320:	f8 01       	movw	r30, r16
 322:	82 81       	ldd	r24, Z+2	; 0x02
 324:	1f 92       	push	r1
 326:	8f 93       	push	r24
 328:	88 e1       	ldi	r24, 0x18	; 24
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	9f 93       	push	r25
 32e:	8f 93       	push	r24
 330:	d6 d0       	rcall	.+428    	; 0x4de <printf>
		for(int i = 0; i < p->length; i++) {
 332:	f8 01       	movw	r30, r16
 334:	82 81       	ldd	r24, Z+2	; 0x02
 336:	2d b7       	in	r18, 0x3d	; 61
 338:	3e b7       	in	r19, 0x3e	; 62
 33a:	28 5f       	subi	r18, 0xF8	; 248
 33c:	3f 4f       	sbci	r19, 0xFF	; 255
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	3e bf       	out	0x3e, r19	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	2d bf       	out	0x3d, r18	; 61
 348:	88 23       	and	r24, r24
 34a:	19 f1       	breq	.+70     	; 0x392 <CAN_messageRX+0xa8>
 34c:	68 01       	movw	r12, r16
 34e:	33 e0       	ldi	r19, 0x03	; 3
 350:	c3 0e       	add	r12, r19
 352:	d1 1c       	adc	r13, r1
 354:	c0 e0       	ldi	r28, 0x00	; 0
 356:	d0 e0       	ldi	r29, 0x00	; 0
			
			printf("\r\nData[%d] received - %u", i, p->data[i]);
 358:	0f 2e       	mov	r0, r31
 35a:	fe e2       	ldi	r31, 0x2E	; 46
 35c:	ef 2e       	mov	r14, r31
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	ff 2e       	mov	r15, r31
 362:	f0 2d       	mov	r31, r0
 364:	f6 01       	movw	r30, r12
 366:	81 91       	ld	r24, Z+
 368:	6f 01       	movw	r12, r30
 36a:	1f 92       	push	r1
 36c:	8f 93       	push	r24
 36e:	df 93       	push	r29
 370:	cf 93       	push	r28
 372:	ff 92       	push	r15
 374:	ef 92       	push	r14
 376:	b3 d0       	rcall	.+358    	; 0x4de <printf>
	Printing function for the throttle input
	***********************************************************/
	if (p->id == 15) {
		printf("\r\nMessage ID - %d", p->id);
		printf("\r\nMessage length - %d", p->length);
		for(int i = 0; i < p->length; i++) {
 378:	21 96       	adiw	r28, 0x01	; 1
 37a:	f8 01       	movw	r30, r16
 37c:	22 81       	ldd	r18, Z+2	; 0x02
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	c2 17       	cp	r28, r18
 38e:	d3 07       	cpc	r29, r19
 390:	4c f3       	brlt	.-46     	; 0x364 <CAN_messageRX+0x7a>
			
			printf("\r\nData[%d] received - %u", i, p->data[i]);
		}
		printf("\n");
 392:	8a e0       	ldi	r24, 0x0A	; 10
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	b6 d0       	rcall	.+364    	; 0x504 <putchar>
	}
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	08 95       	ret

000003aa <inits>:

void inits(void) {
	can_init();
 3aa:	79 df       	rcall	.-270    	; 0x29e <can_init>
	USART_init(MYUBRR, true);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	83 e3       	ldi	r24, 0x33	; 51
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	2f d0       	rcall	.+94     	; 0x412 <USART_init>
	printf("\r\nReceiver initialized");
 3b4:	87 e4       	ldi	r24, 0x47	; 71
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	9f 93       	push	r25
 3ba:	8f 93       	push	r24
 3bc:	90 d0       	rcall	.+288    	; 0x4de <printf>
	set_bit(DDRB, PB6);
 3be:	26 9a       	sbi	0x04, 6	; 4
	clear_bit(PORTB, PB6);
 3c0:	2e 98       	cbi	0x05, 6	; 5
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	08 95       	ret

000003c8 <main>:
}

int main(void) {
	inits();
 3c8:	f0 df       	rcall	.-32     	; 0x3aa <inits>

	DDRB |= (1<<DDB5);
 3ca:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= (1<<PB5);
 3cc:	2d 9a       	sbi	0x05, 5	; 5
	
	BOOL ret;	
	ret = prepare_rx(0, ID_steeringWheel, MASK_MOTOR_MODULE, CAN_messageRX);
 3ce:	25 e7       	ldi	r18, 0x75	; 117
 3d0:	31 e0       	ldi	r19, 0x01	; 1
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	6f e0       	ldi	r22, 0x0F	; 15
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	ec de       	rcall	.-552    	; 0x1b6 <prepare_rx>

	sei();
 3de:	78 94       	sei
	message.length = 1;
	message.data[0] = 0b000000;	// For message structure see front light module documentation
	
	while (true) {
		if(ret) {
			toggle_bit(DDRB, PB6);
 3e0:	20 e4       	ldi	r18, 0x40	; 64
	message.id = ID_lightsFront;
	message.length = 1;
	message.data[0] = 0b000000;	// For message structure see front light module documentation
	
	while (true) {
		if(ret) {
 3e2:	81 11       	cpse	r24, r1
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <main+0x20>
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <main+0x1e>
			toggle_bit(DDRB, PB6);
 3e8:	94 b1       	in	r25, 0x04	; 4
 3ea:	92 27       	eor	r25, r18
 3ec:	94 b9       	out	0x04, r25	; 4
 3ee:	f9 cf       	rjmp	.-14     	; 0x3e2 <main+0x1a>

000003f0 <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 3f0:	e0 ec       	ldi	r30, 0xC0	; 192
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	90 81       	ld	r25, Z
 3f6:	95 ff       	sbrs	r25, 5
 3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 3fa:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	08 95       	ret

00000402 <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 402:	e0 ec       	ldi	r30, 0xC0	; 192
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	88 23       	and	r24, r24
 40a:	ec f7       	brge	.-6      	; 0x406 <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 40c:	80 91 c6 00 	lds	r24, 0x00C6
}
 410:	08 95       	ret

00000412 <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 412:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 416:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 41a:	86 e0       	ldi	r24, 0x06	; 6
 41c:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 420:	66 23       	and	r22, r22
 422:	41 f0       	breq	.+16     	; 0x434 <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 424:	e1 ec       	ldi	r30, 0xC1	; 193
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	80 61       	ori	r24, 0x10	; 16
 42c:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 42e:	80 81       	ld	r24, Z
 430:	88 60       	ori	r24, 0x08	; 8
 432:	80 83       	st	Z, r24
	}
	set_bit(UCSR0B, RXCIE0);
 434:	e1 ec       	ldi	r30, 0xC1	; 193
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	80 68       	ori	r24, 0x80	; 128
 43c:	80 83       	st	Z, r24
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	72 e0       	ldi	r23, 0x02	; 2
 442:	88 ef       	ldi	r24, 0xF8	; 248
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	01 c0       	rjmp	.+2      	; 0x44a <fdevopen>
 448:	08 95       	ret

0000044a <fdevopen>:
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	00 97       	sbiw	r24, 0x00	; 0
 454:	31 f4       	brne	.+12     	; 0x462 <fdevopen+0x18>
 456:	61 15       	cp	r22, r1
 458:	71 05       	cpc	r23, r1
 45a:	19 f4       	brne	.+6      	; 0x462 <fdevopen+0x18>
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	39 c0       	rjmp	.+114    	; 0x4d4 <fdevopen+0x8a>
 462:	8b 01       	movw	r16, r22
 464:	ec 01       	movw	r28, r24
 466:	6e e0       	ldi	r22, 0x0E	; 14
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	3d d2       	rcall	.+1146   	; 0x8ea <calloc>
 470:	fc 01       	movw	r30, r24
 472:	89 2b       	or	r24, r25
 474:	99 f3       	breq	.-26     	; 0x45c <fdevopen+0x12>
 476:	80 e8       	ldi	r24, 0x80	; 128
 478:	83 83       	std	Z+3, r24	; 0x03
 47a:	01 15       	cp	r16, r1
 47c:	11 05       	cpc	r17, r1
 47e:	71 f0       	breq	.+28     	; 0x49c <fdevopen+0x52>
 480:	13 87       	std	Z+11, r17	; 0x0b
 482:	02 87       	std	Z+10, r16	; 0x0a
 484:	81 e8       	ldi	r24, 0x81	; 129
 486:	83 83       	std	Z+3, r24	; 0x03
 488:	80 91 87 01 	lds	r24, 0x0187
 48c:	90 91 88 01 	lds	r25, 0x0188
 490:	89 2b       	or	r24, r25
 492:	21 f4       	brne	.+8      	; 0x49c <fdevopen+0x52>
 494:	f0 93 88 01 	sts	0x0188, r31
 498:	e0 93 87 01 	sts	0x0187, r30
 49c:	20 97       	sbiw	r28, 0x00	; 0
 49e:	c9 f0       	breq	.+50     	; 0x4d2 <fdevopen+0x88>
 4a0:	d1 87       	std	Z+9, r29	; 0x09
 4a2:	c0 87       	std	Z+8, r28	; 0x08
 4a4:	83 81       	ldd	r24, Z+3	; 0x03
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	83 83       	std	Z+3, r24	; 0x03
 4aa:	80 91 89 01 	lds	r24, 0x0189
 4ae:	90 91 8a 01 	lds	r25, 0x018A
 4b2:	89 2b       	or	r24, r25
 4b4:	71 f4       	brne	.+28     	; 0x4d2 <fdevopen+0x88>
 4b6:	f0 93 8a 01 	sts	0x018A, r31
 4ba:	e0 93 89 01 	sts	0x0189, r30
 4be:	80 91 8b 01 	lds	r24, 0x018B
 4c2:	90 91 8c 01 	lds	r25, 0x018C
 4c6:	89 2b       	or	r24, r25
 4c8:	21 f4       	brne	.+8      	; 0x4d2 <fdevopen+0x88>
 4ca:	f0 93 8c 01 	sts	0x018C, r31
 4ce:	e0 93 8b 01 	sts	0x018B, r30
 4d2:	cf 01       	movw	r24, r30
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	08 95       	ret

000004de <printf>:
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	ae 01       	movw	r20, r28
 4e8:	4b 5f       	subi	r20, 0xFB	; 251
 4ea:	5f 4f       	sbci	r21, 0xFF	; 255
 4ec:	fa 01       	movw	r30, r20
 4ee:	61 91       	ld	r22, Z+
 4f0:	71 91       	ld	r23, Z+
 4f2:	af 01       	movw	r20, r30
 4f4:	80 91 89 01 	lds	r24, 0x0189
 4f8:	90 91 8a 01 	lds	r25, 0x018A
 4fc:	08 d0       	rcall	.+16     	; 0x50e <vfprintf>
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <putchar>:
 504:	60 91 89 01 	lds	r22, 0x0189
 508:	70 91 8a 01 	lds	r23, 0x018A
 50c:	52 c3       	rjmp	.+1700   	; 0xbb2 <fputc>

0000050e <vfprintf>:
 50e:	2f 92       	push	r2
 510:	3f 92       	push	r3
 512:	4f 92       	push	r4
 514:	5f 92       	push	r5
 516:	6f 92       	push	r6
 518:	7f 92       	push	r7
 51a:	8f 92       	push	r8
 51c:	9f 92       	push	r9
 51e:	af 92       	push	r10
 520:	bf 92       	push	r11
 522:	cf 92       	push	r12
 524:	df 92       	push	r13
 526:	ef 92       	push	r14
 528:	ff 92       	push	r15
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	2c 97       	sbiw	r28, 0x0c	; 12
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	7c 01       	movw	r14, r24
 544:	6b 01       	movw	r12, r22
 546:	8a 01       	movw	r16, r20
 548:	fc 01       	movw	r30, r24
 54a:	17 82       	std	Z+7, r1	; 0x07
 54c:	16 82       	std	Z+6, r1	; 0x06
 54e:	83 81       	ldd	r24, Z+3	; 0x03
 550:	81 ff       	sbrs	r24, 1
 552:	b0 c1       	rjmp	.+864    	; 0x8b4 <vfprintf+0x3a6>
 554:	ce 01       	movw	r24, r28
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	4c 01       	movw	r8, r24
 55a:	f7 01       	movw	r30, r14
 55c:	93 81       	ldd	r25, Z+3	; 0x03
 55e:	f6 01       	movw	r30, r12
 560:	93 fd       	sbrc	r25, 3
 562:	85 91       	lpm	r24, Z+
 564:	93 ff       	sbrs	r25, 3
 566:	81 91       	ld	r24, Z+
 568:	6f 01       	movw	r12, r30
 56a:	88 23       	and	r24, r24
 56c:	09 f4       	brne	.+2      	; 0x570 <vfprintf+0x62>
 56e:	9e c1       	rjmp	.+828    	; 0x8ac <vfprintf+0x39e>
 570:	85 32       	cpi	r24, 0x25	; 37
 572:	39 f4       	brne	.+14     	; 0x582 <vfprintf+0x74>
 574:	93 fd       	sbrc	r25, 3
 576:	85 91       	lpm	r24, Z+
 578:	93 ff       	sbrs	r25, 3
 57a:	81 91       	ld	r24, Z+
 57c:	6f 01       	movw	r12, r30
 57e:	85 32       	cpi	r24, 0x25	; 37
 580:	21 f4       	brne	.+8      	; 0x58a <vfprintf+0x7c>
 582:	b7 01       	movw	r22, r14
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	15 d3       	rcall	.+1578   	; 0xbb2 <fputc>
 588:	e8 cf       	rjmp	.-48     	; 0x55a <vfprintf+0x4c>
 58a:	51 2c       	mov	r5, r1
 58c:	31 2c       	mov	r3, r1
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	20 32       	cpi	r18, 0x20	; 32
 592:	a0 f4       	brcc	.+40     	; 0x5bc <vfprintf+0xae>
 594:	8b 32       	cpi	r24, 0x2B	; 43
 596:	69 f0       	breq	.+26     	; 0x5b2 <vfprintf+0xa4>
 598:	30 f4       	brcc	.+12     	; 0x5a6 <vfprintf+0x98>
 59a:	80 32       	cpi	r24, 0x20	; 32
 59c:	59 f0       	breq	.+22     	; 0x5b4 <vfprintf+0xa6>
 59e:	83 32       	cpi	r24, 0x23	; 35
 5a0:	69 f4       	brne	.+26     	; 0x5bc <vfprintf+0xae>
 5a2:	20 61       	ori	r18, 0x10	; 16
 5a4:	2c c0       	rjmp	.+88     	; 0x5fe <vfprintf+0xf0>
 5a6:	8d 32       	cpi	r24, 0x2D	; 45
 5a8:	39 f0       	breq	.+14     	; 0x5b8 <vfprintf+0xaa>
 5aa:	80 33       	cpi	r24, 0x30	; 48
 5ac:	39 f4       	brne	.+14     	; 0x5bc <vfprintf+0xae>
 5ae:	21 60       	ori	r18, 0x01	; 1
 5b0:	26 c0       	rjmp	.+76     	; 0x5fe <vfprintf+0xf0>
 5b2:	22 60       	ori	r18, 0x02	; 2
 5b4:	24 60       	ori	r18, 0x04	; 4
 5b6:	23 c0       	rjmp	.+70     	; 0x5fe <vfprintf+0xf0>
 5b8:	28 60       	ori	r18, 0x08	; 8
 5ba:	21 c0       	rjmp	.+66     	; 0x5fe <vfprintf+0xf0>
 5bc:	27 fd       	sbrc	r18, 7
 5be:	27 c0       	rjmp	.+78     	; 0x60e <vfprintf+0x100>
 5c0:	30 ed       	ldi	r19, 0xD0	; 208
 5c2:	38 0f       	add	r19, r24
 5c4:	3a 30       	cpi	r19, 0x0A	; 10
 5c6:	78 f4       	brcc	.+30     	; 0x5e6 <vfprintf+0xd8>
 5c8:	26 ff       	sbrs	r18, 6
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <vfprintf+0xca>
 5cc:	fa e0       	ldi	r31, 0x0A	; 10
 5ce:	5f 9e       	mul	r5, r31
 5d0:	30 0d       	add	r19, r0
 5d2:	11 24       	eor	r1, r1
 5d4:	53 2e       	mov	r5, r19
 5d6:	13 c0       	rjmp	.+38     	; 0x5fe <vfprintf+0xf0>
 5d8:	8a e0       	ldi	r24, 0x0A	; 10
 5da:	38 9e       	mul	r3, r24
 5dc:	30 0d       	add	r19, r0
 5de:	11 24       	eor	r1, r1
 5e0:	33 2e       	mov	r3, r19
 5e2:	20 62       	ori	r18, 0x20	; 32
 5e4:	0c c0       	rjmp	.+24     	; 0x5fe <vfprintf+0xf0>
 5e6:	8e 32       	cpi	r24, 0x2E	; 46
 5e8:	21 f4       	brne	.+8      	; 0x5f2 <vfprintf+0xe4>
 5ea:	26 fd       	sbrc	r18, 6
 5ec:	5f c1       	rjmp	.+702    	; 0x8ac <vfprintf+0x39e>
 5ee:	20 64       	ori	r18, 0x40	; 64
 5f0:	06 c0       	rjmp	.+12     	; 0x5fe <vfprintf+0xf0>
 5f2:	8c 36       	cpi	r24, 0x6C	; 108
 5f4:	11 f4       	brne	.+4      	; 0x5fa <vfprintf+0xec>
 5f6:	20 68       	ori	r18, 0x80	; 128
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <vfprintf+0xf0>
 5fa:	88 36       	cpi	r24, 0x68	; 104
 5fc:	41 f4       	brne	.+16     	; 0x60e <vfprintf+0x100>
 5fe:	f6 01       	movw	r30, r12
 600:	93 fd       	sbrc	r25, 3
 602:	85 91       	lpm	r24, Z+
 604:	93 ff       	sbrs	r25, 3
 606:	81 91       	ld	r24, Z+
 608:	6f 01       	movw	r12, r30
 60a:	81 11       	cpse	r24, r1
 60c:	c1 cf       	rjmp	.-126    	; 0x590 <vfprintf+0x82>
 60e:	98 2f       	mov	r25, r24
 610:	9f 7d       	andi	r25, 0xDF	; 223
 612:	95 54       	subi	r25, 0x45	; 69
 614:	93 30       	cpi	r25, 0x03	; 3
 616:	28 f4       	brcc	.+10     	; 0x622 <vfprintf+0x114>
 618:	0c 5f       	subi	r16, 0xFC	; 252
 61a:	1f 4f       	sbci	r17, 0xFF	; 255
 61c:	ff e3       	ldi	r31, 0x3F	; 63
 61e:	f9 83       	std	Y+1, r31	; 0x01
 620:	0d c0       	rjmp	.+26     	; 0x63c <vfprintf+0x12e>
 622:	83 36       	cpi	r24, 0x63	; 99
 624:	31 f0       	breq	.+12     	; 0x632 <vfprintf+0x124>
 626:	83 37       	cpi	r24, 0x73	; 115
 628:	71 f0       	breq	.+28     	; 0x646 <vfprintf+0x138>
 62a:	83 35       	cpi	r24, 0x53	; 83
 62c:	09 f0       	breq	.+2      	; 0x630 <vfprintf+0x122>
 62e:	57 c0       	rjmp	.+174    	; 0x6de <vfprintf+0x1d0>
 630:	21 c0       	rjmp	.+66     	; 0x674 <vfprintf+0x166>
 632:	f8 01       	movw	r30, r16
 634:	80 81       	ld	r24, Z
 636:	89 83       	std	Y+1, r24	; 0x01
 638:	0e 5f       	subi	r16, 0xFE	; 254
 63a:	1f 4f       	sbci	r17, 0xFF	; 255
 63c:	44 24       	eor	r4, r4
 63e:	43 94       	inc	r4
 640:	51 2c       	mov	r5, r1
 642:	54 01       	movw	r10, r8
 644:	14 c0       	rjmp	.+40     	; 0x66e <vfprintf+0x160>
 646:	38 01       	movw	r6, r16
 648:	f2 e0       	ldi	r31, 0x02	; 2
 64a:	6f 0e       	add	r6, r31
 64c:	71 1c       	adc	r7, r1
 64e:	f8 01       	movw	r30, r16
 650:	a0 80       	ld	r10, Z
 652:	b1 80       	ldd	r11, Z+1	; 0x01
 654:	26 ff       	sbrs	r18, 6
 656:	03 c0       	rjmp	.+6      	; 0x65e <vfprintf+0x150>
 658:	65 2d       	mov	r22, r5
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <vfprintf+0x154>
 65e:	6f ef       	ldi	r22, 0xFF	; 255
 660:	7f ef       	ldi	r23, 0xFF	; 255
 662:	c5 01       	movw	r24, r10
 664:	2c 87       	std	Y+12, r18	; 0x0c
 666:	9a d2       	rcall	.+1332   	; 0xb9c <strnlen>
 668:	2c 01       	movw	r4, r24
 66a:	83 01       	movw	r16, r6
 66c:	2c 85       	ldd	r18, Y+12	; 0x0c
 66e:	2f 77       	andi	r18, 0x7F	; 127
 670:	22 2e       	mov	r2, r18
 672:	16 c0       	rjmp	.+44     	; 0x6a0 <vfprintf+0x192>
 674:	38 01       	movw	r6, r16
 676:	f2 e0       	ldi	r31, 0x02	; 2
 678:	6f 0e       	add	r6, r31
 67a:	71 1c       	adc	r7, r1
 67c:	f8 01       	movw	r30, r16
 67e:	a0 80       	ld	r10, Z
 680:	b1 80       	ldd	r11, Z+1	; 0x01
 682:	26 ff       	sbrs	r18, 6
 684:	03 c0       	rjmp	.+6      	; 0x68c <vfprintf+0x17e>
 686:	65 2d       	mov	r22, r5
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <vfprintf+0x182>
 68c:	6f ef       	ldi	r22, 0xFF	; 255
 68e:	7f ef       	ldi	r23, 0xFF	; 255
 690:	c5 01       	movw	r24, r10
 692:	2c 87       	std	Y+12, r18	; 0x0c
 694:	71 d2       	rcall	.+1250   	; 0xb78 <strnlen_P>
 696:	2c 01       	movw	r4, r24
 698:	2c 85       	ldd	r18, Y+12	; 0x0c
 69a:	20 68       	ori	r18, 0x80	; 128
 69c:	22 2e       	mov	r2, r18
 69e:	83 01       	movw	r16, r6
 6a0:	23 fc       	sbrc	r2, 3
 6a2:	19 c0       	rjmp	.+50     	; 0x6d6 <vfprintf+0x1c8>
 6a4:	83 2d       	mov	r24, r3
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	48 16       	cp	r4, r24
 6aa:	59 06       	cpc	r5, r25
 6ac:	a0 f4       	brcc	.+40     	; 0x6d6 <vfprintf+0x1c8>
 6ae:	b7 01       	movw	r22, r14
 6b0:	80 e2       	ldi	r24, 0x20	; 32
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	7e d2       	rcall	.+1276   	; 0xbb2 <fputc>
 6b6:	3a 94       	dec	r3
 6b8:	f5 cf       	rjmp	.-22     	; 0x6a4 <vfprintf+0x196>
 6ba:	f5 01       	movw	r30, r10
 6bc:	27 fc       	sbrc	r2, 7
 6be:	85 91       	lpm	r24, Z+
 6c0:	27 fe       	sbrs	r2, 7
 6c2:	81 91       	ld	r24, Z+
 6c4:	5f 01       	movw	r10, r30
 6c6:	b7 01       	movw	r22, r14
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	73 d2       	rcall	.+1254   	; 0xbb2 <fputc>
 6cc:	31 10       	cpse	r3, r1
 6ce:	3a 94       	dec	r3
 6d0:	f1 e0       	ldi	r31, 0x01	; 1
 6d2:	4f 1a       	sub	r4, r31
 6d4:	51 08       	sbc	r5, r1
 6d6:	41 14       	cp	r4, r1
 6d8:	51 04       	cpc	r5, r1
 6da:	79 f7       	brne	.-34     	; 0x6ba <vfprintf+0x1ac>
 6dc:	de c0       	rjmp	.+444    	; 0x89a <vfprintf+0x38c>
 6de:	84 36       	cpi	r24, 0x64	; 100
 6e0:	11 f0       	breq	.+4      	; 0x6e6 <vfprintf+0x1d8>
 6e2:	89 36       	cpi	r24, 0x69	; 105
 6e4:	31 f5       	brne	.+76     	; 0x732 <vfprintf+0x224>
 6e6:	f8 01       	movw	r30, r16
 6e8:	27 ff       	sbrs	r18, 7
 6ea:	07 c0       	rjmp	.+14     	; 0x6fa <vfprintf+0x1ec>
 6ec:	60 81       	ld	r22, Z
 6ee:	71 81       	ldd	r23, Z+1	; 0x01
 6f0:	82 81       	ldd	r24, Z+2	; 0x02
 6f2:	93 81       	ldd	r25, Z+3	; 0x03
 6f4:	0c 5f       	subi	r16, 0xFC	; 252
 6f6:	1f 4f       	sbci	r17, 0xFF	; 255
 6f8:	08 c0       	rjmp	.+16     	; 0x70a <vfprintf+0x1fc>
 6fa:	60 81       	ld	r22, Z
 6fc:	71 81       	ldd	r23, Z+1	; 0x01
 6fe:	07 2e       	mov	r0, r23
 700:	00 0c       	add	r0, r0
 702:	88 0b       	sbc	r24, r24
 704:	99 0b       	sbc	r25, r25
 706:	0e 5f       	subi	r16, 0xFE	; 254
 708:	1f 4f       	sbci	r17, 0xFF	; 255
 70a:	2f 76       	andi	r18, 0x6F	; 111
 70c:	72 2e       	mov	r7, r18
 70e:	97 ff       	sbrs	r25, 7
 710:	09 c0       	rjmp	.+18     	; 0x724 <vfprintf+0x216>
 712:	90 95       	com	r25
 714:	80 95       	com	r24
 716:	70 95       	com	r23
 718:	61 95       	neg	r22
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	8f 4f       	sbci	r24, 0xFF	; 255
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	20 68       	ori	r18, 0x80	; 128
 722:	72 2e       	mov	r7, r18
 724:	2a e0       	ldi	r18, 0x0A	; 10
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	a4 01       	movw	r20, r8
 72a:	7b d2       	rcall	.+1270   	; 0xc22 <__ultoa_invert>
 72c:	a8 2e       	mov	r10, r24
 72e:	a8 18       	sub	r10, r8
 730:	43 c0       	rjmp	.+134    	; 0x7b8 <vfprintf+0x2aa>
 732:	85 37       	cpi	r24, 0x75	; 117
 734:	29 f4       	brne	.+10     	; 0x740 <vfprintf+0x232>
 736:	2f 7e       	andi	r18, 0xEF	; 239
 738:	b2 2e       	mov	r11, r18
 73a:	2a e0       	ldi	r18, 0x0A	; 10
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	25 c0       	rjmp	.+74     	; 0x78a <vfprintf+0x27c>
 740:	f2 2f       	mov	r31, r18
 742:	f9 7f       	andi	r31, 0xF9	; 249
 744:	bf 2e       	mov	r11, r31
 746:	8f 36       	cpi	r24, 0x6F	; 111
 748:	c1 f0       	breq	.+48     	; 0x77a <vfprintf+0x26c>
 74a:	18 f4       	brcc	.+6      	; 0x752 <vfprintf+0x244>
 74c:	88 35       	cpi	r24, 0x58	; 88
 74e:	79 f0       	breq	.+30     	; 0x76e <vfprintf+0x260>
 750:	ad c0       	rjmp	.+346    	; 0x8ac <vfprintf+0x39e>
 752:	80 37       	cpi	r24, 0x70	; 112
 754:	19 f0       	breq	.+6      	; 0x75c <vfprintf+0x24e>
 756:	88 37       	cpi	r24, 0x78	; 120
 758:	21 f0       	breq	.+8      	; 0x762 <vfprintf+0x254>
 75a:	a8 c0       	rjmp	.+336    	; 0x8ac <vfprintf+0x39e>
 75c:	2f 2f       	mov	r18, r31
 75e:	20 61       	ori	r18, 0x10	; 16
 760:	b2 2e       	mov	r11, r18
 762:	b4 fe       	sbrs	r11, 4
 764:	0d c0       	rjmp	.+26     	; 0x780 <vfprintf+0x272>
 766:	8b 2d       	mov	r24, r11
 768:	84 60       	ori	r24, 0x04	; 4
 76a:	b8 2e       	mov	r11, r24
 76c:	09 c0       	rjmp	.+18     	; 0x780 <vfprintf+0x272>
 76e:	24 ff       	sbrs	r18, 4
 770:	0a c0       	rjmp	.+20     	; 0x786 <vfprintf+0x278>
 772:	9f 2f       	mov	r25, r31
 774:	96 60       	ori	r25, 0x06	; 6
 776:	b9 2e       	mov	r11, r25
 778:	06 c0       	rjmp	.+12     	; 0x786 <vfprintf+0x278>
 77a:	28 e0       	ldi	r18, 0x08	; 8
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	05 c0       	rjmp	.+10     	; 0x78a <vfprintf+0x27c>
 780:	20 e1       	ldi	r18, 0x10	; 16
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <vfprintf+0x27c>
 786:	20 e1       	ldi	r18, 0x10	; 16
 788:	32 e0       	ldi	r19, 0x02	; 2
 78a:	f8 01       	movw	r30, r16
 78c:	b7 fe       	sbrs	r11, 7
 78e:	07 c0       	rjmp	.+14     	; 0x79e <vfprintf+0x290>
 790:	60 81       	ld	r22, Z
 792:	71 81       	ldd	r23, Z+1	; 0x01
 794:	82 81       	ldd	r24, Z+2	; 0x02
 796:	93 81       	ldd	r25, Z+3	; 0x03
 798:	0c 5f       	subi	r16, 0xFC	; 252
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	06 c0       	rjmp	.+12     	; 0x7aa <vfprintf+0x29c>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 5f       	subi	r16, 0xFE	; 254
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	a4 01       	movw	r20, r8
 7ac:	3a d2       	rcall	.+1140   	; 0xc22 <__ultoa_invert>
 7ae:	a8 2e       	mov	r10, r24
 7b0:	a8 18       	sub	r10, r8
 7b2:	fb 2d       	mov	r31, r11
 7b4:	ff 77       	andi	r31, 0x7F	; 127
 7b6:	7f 2e       	mov	r7, r31
 7b8:	76 fe       	sbrs	r7, 6
 7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <vfprintf+0x2c4>
 7bc:	37 2d       	mov	r19, r7
 7be:	3e 7f       	andi	r19, 0xFE	; 254
 7c0:	a5 14       	cp	r10, r5
 7c2:	50 f4       	brcc	.+20     	; 0x7d8 <vfprintf+0x2ca>
 7c4:	74 fe       	sbrs	r7, 4
 7c6:	0a c0       	rjmp	.+20     	; 0x7dc <vfprintf+0x2ce>
 7c8:	72 fc       	sbrc	r7, 2
 7ca:	08 c0       	rjmp	.+16     	; 0x7dc <vfprintf+0x2ce>
 7cc:	37 2d       	mov	r19, r7
 7ce:	3e 7e       	andi	r19, 0xEE	; 238
 7d0:	05 c0       	rjmp	.+10     	; 0x7dc <vfprintf+0x2ce>
 7d2:	ba 2c       	mov	r11, r10
 7d4:	37 2d       	mov	r19, r7
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x2d0>
 7d8:	ba 2c       	mov	r11, r10
 7da:	01 c0       	rjmp	.+2      	; 0x7de <vfprintf+0x2d0>
 7dc:	b5 2c       	mov	r11, r5
 7de:	34 ff       	sbrs	r19, 4
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <vfprintf+0x2ee>
 7e2:	fe 01       	movw	r30, r28
 7e4:	ea 0d       	add	r30, r10
 7e6:	f1 1d       	adc	r31, r1
 7e8:	80 81       	ld	r24, Z
 7ea:	80 33       	cpi	r24, 0x30	; 48
 7ec:	11 f4       	brne	.+4      	; 0x7f2 <vfprintf+0x2e4>
 7ee:	39 7e       	andi	r19, 0xE9	; 233
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <vfprintf+0x2f6>
 7f2:	32 ff       	sbrs	r19, 2
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x2f4>
 7f6:	b3 94       	inc	r11
 7f8:	b3 94       	inc	r11
 7fa:	04 c0       	rjmp	.+8      	; 0x804 <vfprintf+0x2f6>
 7fc:	83 2f       	mov	r24, r19
 7fe:	86 78       	andi	r24, 0x86	; 134
 800:	09 f0       	breq	.+2      	; 0x804 <vfprintf+0x2f6>
 802:	b3 94       	inc	r11
 804:	33 fd       	sbrc	r19, 3
 806:	12 c0       	rjmp	.+36     	; 0x82c <vfprintf+0x31e>
 808:	30 ff       	sbrs	r19, 0
 80a:	06 c0       	rjmp	.+12     	; 0x818 <vfprintf+0x30a>
 80c:	5a 2c       	mov	r5, r10
 80e:	b3 14       	cp	r11, r3
 810:	18 f4       	brcc	.+6      	; 0x818 <vfprintf+0x30a>
 812:	53 0c       	add	r5, r3
 814:	5b 18       	sub	r5, r11
 816:	b3 2c       	mov	r11, r3
 818:	b3 14       	cp	r11, r3
 81a:	60 f4       	brcc	.+24     	; 0x834 <vfprintf+0x326>
 81c:	b7 01       	movw	r22, r14
 81e:	80 e2       	ldi	r24, 0x20	; 32
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	3c 87       	std	Y+12, r19	; 0x0c
 824:	c6 d1       	rcall	.+908    	; 0xbb2 <fputc>
 826:	b3 94       	inc	r11
 828:	3c 85       	ldd	r19, Y+12	; 0x0c
 82a:	f6 cf       	rjmp	.-20     	; 0x818 <vfprintf+0x30a>
 82c:	b3 14       	cp	r11, r3
 82e:	10 f4       	brcc	.+4      	; 0x834 <vfprintf+0x326>
 830:	3b 18       	sub	r3, r11
 832:	01 c0       	rjmp	.+2      	; 0x836 <vfprintf+0x328>
 834:	31 2c       	mov	r3, r1
 836:	34 ff       	sbrs	r19, 4
 838:	11 c0       	rjmp	.+34     	; 0x85c <vfprintf+0x34e>
 83a:	b7 01       	movw	r22, r14
 83c:	80 e3       	ldi	r24, 0x30	; 48
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	3c 87       	std	Y+12, r19	; 0x0c
 842:	b7 d1       	rcall	.+878    	; 0xbb2 <fputc>
 844:	3c 85       	ldd	r19, Y+12	; 0x0c
 846:	32 ff       	sbrs	r19, 2
 848:	16 c0       	rjmp	.+44     	; 0x876 <vfprintf+0x368>
 84a:	31 fd       	sbrc	r19, 1
 84c:	03 c0       	rjmp	.+6      	; 0x854 <vfprintf+0x346>
 84e:	88 e7       	ldi	r24, 0x78	; 120
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	02 c0       	rjmp	.+4      	; 0x858 <vfprintf+0x34a>
 854:	88 e5       	ldi	r24, 0x58	; 88
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	b7 01       	movw	r22, r14
 85a:	0c c0       	rjmp	.+24     	; 0x874 <vfprintf+0x366>
 85c:	83 2f       	mov	r24, r19
 85e:	86 78       	andi	r24, 0x86	; 134
 860:	51 f0       	breq	.+20     	; 0x876 <vfprintf+0x368>
 862:	31 ff       	sbrs	r19, 1
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0x35c>
 866:	8b e2       	ldi	r24, 0x2B	; 43
 868:	01 c0       	rjmp	.+2      	; 0x86c <vfprintf+0x35e>
 86a:	80 e2       	ldi	r24, 0x20	; 32
 86c:	37 fd       	sbrc	r19, 7
 86e:	8d e2       	ldi	r24, 0x2D	; 45
 870:	b7 01       	movw	r22, r14
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	9e d1       	rcall	.+828    	; 0xbb2 <fputc>
 876:	a5 14       	cp	r10, r5
 878:	30 f4       	brcc	.+12     	; 0x886 <vfprintf+0x378>
 87a:	b7 01       	movw	r22, r14
 87c:	80 e3       	ldi	r24, 0x30	; 48
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	98 d1       	rcall	.+816    	; 0xbb2 <fputc>
 882:	5a 94       	dec	r5
 884:	f8 cf       	rjmp	.-16     	; 0x876 <vfprintf+0x368>
 886:	aa 94       	dec	r10
 888:	f4 01       	movw	r30, r8
 88a:	ea 0d       	add	r30, r10
 88c:	f1 1d       	adc	r31, r1
 88e:	80 81       	ld	r24, Z
 890:	b7 01       	movw	r22, r14
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	8e d1       	rcall	.+796    	; 0xbb2 <fputc>
 896:	a1 10       	cpse	r10, r1
 898:	f6 cf       	rjmp	.-20     	; 0x886 <vfprintf+0x378>
 89a:	33 20       	and	r3, r3
 89c:	09 f4       	brne	.+2      	; 0x8a0 <vfprintf+0x392>
 89e:	5d ce       	rjmp	.-838    	; 0x55a <vfprintf+0x4c>
 8a0:	b7 01       	movw	r22, r14
 8a2:	80 e2       	ldi	r24, 0x20	; 32
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	85 d1       	rcall	.+778    	; 0xbb2 <fputc>
 8a8:	3a 94       	dec	r3
 8aa:	f7 cf       	rjmp	.-18     	; 0x89a <vfprintf+0x38c>
 8ac:	f7 01       	movw	r30, r14
 8ae:	86 81       	ldd	r24, Z+6	; 0x06
 8b0:	97 81       	ldd	r25, Z+7	; 0x07
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <vfprintf+0x3aa>
 8b4:	8f ef       	ldi	r24, 0xFF	; 255
 8b6:	9f ef       	ldi	r25, 0xFF	; 255
 8b8:	2c 96       	adiw	r28, 0x0c	; 12
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	f8 94       	cli
 8be:	de bf       	out	0x3e, r29	; 62
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	cd bf       	out	0x3d, r28	; 61
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	bf 90       	pop	r11
 8d6:	af 90       	pop	r10
 8d8:	9f 90       	pop	r9
 8da:	8f 90       	pop	r8
 8dc:	7f 90       	pop	r7
 8de:	6f 90       	pop	r6
 8e0:	5f 90       	pop	r5
 8e2:	4f 90       	pop	r4
 8e4:	3f 90       	pop	r3
 8e6:	2f 90       	pop	r2
 8e8:	08 95       	ret

000008ea <calloc>:
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	86 9f       	mul	r24, r22
 8f4:	80 01       	movw	r16, r0
 8f6:	87 9f       	mul	r24, r23
 8f8:	10 0d       	add	r17, r0
 8fa:	96 9f       	mul	r25, r22
 8fc:	10 0d       	add	r17, r0
 8fe:	11 24       	eor	r1, r1
 900:	c8 01       	movw	r24, r16
 902:	0d d0       	rcall	.+26     	; 0x91e <malloc>
 904:	ec 01       	movw	r28, r24
 906:	00 97       	sbiw	r24, 0x00	; 0
 908:	21 f0       	breq	.+8      	; 0x912 <calloc+0x28>
 90a:	a8 01       	movw	r20, r16
 90c:	60 e0       	ldi	r22, 0x00	; 0
 90e:	70 e0       	ldi	r23, 0x00	; 0
 910:	3e d1       	rcall	.+636    	; 0xb8e <memset>
 912:	ce 01       	movw	r24, r28
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	08 95       	ret

0000091e <malloc>:
 91e:	cf 93       	push	r28
 920:	df 93       	push	r29
 922:	82 30       	cpi	r24, 0x02	; 2
 924:	91 05       	cpc	r25, r1
 926:	10 f4       	brcc	.+4      	; 0x92c <malloc+0xe>
 928:	82 e0       	ldi	r24, 0x02	; 2
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	e0 91 8f 01 	lds	r30, 0x018F
 930:	f0 91 90 01 	lds	r31, 0x0190
 934:	20 e0       	ldi	r18, 0x00	; 0
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	c0 e0       	ldi	r28, 0x00	; 0
 93a:	d0 e0       	ldi	r29, 0x00	; 0
 93c:	30 97       	sbiw	r30, 0x00	; 0
 93e:	11 f1       	breq	.+68     	; 0x984 <malloc+0x66>
 940:	40 81       	ld	r20, Z
 942:	51 81       	ldd	r21, Z+1	; 0x01
 944:	48 17       	cp	r20, r24
 946:	59 07       	cpc	r21, r25
 948:	c0 f0       	brcs	.+48     	; 0x97a <malloc+0x5c>
 94a:	48 17       	cp	r20, r24
 94c:	59 07       	cpc	r21, r25
 94e:	61 f4       	brne	.+24     	; 0x968 <malloc+0x4a>
 950:	82 81       	ldd	r24, Z+2	; 0x02
 952:	93 81       	ldd	r25, Z+3	; 0x03
 954:	20 97       	sbiw	r28, 0x00	; 0
 956:	19 f0       	breq	.+6      	; 0x95e <malloc+0x40>
 958:	9b 83       	std	Y+3, r25	; 0x03
 95a:	8a 83       	std	Y+2, r24	; 0x02
 95c:	2b c0       	rjmp	.+86     	; 0x9b4 <malloc+0x96>
 95e:	90 93 90 01 	sts	0x0190, r25
 962:	80 93 8f 01 	sts	0x018F, r24
 966:	26 c0       	rjmp	.+76     	; 0x9b4 <malloc+0x96>
 968:	21 15       	cp	r18, r1
 96a:	31 05       	cpc	r19, r1
 96c:	19 f0       	breq	.+6      	; 0x974 <malloc+0x56>
 96e:	42 17       	cp	r20, r18
 970:	53 07       	cpc	r21, r19
 972:	18 f4       	brcc	.+6      	; 0x97a <malloc+0x5c>
 974:	9a 01       	movw	r18, r20
 976:	be 01       	movw	r22, r28
 978:	df 01       	movw	r26, r30
 97a:	ef 01       	movw	r28, r30
 97c:	02 80       	ldd	r0, Z+2	; 0x02
 97e:	f3 81       	ldd	r31, Z+3	; 0x03
 980:	e0 2d       	mov	r30, r0
 982:	dc cf       	rjmp	.-72     	; 0x93c <malloc+0x1e>
 984:	21 15       	cp	r18, r1
 986:	31 05       	cpc	r19, r1
 988:	09 f1       	breq	.+66     	; 0x9cc <malloc+0xae>
 98a:	28 1b       	sub	r18, r24
 98c:	39 0b       	sbc	r19, r25
 98e:	24 30       	cpi	r18, 0x04	; 4
 990:	31 05       	cpc	r19, r1
 992:	90 f4       	brcc	.+36     	; 0x9b8 <malloc+0x9a>
 994:	12 96       	adiw	r26, 0x02	; 2
 996:	8d 91       	ld	r24, X+
 998:	9c 91       	ld	r25, X
 99a:	13 97       	sbiw	r26, 0x03	; 3
 99c:	61 15       	cp	r22, r1
 99e:	71 05       	cpc	r23, r1
 9a0:	21 f0       	breq	.+8      	; 0x9aa <malloc+0x8c>
 9a2:	fb 01       	movw	r30, r22
 9a4:	93 83       	std	Z+3, r25	; 0x03
 9a6:	82 83       	std	Z+2, r24	; 0x02
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <malloc+0x94>
 9aa:	90 93 90 01 	sts	0x0190, r25
 9ae:	80 93 8f 01 	sts	0x018F, r24
 9b2:	fd 01       	movw	r30, r26
 9b4:	32 96       	adiw	r30, 0x02	; 2
 9b6:	44 c0       	rjmp	.+136    	; 0xa40 <malloc+0x122>
 9b8:	fd 01       	movw	r30, r26
 9ba:	e2 0f       	add	r30, r18
 9bc:	f3 1f       	adc	r31, r19
 9be:	81 93       	st	Z+, r24
 9c0:	91 93       	st	Z+, r25
 9c2:	22 50       	subi	r18, 0x02	; 2
 9c4:	31 09       	sbc	r19, r1
 9c6:	2d 93       	st	X+, r18
 9c8:	3c 93       	st	X, r19
 9ca:	3a c0       	rjmp	.+116    	; 0xa40 <malloc+0x122>
 9cc:	20 91 8d 01 	lds	r18, 0x018D
 9d0:	30 91 8e 01 	lds	r19, 0x018E
 9d4:	23 2b       	or	r18, r19
 9d6:	41 f4       	brne	.+16     	; 0x9e8 <malloc+0xca>
 9d8:	20 91 02 01 	lds	r18, 0x0102
 9dc:	30 91 03 01 	lds	r19, 0x0103
 9e0:	30 93 8e 01 	sts	0x018E, r19
 9e4:	20 93 8d 01 	sts	0x018D, r18
 9e8:	20 91 00 01 	lds	r18, 0x0100
 9ec:	30 91 01 01 	lds	r19, 0x0101
 9f0:	21 15       	cp	r18, r1
 9f2:	31 05       	cpc	r19, r1
 9f4:	41 f4       	brne	.+16     	; 0xa06 <malloc+0xe8>
 9f6:	2d b7       	in	r18, 0x3d	; 61
 9f8:	3e b7       	in	r19, 0x3e	; 62
 9fa:	40 91 04 01 	lds	r20, 0x0104
 9fe:	50 91 05 01 	lds	r21, 0x0105
 a02:	24 1b       	sub	r18, r20
 a04:	35 0b       	sbc	r19, r21
 a06:	e0 91 8d 01 	lds	r30, 0x018D
 a0a:	f0 91 8e 01 	lds	r31, 0x018E
 a0e:	e2 17       	cp	r30, r18
 a10:	f3 07       	cpc	r31, r19
 a12:	a0 f4       	brcc	.+40     	; 0xa3c <malloc+0x11e>
 a14:	2e 1b       	sub	r18, r30
 a16:	3f 0b       	sbc	r19, r31
 a18:	28 17       	cp	r18, r24
 a1a:	39 07       	cpc	r19, r25
 a1c:	78 f0       	brcs	.+30     	; 0xa3c <malloc+0x11e>
 a1e:	ac 01       	movw	r20, r24
 a20:	4e 5f       	subi	r20, 0xFE	; 254
 a22:	5f 4f       	sbci	r21, 0xFF	; 255
 a24:	24 17       	cp	r18, r20
 a26:	35 07       	cpc	r19, r21
 a28:	48 f0       	brcs	.+18     	; 0xa3c <malloc+0x11e>
 a2a:	4e 0f       	add	r20, r30
 a2c:	5f 1f       	adc	r21, r31
 a2e:	50 93 8e 01 	sts	0x018E, r21
 a32:	40 93 8d 01 	sts	0x018D, r20
 a36:	81 93       	st	Z+, r24
 a38:	91 93       	st	Z+, r25
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <malloc+0x122>
 a3c:	e0 e0       	ldi	r30, 0x00	; 0
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	cf 01       	movw	r24, r30
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	08 95       	ret

00000a48 <free>:
 a48:	0f 93       	push	r16
 a4a:	1f 93       	push	r17
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
 a50:	00 97       	sbiw	r24, 0x00	; 0
 a52:	09 f4       	brne	.+2      	; 0xa56 <free+0xe>
 a54:	8c c0       	rjmp	.+280    	; 0xb6e <free+0x126>
 a56:	fc 01       	movw	r30, r24
 a58:	32 97       	sbiw	r30, 0x02	; 2
 a5a:	13 82       	std	Z+3, r1	; 0x03
 a5c:	12 82       	std	Z+2, r1	; 0x02
 a5e:	00 91 8f 01 	lds	r16, 0x018F
 a62:	10 91 90 01 	lds	r17, 0x0190
 a66:	01 15       	cp	r16, r1
 a68:	11 05       	cpc	r17, r1
 a6a:	81 f4       	brne	.+32     	; 0xa8c <free+0x44>
 a6c:	20 81       	ld	r18, Z
 a6e:	31 81       	ldd	r19, Z+1	; 0x01
 a70:	82 0f       	add	r24, r18
 a72:	93 1f       	adc	r25, r19
 a74:	20 91 8d 01 	lds	r18, 0x018D
 a78:	30 91 8e 01 	lds	r19, 0x018E
 a7c:	28 17       	cp	r18, r24
 a7e:	39 07       	cpc	r19, r25
 a80:	79 f5       	brne	.+94     	; 0xae0 <free+0x98>
 a82:	f0 93 8e 01 	sts	0x018E, r31
 a86:	e0 93 8d 01 	sts	0x018D, r30
 a8a:	71 c0       	rjmp	.+226    	; 0xb6e <free+0x126>
 a8c:	d8 01       	movw	r26, r16
 a8e:	40 e0       	ldi	r20, 0x00	; 0
 a90:	50 e0       	ldi	r21, 0x00	; 0
 a92:	ae 17       	cp	r26, r30
 a94:	bf 07       	cpc	r27, r31
 a96:	50 f4       	brcc	.+20     	; 0xaac <free+0x64>
 a98:	12 96       	adiw	r26, 0x02	; 2
 a9a:	2d 91       	ld	r18, X+
 a9c:	3c 91       	ld	r19, X
 a9e:	13 97       	sbiw	r26, 0x03	; 3
 aa0:	ad 01       	movw	r20, r26
 aa2:	21 15       	cp	r18, r1
 aa4:	31 05       	cpc	r19, r1
 aa6:	09 f1       	breq	.+66     	; 0xaea <free+0xa2>
 aa8:	d9 01       	movw	r26, r18
 aaa:	f3 cf       	rjmp	.-26     	; 0xa92 <free+0x4a>
 aac:	9d 01       	movw	r18, r26
 aae:	da 01       	movw	r26, r20
 ab0:	33 83       	std	Z+3, r19	; 0x03
 ab2:	22 83       	std	Z+2, r18	; 0x02
 ab4:	60 81       	ld	r22, Z
 ab6:	71 81       	ldd	r23, Z+1	; 0x01
 ab8:	86 0f       	add	r24, r22
 aba:	97 1f       	adc	r25, r23
 abc:	82 17       	cp	r24, r18
 abe:	93 07       	cpc	r25, r19
 ac0:	69 f4       	brne	.+26     	; 0xadc <free+0x94>
 ac2:	ec 01       	movw	r28, r24
 ac4:	28 81       	ld	r18, Y
 ac6:	39 81       	ldd	r19, Y+1	; 0x01
 ac8:	26 0f       	add	r18, r22
 aca:	37 1f       	adc	r19, r23
 acc:	2e 5f       	subi	r18, 0xFE	; 254
 ace:	3f 4f       	sbci	r19, 0xFF	; 255
 ad0:	31 83       	std	Z+1, r19	; 0x01
 ad2:	20 83       	st	Z, r18
 ad4:	8a 81       	ldd	r24, Y+2	; 0x02
 ad6:	9b 81       	ldd	r25, Y+3	; 0x03
 ad8:	93 83       	std	Z+3, r25	; 0x03
 ada:	82 83       	std	Z+2, r24	; 0x02
 adc:	45 2b       	or	r20, r21
 ade:	29 f4       	brne	.+10     	; 0xaea <free+0xa2>
 ae0:	f0 93 90 01 	sts	0x0190, r31
 ae4:	e0 93 8f 01 	sts	0x018F, r30
 ae8:	42 c0       	rjmp	.+132    	; 0xb6e <free+0x126>
 aea:	13 96       	adiw	r26, 0x03	; 3
 aec:	fc 93       	st	X, r31
 aee:	ee 93       	st	-X, r30
 af0:	12 97       	sbiw	r26, 0x02	; 2
 af2:	ed 01       	movw	r28, r26
 af4:	49 91       	ld	r20, Y+
 af6:	59 91       	ld	r21, Y+
 af8:	9e 01       	movw	r18, r28
 afa:	24 0f       	add	r18, r20
 afc:	35 1f       	adc	r19, r21
 afe:	e2 17       	cp	r30, r18
 b00:	f3 07       	cpc	r31, r19
 b02:	71 f4       	brne	.+28     	; 0xb20 <free+0xd8>
 b04:	80 81       	ld	r24, Z
 b06:	91 81       	ldd	r25, Z+1	; 0x01
 b08:	84 0f       	add	r24, r20
 b0a:	95 1f       	adc	r25, r21
 b0c:	02 96       	adiw	r24, 0x02	; 2
 b0e:	11 96       	adiw	r26, 0x01	; 1
 b10:	9c 93       	st	X, r25
 b12:	8e 93       	st	-X, r24
 b14:	82 81       	ldd	r24, Z+2	; 0x02
 b16:	93 81       	ldd	r25, Z+3	; 0x03
 b18:	13 96       	adiw	r26, 0x03	; 3
 b1a:	9c 93       	st	X, r25
 b1c:	8e 93       	st	-X, r24
 b1e:	12 97       	sbiw	r26, 0x02	; 2
 b20:	e0 e0       	ldi	r30, 0x00	; 0
 b22:	f0 e0       	ldi	r31, 0x00	; 0
 b24:	d8 01       	movw	r26, r16
 b26:	12 96       	adiw	r26, 0x02	; 2
 b28:	8d 91       	ld	r24, X+
 b2a:	9c 91       	ld	r25, X
 b2c:	13 97       	sbiw	r26, 0x03	; 3
 b2e:	00 97       	sbiw	r24, 0x00	; 0
 b30:	19 f0       	breq	.+6      	; 0xb38 <free+0xf0>
 b32:	f8 01       	movw	r30, r16
 b34:	8c 01       	movw	r16, r24
 b36:	f6 cf       	rjmp	.-20     	; 0xb24 <free+0xdc>
 b38:	8d 91       	ld	r24, X+
 b3a:	9c 91       	ld	r25, X
 b3c:	98 01       	movw	r18, r16
 b3e:	2e 5f       	subi	r18, 0xFE	; 254
 b40:	3f 4f       	sbci	r19, 0xFF	; 255
 b42:	82 0f       	add	r24, r18
 b44:	93 1f       	adc	r25, r19
 b46:	20 91 8d 01 	lds	r18, 0x018D
 b4a:	30 91 8e 01 	lds	r19, 0x018E
 b4e:	28 17       	cp	r18, r24
 b50:	39 07       	cpc	r19, r25
 b52:	69 f4       	brne	.+26     	; 0xb6e <free+0x126>
 b54:	30 97       	sbiw	r30, 0x00	; 0
 b56:	29 f4       	brne	.+10     	; 0xb62 <free+0x11a>
 b58:	10 92 90 01 	sts	0x0190, r1
 b5c:	10 92 8f 01 	sts	0x018F, r1
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <free+0x11e>
 b62:	13 82       	std	Z+3, r1	; 0x03
 b64:	12 82       	std	Z+2, r1	; 0x02
 b66:	10 93 8e 01 	sts	0x018E, r17
 b6a:	00 93 8d 01 	sts	0x018D, r16
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	1f 91       	pop	r17
 b74:	0f 91       	pop	r16
 b76:	08 95       	ret

00000b78 <strnlen_P>:
 b78:	fc 01       	movw	r30, r24
 b7a:	05 90       	lpm	r0, Z+
 b7c:	61 50       	subi	r22, 0x01	; 1
 b7e:	70 40       	sbci	r23, 0x00	; 0
 b80:	01 10       	cpse	r0, r1
 b82:	d8 f7       	brcc	.-10     	; 0xb7a <strnlen_P+0x2>
 b84:	80 95       	com	r24
 b86:	90 95       	com	r25
 b88:	8e 0f       	add	r24, r30
 b8a:	9f 1f       	adc	r25, r31
 b8c:	08 95       	ret

00000b8e <memset>:
 b8e:	dc 01       	movw	r26, r24
 b90:	01 c0       	rjmp	.+2      	; 0xb94 <memset+0x6>
 b92:	6d 93       	st	X+, r22
 b94:	41 50       	subi	r20, 0x01	; 1
 b96:	50 40       	sbci	r21, 0x00	; 0
 b98:	e0 f7       	brcc	.-8      	; 0xb92 <memset+0x4>
 b9a:	08 95       	ret

00000b9c <strnlen>:
 b9c:	fc 01       	movw	r30, r24
 b9e:	61 50       	subi	r22, 0x01	; 1
 ba0:	70 40       	sbci	r23, 0x00	; 0
 ba2:	01 90       	ld	r0, Z+
 ba4:	01 10       	cpse	r0, r1
 ba6:	d8 f7       	brcc	.-10     	; 0xb9e <strnlen+0x2>
 ba8:	80 95       	com	r24
 baa:	90 95       	com	r25
 bac:	8e 0f       	add	r24, r30
 bae:	9f 1f       	adc	r25, r31
 bb0:	08 95       	ret

00000bb2 <fputc>:
 bb2:	0f 93       	push	r16
 bb4:	1f 93       	push	r17
 bb6:	cf 93       	push	r28
 bb8:	df 93       	push	r29
 bba:	fb 01       	movw	r30, r22
 bbc:	23 81       	ldd	r18, Z+3	; 0x03
 bbe:	21 fd       	sbrc	r18, 1
 bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <fputc+0x16>
 bc2:	8f ef       	ldi	r24, 0xFF	; 255
 bc4:	9f ef       	ldi	r25, 0xFF	; 255
 bc6:	28 c0       	rjmp	.+80     	; 0xc18 <fputc+0x66>
 bc8:	22 ff       	sbrs	r18, 2
 bca:	16 c0       	rjmp	.+44     	; 0xbf8 <fputc+0x46>
 bcc:	46 81       	ldd	r20, Z+6	; 0x06
 bce:	57 81       	ldd	r21, Z+7	; 0x07
 bd0:	24 81       	ldd	r18, Z+4	; 0x04
 bd2:	35 81       	ldd	r19, Z+5	; 0x05
 bd4:	42 17       	cp	r20, r18
 bd6:	53 07       	cpc	r21, r19
 bd8:	44 f4       	brge	.+16     	; 0xbea <fputc+0x38>
 bda:	a0 81       	ld	r26, Z
 bdc:	b1 81       	ldd	r27, Z+1	; 0x01
 bde:	9d 01       	movw	r18, r26
 be0:	2f 5f       	subi	r18, 0xFF	; 255
 be2:	3f 4f       	sbci	r19, 0xFF	; 255
 be4:	31 83       	std	Z+1, r19	; 0x01
 be6:	20 83       	st	Z, r18
 be8:	8c 93       	st	X, r24
 bea:	26 81       	ldd	r18, Z+6	; 0x06
 bec:	37 81       	ldd	r19, Z+7	; 0x07
 bee:	2f 5f       	subi	r18, 0xFF	; 255
 bf0:	3f 4f       	sbci	r19, 0xFF	; 255
 bf2:	37 83       	std	Z+7, r19	; 0x07
 bf4:	26 83       	std	Z+6, r18	; 0x06
 bf6:	10 c0       	rjmp	.+32     	; 0xc18 <fputc+0x66>
 bf8:	eb 01       	movw	r28, r22
 bfa:	09 2f       	mov	r16, r25
 bfc:	18 2f       	mov	r17, r24
 bfe:	00 84       	ldd	r0, Z+8	; 0x08
 c00:	f1 85       	ldd	r31, Z+9	; 0x09
 c02:	e0 2d       	mov	r30, r0
 c04:	09 95       	icall
 c06:	89 2b       	or	r24, r25
 c08:	e1 f6       	brne	.-72     	; 0xbc2 <fputc+0x10>
 c0a:	8e 81       	ldd	r24, Y+6	; 0x06
 c0c:	9f 81       	ldd	r25, Y+7	; 0x07
 c0e:	01 96       	adiw	r24, 0x01	; 1
 c10:	9f 83       	std	Y+7, r25	; 0x07
 c12:	8e 83       	std	Y+6, r24	; 0x06
 c14:	81 2f       	mov	r24, r17
 c16:	90 2f       	mov	r25, r16
 c18:	df 91       	pop	r29
 c1a:	cf 91       	pop	r28
 c1c:	1f 91       	pop	r17
 c1e:	0f 91       	pop	r16
 c20:	08 95       	ret

00000c22 <__ultoa_invert>:
 c22:	fa 01       	movw	r30, r20
 c24:	aa 27       	eor	r26, r26
 c26:	28 30       	cpi	r18, 0x08	; 8
 c28:	51 f1       	breq	.+84     	; 0xc7e <__ultoa_invert+0x5c>
 c2a:	20 31       	cpi	r18, 0x10	; 16
 c2c:	81 f1       	breq	.+96     	; 0xc8e <__ultoa_invert+0x6c>
 c2e:	e8 94       	clt
 c30:	6f 93       	push	r22
 c32:	6e 7f       	andi	r22, 0xFE	; 254
 c34:	6e 5f       	subi	r22, 0xFE	; 254
 c36:	7f 4f       	sbci	r23, 0xFF	; 255
 c38:	8f 4f       	sbci	r24, 0xFF	; 255
 c3a:	9f 4f       	sbci	r25, 0xFF	; 255
 c3c:	af 4f       	sbci	r26, 0xFF	; 255
 c3e:	b1 e0       	ldi	r27, 0x01	; 1
 c40:	3e d0       	rcall	.+124    	; 0xcbe <__ultoa_invert+0x9c>
 c42:	b4 e0       	ldi	r27, 0x04	; 4
 c44:	3c d0       	rcall	.+120    	; 0xcbe <__ultoa_invert+0x9c>
 c46:	67 0f       	add	r22, r23
 c48:	78 1f       	adc	r23, r24
 c4a:	89 1f       	adc	r24, r25
 c4c:	9a 1f       	adc	r25, r26
 c4e:	a1 1d       	adc	r26, r1
 c50:	68 0f       	add	r22, r24
 c52:	79 1f       	adc	r23, r25
 c54:	8a 1f       	adc	r24, r26
 c56:	91 1d       	adc	r25, r1
 c58:	a1 1d       	adc	r26, r1
 c5a:	6a 0f       	add	r22, r26
 c5c:	71 1d       	adc	r23, r1
 c5e:	81 1d       	adc	r24, r1
 c60:	91 1d       	adc	r25, r1
 c62:	a1 1d       	adc	r26, r1
 c64:	20 d0       	rcall	.+64     	; 0xca6 <__ultoa_invert+0x84>
 c66:	09 f4       	brne	.+2      	; 0xc6a <__ultoa_invert+0x48>
 c68:	68 94       	set
 c6a:	3f 91       	pop	r19
 c6c:	2a e0       	ldi	r18, 0x0A	; 10
 c6e:	26 9f       	mul	r18, r22
 c70:	11 24       	eor	r1, r1
 c72:	30 19       	sub	r19, r0
 c74:	30 5d       	subi	r19, 0xD0	; 208
 c76:	31 93       	st	Z+, r19
 c78:	de f6       	brtc	.-74     	; 0xc30 <__ultoa_invert+0xe>
 c7a:	cf 01       	movw	r24, r30
 c7c:	08 95       	ret
 c7e:	46 2f       	mov	r20, r22
 c80:	47 70       	andi	r20, 0x07	; 7
 c82:	40 5d       	subi	r20, 0xD0	; 208
 c84:	41 93       	st	Z+, r20
 c86:	b3 e0       	ldi	r27, 0x03	; 3
 c88:	0f d0       	rcall	.+30     	; 0xca8 <__ultoa_invert+0x86>
 c8a:	c9 f7       	brne	.-14     	; 0xc7e <__ultoa_invert+0x5c>
 c8c:	f6 cf       	rjmp	.-20     	; 0xc7a <__ultoa_invert+0x58>
 c8e:	46 2f       	mov	r20, r22
 c90:	4f 70       	andi	r20, 0x0F	; 15
 c92:	40 5d       	subi	r20, 0xD0	; 208
 c94:	4a 33       	cpi	r20, 0x3A	; 58
 c96:	18 f0       	brcs	.+6      	; 0xc9e <__ultoa_invert+0x7c>
 c98:	49 5d       	subi	r20, 0xD9	; 217
 c9a:	31 fd       	sbrc	r19, 1
 c9c:	40 52       	subi	r20, 0x20	; 32
 c9e:	41 93       	st	Z+, r20
 ca0:	02 d0       	rcall	.+4      	; 0xca6 <__ultoa_invert+0x84>
 ca2:	a9 f7       	brne	.-22     	; 0xc8e <__ultoa_invert+0x6c>
 ca4:	ea cf       	rjmp	.-44     	; 0xc7a <__ultoa_invert+0x58>
 ca6:	b4 e0       	ldi	r27, 0x04	; 4
 ca8:	a6 95       	lsr	r26
 caa:	97 95       	ror	r25
 cac:	87 95       	ror	r24
 cae:	77 95       	ror	r23
 cb0:	67 95       	ror	r22
 cb2:	ba 95       	dec	r27
 cb4:	c9 f7       	brne	.-14     	; 0xca8 <__ultoa_invert+0x86>
 cb6:	00 97       	sbiw	r24, 0x00	; 0
 cb8:	61 05       	cpc	r22, r1
 cba:	71 05       	cpc	r23, r1
 cbc:	08 95       	ret
 cbe:	9b 01       	movw	r18, r22
 cc0:	ac 01       	movw	r20, r24
 cc2:	0a 2e       	mov	r0, r26
 cc4:	06 94       	lsr	r0
 cc6:	57 95       	ror	r21
 cc8:	47 95       	ror	r20
 cca:	37 95       	ror	r19
 ccc:	27 95       	ror	r18
 cce:	ba 95       	dec	r27
 cd0:	c9 f7       	brne	.-14     	; 0xcc4 <__ultoa_invert+0xa2>
 cd2:	62 0f       	add	r22, r18
 cd4:	73 1f       	adc	r23, r19
 cd6:	84 1f       	adc	r24, r20
 cd8:	95 1f       	adc	r25, r21
 cda:	a0 1d       	adc	r26, r0
 cdc:	08 95       	ret

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
