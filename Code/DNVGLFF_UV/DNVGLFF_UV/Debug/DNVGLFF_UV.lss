
DNVGLFF_UV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000cc8  00000d5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  0080015e  0080015e  00000dba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000842  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ac  00000000  00000000  0000174a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065a  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000297  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d0  00000000  00000000  000026c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e8 ec       	ldi	r30, 0xC8	; 200
  a8:	fc e0       	ldi	r31, 0x0C	; 12
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 35       	cpi	r26, 0x5E	; 94
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	ae e5       	ldi	r26, 0x5E	; 94
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a1 39       	cpi	r26, 0x91	; 145
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	76 d1       	rcall	.+748    	; 0x3b8 <main>
  cc:	fb c5       	rjmp	.+3062   	; 0xcc4 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <__vector_18>:
        CANIDT4 = 1<<RTRTAG;
		CANCDMOB|=packet->length;
		}
    CANCDMOB|=0x40; //enable TX
	return TRUE;
	}
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	cf 93       	push	r28
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
  f8:	ed ee       	ldi	r30, 0xED	; 237
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	c0 81       	ld	r28, Z
  fe:	80 91 ec 00 	lds	r24, 0x00EC
 102:	68 2f       	mov	r22, r24
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	80 83       	st	Z, r24
 10a:	72 95       	swap	r23
 10c:	62 95       	swap	r22
 10e:	6f 70       	andi	r22, 0x0F	; 15
 110:	67 27       	eor	r22, r23
 112:	7f 70       	andi	r23, 0x0F	; 15
 114:	67 27       	eor	r22, r23
 116:	80 91 ee 00 	lds	r24, 0x00EE
 11a:	8f 75       	andi	r24, 0x5F	; 95
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_18+0x50>
 11e:	98 95       	break
 120:	20 91 f2 00 	lds	r18, 0x00F2
 124:	80 91 f3 00 	lds	r24, 0x00F3
 128:	ee e5       	ldi	r30, 0x5E	; 94
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	22 95       	swap	r18
 13c:	26 95       	lsr	r18
 13e:	27 70       	andi	r18, 0x07	; 7
 140:	82 2b       	or	r24, r18
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
 146:	80 91 ef 00 	lds	r24, 0x00EF
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	59 f0       	breq	.+22     	; 0x16a <__vector_18+0x9a>
 154:	e1 e6       	ldi	r30, 0x61	; 97
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	8f 59       	subi	r24, 0x9F	; 159
 15a:	9e 4f       	sbci	r25, 0xFE	; 254
 15c:	aa ef       	ldi	r26, 0xFA	; 250
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	2c 91       	ld	r18, X
 162:	21 93       	st	Z+, r18
 164:	e8 17       	cp	r30, r24
 166:	f9 07       	cpc	r31, r25
 168:	d9 f7       	brne	.-10     	; 0x160 <__vector_18+0x90>
 16a:	10 92 ee 00 	sts	0x00EE, r1
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 ef 00 	sts	0x00EF, r24
 174:	fb 01       	movw	r30, r22
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e7 59       	subi	r30, 0x97	; 151
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	01 90       	ld	r0, Z+
 180:	f0 81       	ld	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	8e e5       	ldi	r24, 0x5E	; 94
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	09 95       	icall
 18a:	c0 93 ed 00 	sts	0x00ED, r28
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <prepare_rx>:

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
 1b6:	8f 30       	cpi	r24, 0x0F	; 15
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <prepare_rx+0x6>
 1ba:	6d c0       	rjmp	.+218    	; 0x296 <prepare_rx+0xe0>
		return TRUE;
	canlist[ (unsigned)mob]=callback;
 1bc:	e8 2f       	mov	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e7 59       	subi	r30, 0x97	; 151
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	31 83       	std	Z+1, r19	; 0x01
 1ca:	20 83       	st	Z, r18
    CANPAGE = mob << 4;
 1cc:	98 2f       	mov	r25, r24
 1ce:	92 95       	swap	r25
 1d0:	90 7f       	andi	r25, 0xF0	; 240
 1d2:	90 93 ed 00 	sts	0x00ED, r25
	if( callback==0)			// release this MOB 
 1d6:	23 2b       	or	r18, r19
 1d8:	d9 f4       	brne	.+54     	; 0x210 <prepare_rx+0x5a>
		{
		CANSTMOB = 0x00;    	// cancel pending operation
 1da:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0x00;
 1de:	10 92 ef 00 	sts	0x00EF, r1
		unsigned mask=1<<mob;
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	a9 01       	movw	r20, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <prepare_rx+0x38>
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <prepare_rx+0x34>
 1f2:	ca 01       	movw	r24, r20
		CANIE2 &=  ~mask;
 1f4:	ee ed       	ldi	r30, 0xDE	; 222
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	20 81       	ld	r18, Z
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	80 83       	st	Z, r24
		CANIE1 &= ~(mask>>8);
 200:	ef ed       	ldi	r30, 0xDF	; 223
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	90 95       	com	r25
 208:	89 23       	and	r24, r25
 20a:	80 83       	st	Z, r24
		return FALSE;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
 210:	90 91 ef 00 	lds	r25, 0x00EF
 214:	90 7c       	andi	r25, 0xC0	; 192
 216:	09 f0       	breq	.+2      	; 0x21a <prepare_rx+0x64>
 218:	40 c0       	rjmp	.+128    	; 0x29a <prepare_rx+0xe4>
		return TRUE;			// no vacancy ...
	CANSTMOB = 0x00;    	// cancel pending operation 
 21a:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;		
 21e:	ef ee       	ldi	r30, 0xEF	; 239
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	10 82       	st	Z, r1
	CANHPMOB = 0x00;		// enable direct mob indexing, see doc
 224:	10 92 ec 00 	sts	0x00EC, r1
	CANIDT1=id >>3;
 228:	9b 01       	movw	r18, r22
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	36 95       	lsr	r19
 234:	27 95       	ror	r18
 236:	20 93 f3 00 	sts	0x00F3, r18
	CANIDT2=id <<5;
 23a:	62 95       	swap	r22
 23c:	66 0f       	add	r22, r22
 23e:	60 7e       	andi	r22, 0xE0	; 224
 240:	60 93 f2 00 	sts	0x00F2, r22
	CANIDM1=idmask >>3;
 244:	9a 01       	movw	r18, r20
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	36 95       	lsr	r19
 24c:	27 95       	ror	r18
 24e:	36 95       	lsr	r19
 250:	27 95       	ror	r18
 252:	20 93 f7 00 	sts	0x00F7, r18
	CANIDM2=idmask <<5;
 256:	42 95       	swap	r20
 258:	44 0f       	add	r20, r20
 25a:	40 7e       	andi	r20, 0xE0	; 224
 25c:	40 93 f6 00 	sts	0x00F6, r20
	CANIDM3=0;
 260:	10 92 f5 00 	sts	0x00F5, r1
	CANIDM4=0;
 264:	10 92 f4 00 	sts	0x00F4, r1
	CANCDMOB=0x80; // enable RX
 268:	90 e8       	ldi	r25, 0x80	; 128
 26a:	90 83       	st	Z, r25
	unsigned mask=1<<mob;
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	a9 01       	movw	r20, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <prepare_rx+0xc2>
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <prepare_rx+0xbe>
 27c:	ca 01       	movw	r24, r20
	CANIE2 |=  mask;
 27e:	ee ed       	ldi	r30, 0xDE	; 222
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	20 81       	ld	r18, Z
 284:	82 2b       	or	r24, r18
 286:	80 83       	st	Z, r24
	CANIE1 |= (mask>>8);
 288:	ef ed       	ldi	r30, 0xDF	; 223
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	89 2b       	or	r24, r25
 290:	80 83       	st	Z, r24
	return FALSE;
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
	}

BOOL prepare_rx( char mob, unsigned id, unsigned idmask, CAN_cbf callback)
	{
	if( mob >= 15) 				// illegal MOB number
		return TRUE;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
		CANIE2 &=  ~mask;
		CANIE1 &= ~(mask>>8);
		return FALSE;
		}
	if( CANCDMOB & 0b11000000) 	// if MOB already in use
		return TRUE;			// no vacancy ...
 29a:	81 e0       	ldi	r24, 0x01	; 1
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return FALSE;
	}
 29c:	08 95       	ret

0000029e <can_init>:

void can_init( void)
	{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	unsigned mob;
//! \bug different baud rate support not implemented yet 
#if F_CPU == 8000000
	//Old implementation
	CANBT1=0x06;	// 8MHz, 100kbit/s
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2=0x0c;
 2a8:	8c e0       	ldi	r24, 0x0C	; 12
 2aa:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3=0x5a;
 2ae:	8a e5       	ldi	r24, 0x5A	; 90
 2b0:	80 93 e4 00 	sts	0x00E4, r24
 2b4:	80 e0       	ldi	r24, 0x00	; 0
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2b6:	cd ee       	ldi	r28, 0xED	; 237
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
 2ba:	ae ee       	ldi	r26, 0xEE	; 238
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
 2be:	ef ee       	ldi	r30, 0xEF	; 239
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2c2:	98 2f       	mov	r25, r24
 2c4:	92 95       	swap	r25
 2c6:	90 7f       	andi	r25, 0xF0	; 240
 2c8:	98 83       	st	Y, r25
		CANSTMOB = 0;
 2ca:	1c 92       	st	X, r1
		CANCDMOB = 0;
 2cc:	10 82       	st	Z, r1
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
#else
	CANBT1=0x26;	// 16 MHz, 100kbit/s
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	for (mob = 0; mob < NO_MOBS; mob++)
 2d0:	8f 30       	cpi	r24, 0x0F	; 15
 2d2:	b9 f7       	brne	.-18     	; 0x2c2 <can_init+0x24>
		{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
		}
	CANGCON |= 0x02;
 2d4:	e8 ed       	ldi	r30, 0xD8	; 216
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX);
 2de:	80 ea       	ldi	r24, 0xA0	; 160
 2e0:	80 93 db 00 	sts	0x00DB, r24
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <CAN_messageRX>:
#include <util/delay.h>
#include <stdio.h>

#include "LED.h"

void CAN_messageRX(CAN_packet *p, unsigned char mob) {		
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	6c 01       	movw	r12, r24
	//USART_tx_string("\n\rMessage received!");
	toggle_bit(DDRB, PB6);
 2fc:	94 b1       	in	r25, 0x04	; 4
 2fe:	80 e4       	ldi	r24, 0x40	; 64
 300:	89 27       	eor	r24, r25
 302:	84 b9       	out	0x04, r24	; 4
	
	int id = p->id;	
	printf("\r\nMessage ID - %d", p->id);
 304:	f6 01       	movw	r30, r12
 306:	81 81       	ldd	r24, Z+1	; 0x01
 308:	8f 93       	push	r24
 30a:	80 81       	ld	r24, Z
 30c:	8f 93       	push	r24
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	9f 93       	push	r25
 314:	8f 93       	push	r24
 316:	d6 d0       	rcall	.+428    	; 0x4c4 <printf>
	printf("\r\nMessage length - %d", p->length);
 318:	f6 01       	movw	r30, r12
 31a:	82 81       	ldd	r24, Z+2	; 0x02
 31c:	1f 92       	push	r1
 31e:	8f 93       	push	r24
 320:	88 e1       	ldi	r24, 0x18	; 24
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	9f 93       	push	r25
 326:	8f 93       	push	r24
 328:	cd d0       	rcall	.+410    	; 0x4c4 <printf>
	for(int i = 0; i < p->length; i++)
 32a:	f6 01       	movw	r30, r12
 32c:	82 81       	ldd	r24, Z+2	; 0x02
 32e:	2d b7       	in	r18, 0x3d	; 61
 330:	3e b7       	in	r19, 0x3e	; 62
 332:	28 5f       	subi	r18, 0xF8	; 248
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	3e bf       	out	0x3e, r19	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	2d bf       	out	0x3d, r18	; 61
 340:	88 23       	and	r24, r24
 342:	f9 f0       	breq	.+62     	; 0x382 <CAN_messageRX+0x98>
 344:	76 01       	movw	r14, r12
 346:	33 e0       	ldi	r19, 0x03	; 3
 348:	e3 0e       	add	r14, r19
 34a:	f1 1c       	adc	r15, r1
 34c:	c0 e0       	ldi	r28, 0x00	; 0
 34e:	d0 e0       	ldi	r29, 0x00	; 0
		printf("\r\nData[%d] received - %u", i, p->data[i]);
 350:	0e e2       	ldi	r16, 0x2E	; 46
 352:	11 e0       	ldi	r17, 0x01	; 1
 354:	f7 01       	movw	r30, r14
 356:	81 91       	ld	r24, Z+
 358:	7f 01       	movw	r14, r30
 35a:	1f 92       	push	r1
 35c:	8f 93       	push	r24
 35e:	df 93       	push	r29
 360:	cf 93       	push	r28
 362:	1f 93       	push	r17
 364:	0f 93       	push	r16
 366:	ae d0       	rcall	.+348    	; 0x4c4 <printf>
	toggle_bit(DDRB, PB6);
	
	int id = p->id;	
	printf("\r\nMessage ID - %d", p->id);
	printf("\r\nMessage length - %d", p->length);
	for(int i = 0; i < p->length; i++)
 368:	21 96       	adiw	r28, 0x01	; 1
 36a:	f6 01       	movw	r30, r12
 36c:	22 81       	ldd	r18, Z+2	; 0x02
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	c2 17       	cp	r28, r18
 37e:	d3 07       	cpc	r29, r19
 380:	4c f3       	brlt	.-46     	; 0x354 <CAN_messageRX+0x6a>
		printf("\r\nData[%d] received - %u", i, p->data[i]);
	printf("\n");
 382:	8a e0       	ldi	r24, 0x0A	; 10
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	b1 d0       	rcall	.+354    	; 0x4ea <putchar>
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	08 95       	ret

0000039a <inits>:

void inits(void) {
	can_init();
 39a:	81 df       	rcall	.-254    	; 0x29e <can_init>
	USART_init(MYUBRR, true);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	83 e3       	ldi	r24, 0x33	; 51
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	2f d0       	rcall	.+94     	; 0x402 <USART_init>
	printf("\r\nReceiver initialized");
 3a4:	87 e4       	ldi	r24, 0x47	; 71
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	9f 93       	push	r25
 3aa:	8f 93       	push	r24
 3ac:	8b d0       	rcall	.+278    	; 0x4c4 <printf>
	set_bit(DDRB, PB6);
 3ae:	26 9a       	sbi	0x04, 6	; 4
	clear_bit(PORTB, PB6);
 3b0:	2e 98       	cbi	0x05, 6	; 5
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	08 95       	ret

000003b8 <main>:
}

int main(void)
{
	inits();
 3b8:	f0 df       	rcall	.-32     	; 0x39a <inits>

	DDRB |= (1<<DDB5);
 3ba:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= (1<<PB5);
 3bc:	2d 9a       	sbi	0x05, 5	; 5
	
	BOOL ret;	
	ret = prepare_rx(1, 20, 0, CAN_messageRX);
 3be:	25 e7       	ldi	r18, 0x75	; 117
 3c0:	31 e0       	ldi	r19, 0x01	; 1
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	50 e0       	ldi	r21, 0x00	; 0
 3c6:	64 e1       	ldi	r22, 0x14	; 20
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	f4 de       	rcall	.-536    	; 0x1b6 <prepare_rx>

	sei();
 3ce:	78 94       	sei
	message.data[0] = 0b000000;	// For message structure see front light module documentation
	
	while (true) {
		
		if(ret) {
			toggle_bit(DDRB, PB6);
 3d0:	20 e4       	ldi	r18, 0x40	; 64
	message.length = 1;
	message.data[0] = 0b000000;	// For message structure see front light module documentation
	
	while (true) {
		
		if(ret) {
 3d2:	81 11       	cpse	r24, r1
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <main+0x20>
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <main+0x1e>
			toggle_bit(DDRB, PB6);
 3d8:	94 b1       	in	r25, 0x04	; 4
 3da:	92 27       	eor	r25, r18
 3dc:	94 b9       	out	0x04, r25	; 4
 3de:	f9 cf       	rjmp	.-14     	; 0x3d2 <main+0x1a>

000003e0 <USART_tx>:
	fdevopen(USART_tx, USART_rx);
}

_Bool USART_tx(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 3e0:	e0 ec       	ldi	r30, 0xC0	; 192
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	90 81       	ld	r25, Z
 3e6:	95 ff       	sbrs	r25, 5
 3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <USART_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 3ea:	80 93 c6 00 	sts	0x00C6, r24
	// T0D0 implement 
	return true;
}
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	08 95       	ret

000003f2 <USART_rx>:

unsigned char USART_rx(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 3f2:	e0 ec       	ldi	r30, 0xC0	; 192
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	88 23       	and	r24, r24
 3fa:	ec f7       	brge	.-6      	; 0x3f6 <USART_rx+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 3fc:	80 91 c6 00 	lds	r24, 0x00C6
}
 400:	08 95       	ret

00000402 <USART_init>:

/*! Initialize the serial communication
	baud is the baud rate */
void USART_init(unsigned int baud, _Bool onOff) {
	/* Set baud rate */
	UBRR0H = (unsigned char) (baud>>8);
 402:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baud;
 406:	80 93 c4 00 	sts	0x00C4, r24
	/* Set frame format: Asynchronous normal mode, 8data, no parity  1 stop bit */
	/*(0<<UMSEL0) | (0<<UPM0) | (0<<USBS0) | already set as Initial values */
	UCSR0C = (3<<UCSZ0);
 40a:	86 e0       	ldi	r24, 0x06	; 6
 40c:	80 93 c2 00 	sts	0x00C2, r24
	/* Enable receiver and transmitter */
	if (onOff) {
 410:	66 23       	and	r22, r22
 412:	41 f0       	breq	.+16     	; 0x424 <USART_init+0x22>
		set_bit(UCSR0B,	RXEN0);
 414:	e1 ec       	ldi	r30, 0xC1	; 193
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	80 61       	ori	r24, 0x10	; 16
 41c:	80 83       	st	Z, r24
		set_bit(UCSR0B, TXEN0);
 41e:	80 81       	ld	r24, Z
 420:	88 60       	ori	r24, 0x08	; 8
 422:	80 83       	st	Z, r24
	}
	/*!	enables using fprint() instead of USART_tx_string() */
	fdevopen(USART_tx, USART_rx);
 424:	69 ef       	ldi	r22, 0xF9	; 249
 426:	71 e0       	ldi	r23, 0x01	; 1
 428:	80 ef       	ldi	r24, 0xF0	; 240
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	01 c0       	rjmp	.+2      	; 0x430 <fdevopen>
 42e:	08 95       	ret

00000430 <fdevopen>:
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	31 f4       	brne	.+12     	; 0x448 <fdevopen+0x18>
 43c:	61 15       	cp	r22, r1
 43e:	71 05       	cpc	r23, r1
 440:	19 f4       	brne	.+6      	; 0x448 <fdevopen+0x18>
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	39 c0       	rjmp	.+114    	; 0x4ba <fdevopen+0x8a>
 448:	8b 01       	movw	r16, r22
 44a:	ec 01       	movw	r28, r24
 44c:	6e e0       	ldi	r22, 0x0E	; 14
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	3d d2       	rcall	.+1146   	; 0x8d0 <calloc>
 456:	fc 01       	movw	r30, r24
 458:	89 2b       	or	r24, r25
 45a:	99 f3       	breq	.-26     	; 0x442 <fdevopen+0x12>
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	83 83       	std	Z+3, r24	; 0x03
 460:	01 15       	cp	r16, r1
 462:	11 05       	cpc	r17, r1
 464:	71 f0       	breq	.+28     	; 0x482 <fdevopen+0x52>
 466:	13 87       	std	Z+11, r17	; 0x0b
 468:	02 87       	std	Z+10, r16	; 0x0a
 46a:	81 e8       	ldi	r24, 0x81	; 129
 46c:	83 83       	std	Z+3, r24	; 0x03
 46e:	80 91 87 01 	lds	r24, 0x0187
 472:	90 91 88 01 	lds	r25, 0x0188
 476:	89 2b       	or	r24, r25
 478:	21 f4       	brne	.+8      	; 0x482 <fdevopen+0x52>
 47a:	f0 93 88 01 	sts	0x0188, r31
 47e:	e0 93 87 01 	sts	0x0187, r30
 482:	20 97       	sbiw	r28, 0x00	; 0
 484:	c9 f0       	breq	.+50     	; 0x4b8 <fdevopen+0x88>
 486:	d1 87       	std	Z+9, r29	; 0x09
 488:	c0 87       	std	Z+8, r28	; 0x08
 48a:	83 81       	ldd	r24, Z+3	; 0x03
 48c:	82 60       	ori	r24, 0x02	; 2
 48e:	83 83       	std	Z+3, r24	; 0x03
 490:	80 91 89 01 	lds	r24, 0x0189
 494:	90 91 8a 01 	lds	r25, 0x018A
 498:	89 2b       	or	r24, r25
 49a:	71 f4       	brne	.+28     	; 0x4b8 <fdevopen+0x88>
 49c:	f0 93 8a 01 	sts	0x018A, r31
 4a0:	e0 93 89 01 	sts	0x0189, r30
 4a4:	80 91 8b 01 	lds	r24, 0x018B
 4a8:	90 91 8c 01 	lds	r25, 0x018C
 4ac:	89 2b       	or	r24, r25
 4ae:	21 f4       	brne	.+8      	; 0x4b8 <fdevopen+0x88>
 4b0:	f0 93 8c 01 	sts	0x018C, r31
 4b4:	e0 93 8b 01 	sts	0x018B, r30
 4b8:	cf 01       	movw	r24, r30
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	08 95       	ret

000004c4 <printf>:
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	ae 01       	movw	r20, r28
 4ce:	4b 5f       	subi	r20, 0xFB	; 251
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255
 4d2:	fa 01       	movw	r30, r20
 4d4:	61 91       	ld	r22, Z+
 4d6:	71 91       	ld	r23, Z+
 4d8:	af 01       	movw	r20, r30
 4da:	80 91 89 01 	lds	r24, 0x0189
 4de:	90 91 8a 01 	lds	r25, 0x018A
 4e2:	08 d0       	rcall	.+16     	; 0x4f4 <vfprintf>
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <putchar>:
 4ea:	60 91 89 01 	lds	r22, 0x0189
 4ee:	70 91 8a 01 	lds	r23, 0x018A
 4f2:	52 c3       	rjmp	.+1700   	; 0xb98 <fputc>

000004f4 <vfprintf>:
 4f4:	2f 92       	push	r2
 4f6:	3f 92       	push	r3
 4f8:	4f 92       	push	r4
 4fa:	5f 92       	push	r5
 4fc:	6f 92       	push	r6
 4fe:	7f 92       	push	r7
 500:	8f 92       	push	r8
 502:	9f 92       	push	r9
 504:	af 92       	push	r10
 506:	bf 92       	push	r11
 508:	cf 92       	push	r12
 50a:	df 92       	push	r13
 50c:	ef 92       	push	r14
 50e:	ff 92       	push	r15
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
 51c:	2c 97       	sbiw	r28, 0x0c	; 12
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	f8 94       	cli
 522:	de bf       	out	0x3e, r29	; 62
 524:	0f be       	out	0x3f, r0	; 63
 526:	cd bf       	out	0x3d, r28	; 61
 528:	7c 01       	movw	r14, r24
 52a:	6b 01       	movw	r12, r22
 52c:	8a 01       	movw	r16, r20
 52e:	fc 01       	movw	r30, r24
 530:	17 82       	std	Z+7, r1	; 0x07
 532:	16 82       	std	Z+6, r1	; 0x06
 534:	83 81       	ldd	r24, Z+3	; 0x03
 536:	81 ff       	sbrs	r24, 1
 538:	b0 c1       	rjmp	.+864    	; 0x89a <vfprintf+0x3a6>
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	4c 01       	movw	r8, r24
 540:	f7 01       	movw	r30, r14
 542:	93 81       	ldd	r25, Z+3	; 0x03
 544:	f6 01       	movw	r30, r12
 546:	93 fd       	sbrc	r25, 3
 548:	85 91       	lpm	r24, Z+
 54a:	93 ff       	sbrs	r25, 3
 54c:	81 91       	ld	r24, Z+
 54e:	6f 01       	movw	r12, r30
 550:	88 23       	and	r24, r24
 552:	09 f4       	brne	.+2      	; 0x556 <vfprintf+0x62>
 554:	9e c1       	rjmp	.+828    	; 0x892 <vfprintf+0x39e>
 556:	85 32       	cpi	r24, 0x25	; 37
 558:	39 f4       	brne	.+14     	; 0x568 <vfprintf+0x74>
 55a:	93 fd       	sbrc	r25, 3
 55c:	85 91       	lpm	r24, Z+
 55e:	93 ff       	sbrs	r25, 3
 560:	81 91       	ld	r24, Z+
 562:	6f 01       	movw	r12, r30
 564:	85 32       	cpi	r24, 0x25	; 37
 566:	21 f4       	brne	.+8      	; 0x570 <vfprintf+0x7c>
 568:	b7 01       	movw	r22, r14
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	15 d3       	rcall	.+1578   	; 0xb98 <fputc>
 56e:	e8 cf       	rjmp	.-48     	; 0x540 <vfprintf+0x4c>
 570:	51 2c       	mov	r5, r1
 572:	31 2c       	mov	r3, r1
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	20 32       	cpi	r18, 0x20	; 32
 578:	a0 f4       	brcc	.+40     	; 0x5a2 <vfprintf+0xae>
 57a:	8b 32       	cpi	r24, 0x2B	; 43
 57c:	69 f0       	breq	.+26     	; 0x598 <vfprintf+0xa4>
 57e:	30 f4       	brcc	.+12     	; 0x58c <vfprintf+0x98>
 580:	80 32       	cpi	r24, 0x20	; 32
 582:	59 f0       	breq	.+22     	; 0x59a <vfprintf+0xa6>
 584:	83 32       	cpi	r24, 0x23	; 35
 586:	69 f4       	brne	.+26     	; 0x5a2 <vfprintf+0xae>
 588:	20 61       	ori	r18, 0x10	; 16
 58a:	2c c0       	rjmp	.+88     	; 0x5e4 <vfprintf+0xf0>
 58c:	8d 32       	cpi	r24, 0x2D	; 45
 58e:	39 f0       	breq	.+14     	; 0x59e <vfprintf+0xaa>
 590:	80 33       	cpi	r24, 0x30	; 48
 592:	39 f4       	brne	.+14     	; 0x5a2 <vfprintf+0xae>
 594:	21 60       	ori	r18, 0x01	; 1
 596:	26 c0       	rjmp	.+76     	; 0x5e4 <vfprintf+0xf0>
 598:	22 60       	ori	r18, 0x02	; 2
 59a:	24 60       	ori	r18, 0x04	; 4
 59c:	23 c0       	rjmp	.+70     	; 0x5e4 <vfprintf+0xf0>
 59e:	28 60       	ori	r18, 0x08	; 8
 5a0:	21 c0       	rjmp	.+66     	; 0x5e4 <vfprintf+0xf0>
 5a2:	27 fd       	sbrc	r18, 7
 5a4:	27 c0       	rjmp	.+78     	; 0x5f4 <vfprintf+0x100>
 5a6:	30 ed       	ldi	r19, 0xD0	; 208
 5a8:	38 0f       	add	r19, r24
 5aa:	3a 30       	cpi	r19, 0x0A	; 10
 5ac:	78 f4       	brcc	.+30     	; 0x5cc <vfprintf+0xd8>
 5ae:	26 ff       	sbrs	r18, 6
 5b0:	06 c0       	rjmp	.+12     	; 0x5be <vfprintf+0xca>
 5b2:	fa e0       	ldi	r31, 0x0A	; 10
 5b4:	5f 9e       	mul	r5, r31
 5b6:	30 0d       	add	r19, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	53 2e       	mov	r5, r19
 5bc:	13 c0       	rjmp	.+38     	; 0x5e4 <vfprintf+0xf0>
 5be:	8a e0       	ldi	r24, 0x0A	; 10
 5c0:	38 9e       	mul	r3, r24
 5c2:	30 0d       	add	r19, r0
 5c4:	11 24       	eor	r1, r1
 5c6:	33 2e       	mov	r3, r19
 5c8:	20 62       	ori	r18, 0x20	; 32
 5ca:	0c c0       	rjmp	.+24     	; 0x5e4 <vfprintf+0xf0>
 5cc:	8e 32       	cpi	r24, 0x2E	; 46
 5ce:	21 f4       	brne	.+8      	; 0x5d8 <vfprintf+0xe4>
 5d0:	26 fd       	sbrc	r18, 6
 5d2:	5f c1       	rjmp	.+702    	; 0x892 <vfprintf+0x39e>
 5d4:	20 64       	ori	r18, 0x40	; 64
 5d6:	06 c0       	rjmp	.+12     	; 0x5e4 <vfprintf+0xf0>
 5d8:	8c 36       	cpi	r24, 0x6C	; 108
 5da:	11 f4       	brne	.+4      	; 0x5e0 <vfprintf+0xec>
 5dc:	20 68       	ori	r18, 0x80	; 128
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <vfprintf+0xf0>
 5e0:	88 36       	cpi	r24, 0x68	; 104
 5e2:	41 f4       	brne	.+16     	; 0x5f4 <vfprintf+0x100>
 5e4:	f6 01       	movw	r30, r12
 5e6:	93 fd       	sbrc	r25, 3
 5e8:	85 91       	lpm	r24, Z+
 5ea:	93 ff       	sbrs	r25, 3
 5ec:	81 91       	ld	r24, Z+
 5ee:	6f 01       	movw	r12, r30
 5f0:	81 11       	cpse	r24, r1
 5f2:	c1 cf       	rjmp	.-126    	; 0x576 <vfprintf+0x82>
 5f4:	98 2f       	mov	r25, r24
 5f6:	9f 7d       	andi	r25, 0xDF	; 223
 5f8:	95 54       	subi	r25, 0x45	; 69
 5fa:	93 30       	cpi	r25, 0x03	; 3
 5fc:	28 f4       	brcc	.+10     	; 0x608 <vfprintf+0x114>
 5fe:	0c 5f       	subi	r16, 0xFC	; 252
 600:	1f 4f       	sbci	r17, 0xFF	; 255
 602:	ff e3       	ldi	r31, 0x3F	; 63
 604:	f9 83       	std	Y+1, r31	; 0x01
 606:	0d c0       	rjmp	.+26     	; 0x622 <vfprintf+0x12e>
 608:	83 36       	cpi	r24, 0x63	; 99
 60a:	31 f0       	breq	.+12     	; 0x618 <vfprintf+0x124>
 60c:	83 37       	cpi	r24, 0x73	; 115
 60e:	71 f0       	breq	.+28     	; 0x62c <vfprintf+0x138>
 610:	83 35       	cpi	r24, 0x53	; 83
 612:	09 f0       	breq	.+2      	; 0x616 <vfprintf+0x122>
 614:	57 c0       	rjmp	.+174    	; 0x6c4 <vfprintf+0x1d0>
 616:	21 c0       	rjmp	.+66     	; 0x65a <vfprintf+0x166>
 618:	f8 01       	movw	r30, r16
 61a:	80 81       	ld	r24, Z
 61c:	89 83       	std	Y+1, r24	; 0x01
 61e:	0e 5f       	subi	r16, 0xFE	; 254
 620:	1f 4f       	sbci	r17, 0xFF	; 255
 622:	44 24       	eor	r4, r4
 624:	43 94       	inc	r4
 626:	51 2c       	mov	r5, r1
 628:	54 01       	movw	r10, r8
 62a:	14 c0       	rjmp	.+40     	; 0x654 <vfprintf+0x160>
 62c:	38 01       	movw	r6, r16
 62e:	f2 e0       	ldi	r31, 0x02	; 2
 630:	6f 0e       	add	r6, r31
 632:	71 1c       	adc	r7, r1
 634:	f8 01       	movw	r30, r16
 636:	a0 80       	ld	r10, Z
 638:	b1 80       	ldd	r11, Z+1	; 0x01
 63a:	26 ff       	sbrs	r18, 6
 63c:	03 c0       	rjmp	.+6      	; 0x644 <vfprintf+0x150>
 63e:	65 2d       	mov	r22, r5
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <vfprintf+0x154>
 644:	6f ef       	ldi	r22, 0xFF	; 255
 646:	7f ef       	ldi	r23, 0xFF	; 255
 648:	c5 01       	movw	r24, r10
 64a:	2c 87       	std	Y+12, r18	; 0x0c
 64c:	9a d2       	rcall	.+1332   	; 0xb82 <strnlen>
 64e:	2c 01       	movw	r4, r24
 650:	83 01       	movw	r16, r6
 652:	2c 85       	ldd	r18, Y+12	; 0x0c
 654:	2f 77       	andi	r18, 0x7F	; 127
 656:	22 2e       	mov	r2, r18
 658:	16 c0       	rjmp	.+44     	; 0x686 <vfprintf+0x192>
 65a:	38 01       	movw	r6, r16
 65c:	f2 e0       	ldi	r31, 0x02	; 2
 65e:	6f 0e       	add	r6, r31
 660:	71 1c       	adc	r7, r1
 662:	f8 01       	movw	r30, r16
 664:	a0 80       	ld	r10, Z
 666:	b1 80       	ldd	r11, Z+1	; 0x01
 668:	26 ff       	sbrs	r18, 6
 66a:	03 c0       	rjmp	.+6      	; 0x672 <vfprintf+0x17e>
 66c:	65 2d       	mov	r22, r5
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <vfprintf+0x182>
 672:	6f ef       	ldi	r22, 0xFF	; 255
 674:	7f ef       	ldi	r23, 0xFF	; 255
 676:	c5 01       	movw	r24, r10
 678:	2c 87       	std	Y+12, r18	; 0x0c
 67a:	71 d2       	rcall	.+1250   	; 0xb5e <strnlen_P>
 67c:	2c 01       	movw	r4, r24
 67e:	2c 85       	ldd	r18, Y+12	; 0x0c
 680:	20 68       	ori	r18, 0x80	; 128
 682:	22 2e       	mov	r2, r18
 684:	83 01       	movw	r16, r6
 686:	23 fc       	sbrc	r2, 3
 688:	19 c0       	rjmp	.+50     	; 0x6bc <vfprintf+0x1c8>
 68a:	83 2d       	mov	r24, r3
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	48 16       	cp	r4, r24
 690:	59 06       	cpc	r5, r25
 692:	a0 f4       	brcc	.+40     	; 0x6bc <vfprintf+0x1c8>
 694:	b7 01       	movw	r22, r14
 696:	80 e2       	ldi	r24, 0x20	; 32
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	7e d2       	rcall	.+1276   	; 0xb98 <fputc>
 69c:	3a 94       	dec	r3
 69e:	f5 cf       	rjmp	.-22     	; 0x68a <vfprintf+0x196>
 6a0:	f5 01       	movw	r30, r10
 6a2:	27 fc       	sbrc	r2, 7
 6a4:	85 91       	lpm	r24, Z+
 6a6:	27 fe       	sbrs	r2, 7
 6a8:	81 91       	ld	r24, Z+
 6aa:	5f 01       	movw	r10, r30
 6ac:	b7 01       	movw	r22, r14
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	73 d2       	rcall	.+1254   	; 0xb98 <fputc>
 6b2:	31 10       	cpse	r3, r1
 6b4:	3a 94       	dec	r3
 6b6:	f1 e0       	ldi	r31, 0x01	; 1
 6b8:	4f 1a       	sub	r4, r31
 6ba:	51 08       	sbc	r5, r1
 6bc:	41 14       	cp	r4, r1
 6be:	51 04       	cpc	r5, r1
 6c0:	79 f7       	brne	.-34     	; 0x6a0 <vfprintf+0x1ac>
 6c2:	de c0       	rjmp	.+444    	; 0x880 <vfprintf+0x38c>
 6c4:	84 36       	cpi	r24, 0x64	; 100
 6c6:	11 f0       	breq	.+4      	; 0x6cc <vfprintf+0x1d8>
 6c8:	89 36       	cpi	r24, 0x69	; 105
 6ca:	31 f5       	brne	.+76     	; 0x718 <vfprintf+0x224>
 6cc:	f8 01       	movw	r30, r16
 6ce:	27 ff       	sbrs	r18, 7
 6d0:	07 c0       	rjmp	.+14     	; 0x6e0 <vfprintf+0x1ec>
 6d2:	60 81       	ld	r22, Z
 6d4:	71 81       	ldd	r23, Z+1	; 0x01
 6d6:	82 81       	ldd	r24, Z+2	; 0x02
 6d8:	93 81       	ldd	r25, Z+3	; 0x03
 6da:	0c 5f       	subi	r16, 0xFC	; 252
 6dc:	1f 4f       	sbci	r17, 0xFF	; 255
 6de:	08 c0       	rjmp	.+16     	; 0x6f0 <vfprintf+0x1fc>
 6e0:	60 81       	ld	r22, Z
 6e2:	71 81       	ldd	r23, Z+1	; 0x01
 6e4:	07 2e       	mov	r0, r23
 6e6:	00 0c       	add	r0, r0
 6e8:	88 0b       	sbc	r24, r24
 6ea:	99 0b       	sbc	r25, r25
 6ec:	0e 5f       	subi	r16, 0xFE	; 254
 6ee:	1f 4f       	sbci	r17, 0xFF	; 255
 6f0:	2f 76       	andi	r18, 0x6F	; 111
 6f2:	72 2e       	mov	r7, r18
 6f4:	97 ff       	sbrs	r25, 7
 6f6:	09 c0       	rjmp	.+18     	; 0x70a <vfprintf+0x216>
 6f8:	90 95       	com	r25
 6fa:	80 95       	com	r24
 6fc:	70 95       	com	r23
 6fe:	61 95       	neg	r22
 700:	7f 4f       	sbci	r23, 0xFF	; 255
 702:	8f 4f       	sbci	r24, 0xFF	; 255
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	20 68       	ori	r18, 0x80	; 128
 708:	72 2e       	mov	r7, r18
 70a:	2a e0       	ldi	r18, 0x0A	; 10
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	a4 01       	movw	r20, r8
 710:	7b d2       	rcall	.+1270   	; 0xc08 <__ultoa_invert>
 712:	a8 2e       	mov	r10, r24
 714:	a8 18       	sub	r10, r8
 716:	43 c0       	rjmp	.+134    	; 0x79e <vfprintf+0x2aa>
 718:	85 37       	cpi	r24, 0x75	; 117
 71a:	29 f4       	brne	.+10     	; 0x726 <vfprintf+0x232>
 71c:	2f 7e       	andi	r18, 0xEF	; 239
 71e:	b2 2e       	mov	r11, r18
 720:	2a e0       	ldi	r18, 0x0A	; 10
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	25 c0       	rjmp	.+74     	; 0x770 <vfprintf+0x27c>
 726:	f2 2f       	mov	r31, r18
 728:	f9 7f       	andi	r31, 0xF9	; 249
 72a:	bf 2e       	mov	r11, r31
 72c:	8f 36       	cpi	r24, 0x6F	; 111
 72e:	c1 f0       	breq	.+48     	; 0x760 <vfprintf+0x26c>
 730:	18 f4       	brcc	.+6      	; 0x738 <vfprintf+0x244>
 732:	88 35       	cpi	r24, 0x58	; 88
 734:	79 f0       	breq	.+30     	; 0x754 <vfprintf+0x260>
 736:	ad c0       	rjmp	.+346    	; 0x892 <vfprintf+0x39e>
 738:	80 37       	cpi	r24, 0x70	; 112
 73a:	19 f0       	breq	.+6      	; 0x742 <vfprintf+0x24e>
 73c:	88 37       	cpi	r24, 0x78	; 120
 73e:	21 f0       	breq	.+8      	; 0x748 <vfprintf+0x254>
 740:	a8 c0       	rjmp	.+336    	; 0x892 <vfprintf+0x39e>
 742:	2f 2f       	mov	r18, r31
 744:	20 61       	ori	r18, 0x10	; 16
 746:	b2 2e       	mov	r11, r18
 748:	b4 fe       	sbrs	r11, 4
 74a:	0d c0       	rjmp	.+26     	; 0x766 <vfprintf+0x272>
 74c:	8b 2d       	mov	r24, r11
 74e:	84 60       	ori	r24, 0x04	; 4
 750:	b8 2e       	mov	r11, r24
 752:	09 c0       	rjmp	.+18     	; 0x766 <vfprintf+0x272>
 754:	24 ff       	sbrs	r18, 4
 756:	0a c0       	rjmp	.+20     	; 0x76c <vfprintf+0x278>
 758:	9f 2f       	mov	r25, r31
 75a:	96 60       	ori	r25, 0x06	; 6
 75c:	b9 2e       	mov	r11, r25
 75e:	06 c0       	rjmp	.+12     	; 0x76c <vfprintf+0x278>
 760:	28 e0       	ldi	r18, 0x08	; 8
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	05 c0       	rjmp	.+10     	; 0x770 <vfprintf+0x27c>
 766:	20 e1       	ldi	r18, 0x10	; 16
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <vfprintf+0x27c>
 76c:	20 e1       	ldi	r18, 0x10	; 16
 76e:	32 e0       	ldi	r19, 0x02	; 2
 770:	f8 01       	movw	r30, r16
 772:	b7 fe       	sbrs	r11, 7
 774:	07 c0       	rjmp	.+14     	; 0x784 <vfprintf+0x290>
 776:	60 81       	ld	r22, Z
 778:	71 81       	ldd	r23, Z+1	; 0x01
 77a:	82 81       	ldd	r24, Z+2	; 0x02
 77c:	93 81       	ldd	r25, Z+3	; 0x03
 77e:	0c 5f       	subi	r16, 0xFC	; 252
 780:	1f 4f       	sbci	r17, 0xFF	; 255
 782:	06 c0       	rjmp	.+12     	; 0x790 <vfprintf+0x29c>
 784:	60 81       	ld	r22, Z
 786:	71 81       	ldd	r23, Z+1	; 0x01
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 5f       	subi	r16, 0xFE	; 254
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	a4 01       	movw	r20, r8
 792:	3a d2       	rcall	.+1140   	; 0xc08 <__ultoa_invert>
 794:	a8 2e       	mov	r10, r24
 796:	a8 18       	sub	r10, r8
 798:	fb 2d       	mov	r31, r11
 79a:	ff 77       	andi	r31, 0x7F	; 127
 79c:	7f 2e       	mov	r7, r31
 79e:	76 fe       	sbrs	r7, 6
 7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <vfprintf+0x2c4>
 7a2:	37 2d       	mov	r19, r7
 7a4:	3e 7f       	andi	r19, 0xFE	; 254
 7a6:	a5 14       	cp	r10, r5
 7a8:	50 f4       	brcc	.+20     	; 0x7be <vfprintf+0x2ca>
 7aa:	74 fe       	sbrs	r7, 4
 7ac:	0a c0       	rjmp	.+20     	; 0x7c2 <vfprintf+0x2ce>
 7ae:	72 fc       	sbrc	r7, 2
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <vfprintf+0x2ce>
 7b2:	37 2d       	mov	r19, r7
 7b4:	3e 7e       	andi	r19, 0xEE	; 238
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <vfprintf+0x2ce>
 7b8:	ba 2c       	mov	r11, r10
 7ba:	37 2d       	mov	r19, r7
 7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <vfprintf+0x2d0>
 7be:	ba 2c       	mov	r11, r10
 7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <vfprintf+0x2d0>
 7c2:	b5 2c       	mov	r11, r5
 7c4:	34 ff       	sbrs	r19, 4
 7c6:	0d c0       	rjmp	.+26     	; 0x7e2 <vfprintf+0x2ee>
 7c8:	fe 01       	movw	r30, r28
 7ca:	ea 0d       	add	r30, r10
 7cc:	f1 1d       	adc	r31, r1
 7ce:	80 81       	ld	r24, Z
 7d0:	80 33       	cpi	r24, 0x30	; 48
 7d2:	11 f4       	brne	.+4      	; 0x7d8 <vfprintf+0x2e4>
 7d4:	39 7e       	andi	r19, 0xE9	; 233
 7d6:	09 c0       	rjmp	.+18     	; 0x7ea <vfprintf+0x2f6>
 7d8:	32 ff       	sbrs	r19, 2
 7da:	06 c0       	rjmp	.+12     	; 0x7e8 <vfprintf+0x2f4>
 7dc:	b3 94       	inc	r11
 7de:	b3 94       	inc	r11
 7e0:	04 c0       	rjmp	.+8      	; 0x7ea <vfprintf+0x2f6>
 7e2:	83 2f       	mov	r24, r19
 7e4:	86 78       	andi	r24, 0x86	; 134
 7e6:	09 f0       	breq	.+2      	; 0x7ea <vfprintf+0x2f6>
 7e8:	b3 94       	inc	r11
 7ea:	33 fd       	sbrc	r19, 3
 7ec:	12 c0       	rjmp	.+36     	; 0x812 <vfprintf+0x31e>
 7ee:	30 ff       	sbrs	r19, 0
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0x30a>
 7f2:	5a 2c       	mov	r5, r10
 7f4:	b3 14       	cp	r11, r3
 7f6:	18 f4       	brcc	.+6      	; 0x7fe <vfprintf+0x30a>
 7f8:	53 0c       	add	r5, r3
 7fa:	5b 18       	sub	r5, r11
 7fc:	b3 2c       	mov	r11, r3
 7fe:	b3 14       	cp	r11, r3
 800:	60 f4       	brcc	.+24     	; 0x81a <vfprintf+0x326>
 802:	b7 01       	movw	r22, r14
 804:	80 e2       	ldi	r24, 0x20	; 32
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	3c 87       	std	Y+12, r19	; 0x0c
 80a:	c6 d1       	rcall	.+908    	; 0xb98 <fputc>
 80c:	b3 94       	inc	r11
 80e:	3c 85       	ldd	r19, Y+12	; 0x0c
 810:	f6 cf       	rjmp	.-20     	; 0x7fe <vfprintf+0x30a>
 812:	b3 14       	cp	r11, r3
 814:	10 f4       	brcc	.+4      	; 0x81a <vfprintf+0x326>
 816:	3b 18       	sub	r3, r11
 818:	01 c0       	rjmp	.+2      	; 0x81c <vfprintf+0x328>
 81a:	31 2c       	mov	r3, r1
 81c:	34 ff       	sbrs	r19, 4
 81e:	11 c0       	rjmp	.+34     	; 0x842 <vfprintf+0x34e>
 820:	b7 01       	movw	r22, r14
 822:	80 e3       	ldi	r24, 0x30	; 48
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	3c 87       	std	Y+12, r19	; 0x0c
 828:	b7 d1       	rcall	.+878    	; 0xb98 <fputc>
 82a:	3c 85       	ldd	r19, Y+12	; 0x0c
 82c:	32 ff       	sbrs	r19, 2
 82e:	16 c0       	rjmp	.+44     	; 0x85c <vfprintf+0x368>
 830:	31 fd       	sbrc	r19, 1
 832:	03 c0       	rjmp	.+6      	; 0x83a <vfprintf+0x346>
 834:	88 e7       	ldi	r24, 0x78	; 120
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	02 c0       	rjmp	.+4      	; 0x83e <vfprintf+0x34a>
 83a:	88 e5       	ldi	r24, 0x58	; 88
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	b7 01       	movw	r22, r14
 840:	0c c0       	rjmp	.+24     	; 0x85a <vfprintf+0x366>
 842:	83 2f       	mov	r24, r19
 844:	86 78       	andi	r24, 0x86	; 134
 846:	51 f0       	breq	.+20     	; 0x85c <vfprintf+0x368>
 848:	31 ff       	sbrs	r19, 1
 84a:	02 c0       	rjmp	.+4      	; 0x850 <vfprintf+0x35c>
 84c:	8b e2       	ldi	r24, 0x2B	; 43
 84e:	01 c0       	rjmp	.+2      	; 0x852 <vfprintf+0x35e>
 850:	80 e2       	ldi	r24, 0x20	; 32
 852:	37 fd       	sbrc	r19, 7
 854:	8d e2       	ldi	r24, 0x2D	; 45
 856:	b7 01       	movw	r22, r14
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	9e d1       	rcall	.+828    	; 0xb98 <fputc>
 85c:	a5 14       	cp	r10, r5
 85e:	30 f4       	brcc	.+12     	; 0x86c <vfprintf+0x378>
 860:	b7 01       	movw	r22, r14
 862:	80 e3       	ldi	r24, 0x30	; 48
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	98 d1       	rcall	.+816    	; 0xb98 <fputc>
 868:	5a 94       	dec	r5
 86a:	f8 cf       	rjmp	.-16     	; 0x85c <vfprintf+0x368>
 86c:	aa 94       	dec	r10
 86e:	f4 01       	movw	r30, r8
 870:	ea 0d       	add	r30, r10
 872:	f1 1d       	adc	r31, r1
 874:	80 81       	ld	r24, Z
 876:	b7 01       	movw	r22, r14
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	8e d1       	rcall	.+796    	; 0xb98 <fputc>
 87c:	a1 10       	cpse	r10, r1
 87e:	f6 cf       	rjmp	.-20     	; 0x86c <vfprintf+0x378>
 880:	33 20       	and	r3, r3
 882:	09 f4       	brne	.+2      	; 0x886 <vfprintf+0x392>
 884:	5d ce       	rjmp	.-838    	; 0x540 <vfprintf+0x4c>
 886:	b7 01       	movw	r22, r14
 888:	80 e2       	ldi	r24, 0x20	; 32
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	85 d1       	rcall	.+778    	; 0xb98 <fputc>
 88e:	3a 94       	dec	r3
 890:	f7 cf       	rjmp	.-18     	; 0x880 <vfprintf+0x38c>
 892:	f7 01       	movw	r30, r14
 894:	86 81       	ldd	r24, Z+6	; 0x06
 896:	97 81       	ldd	r25, Z+7	; 0x07
 898:	02 c0       	rjmp	.+4      	; 0x89e <vfprintf+0x3aa>
 89a:	8f ef       	ldi	r24, 0xFF	; 255
 89c:	9f ef       	ldi	r25, 0xFF	; 255
 89e:	2c 96       	adiw	r28, 0x0c	; 12
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	1f 91       	pop	r17
 8b0:	0f 91       	pop	r16
 8b2:	ff 90       	pop	r15
 8b4:	ef 90       	pop	r14
 8b6:	df 90       	pop	r13
 8b8:	cf 90       	pop	r12
 8ba:	bf 90       	pop	r11
 8bc:	af 90       	pop	r10
 8be:	9f 90       	pop	r9
 8c0:	8f 90       	pop	r8
 8c2:	7f 90       	pop	r7
 8c4:	6f 90       	pop	r6
 8c6:	5f 90       	pop	r5
 8c8:	4f 90       	pop	r4
 8ca:	3f 90       	pop	r3
 8cc:	2f 90       	pop	r2
 8ce:	08 95       	ret

000008d0 <calloc>:
 8d0:	0f 93       	push	r16
 8d2:	1f 93       	push	r17
 8d4:	cf 93       	push	r28
 8d6:	df 93       	push	r29
 8d8:	86 9f       	mul	r24, r22
 8da:	80 01       	movw	r16, r0
 8dc:	87 9f       	mul	r24, r23
 8de:	10 0d       	add	r17, r0
 8e0:	96 9f       	mul	r25, r22
 8e2:	10 0d       	add	r17, r0
 8e4:	11 24       	eor	r1, r1
 8e6:	c8 01       	movw	r24, r16
 8e8:	0d d0       	rcall	.+26     	; 0x904 <malloc>
 8ea:	ec 01       	movw	r28, r24
 8ec:	00 97       	sbiw	r24, 0x00	; 0
 8ee:	21 f0       	breq	.+8      	; 0x8f8 <calloc+0x28>
 8f0:	a8 01       	movw	r20, r16
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	70 e0       	ldi	r23, 0x00	; 0
 8f6:	3e d1       	rcall	.+636    	; 0xb74 <memset>
 8f8:	ce 01       	movw	r24, r28
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	1f 91       	pop	r17
 900:	0f 91       	pop	r16
 902:	08 95       	ret

00000904 <malloc>:
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	82 30       	cpi	r24, 0x02	; 2
 90a:	91 05       	cpc	r25, r1
 90c:	10 f4       	brcc	.+4      	; 0x912 <malloc+0xe>
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	e0 91 8f 01 	lds	r30, 0x018F
 916:	f0 91 90 01 	lds	r31, 0x0190
 91a:	20 e0       	ldi	r18, 0x00	; 0
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	c0 e0       	ldi	r28, 0x00	; 0
 920:	d0 e0       	ldi	r29, 0x00	; 0
 922:	30 97       	sbiw	r30, 0x00	; 0
 924:	11 f1       	breq	.+68     	; 0x96a <malloc+0x66>
 926:	40 81       	ld	r20, Z
 928:	51 81       	ldd	r21, Z+1	; 0x01
 92a:	48 17       	cp	r20, r24
 92c:	59 07       	cpc	r21, r25
 92e:	c0 f0       	brcs	.+48     	; 0x960 <malloc+0x5c>
 930:	48 17       	cp	r20, r24
 932:	59 07       	cpc	r21, r25
 934:	61 f4       	brne	.+24     	; 0x94e <malloc+0x4a>
 936:	82 81       	ldd	r24, Z+2	; 0x02
 938:	93 81       	ldd	r25, Z+3	; 0x03
 93a:	20 97       	sbiw	r28, 0x00	; 0
 93c:	19 f0       	breq	.+6      	; 0x944 <malloc+0x40>
 93e:	9b 83       	std	Y+3, r25	; 0x03
 940:	8a 83       	std	Y+2, r24	; 0x02
 942:	2b c0       	rjmp	.+86     	; 0x99a <malloc+0x96>
 944:	90 93 90 01 	sts	0x0190, r25
 948:	80 93 8f 01 	sts	0x018F, r24
 94c:	26 c0       	rjmp	.+76     	; 0x99a <malloc+0x96>
 94e:	21 15       	cp	r18, r1
 950:	31 05       	cpc	r19, r1
 952:	19 f0       	breq	.+6      	; 0x95a <malloc+0x56>
 954:	42 17       	cp	r20, r18
 956:	53 07       	cpc	r21, r19
 958:	18 f4       	brcc	.+6      	; 0x960 <malloc+0x5c>
 95a:	9a 01       	movw	r18, r20
 95c:	be 01       	movw	r22, r28
 95e:	df 01       	movw	r26, r30
 960:	ef 01       	movw	r28, r30
 962:	02 80       	ldd	r0, Z+2	; 0x02
 964:	f3 81       	ldd	r31, Z+3	; 0x03
 966:	e0 2d       	mov	r30, r0
 968:	dc cf       	rjmp	.-72     	; 0x922 <malloc+0x1e>
 96a:	21 15       	cp	r18, r1
 96c:	31 05       	cpc	r19, r1
 96e:	09 f1       	breq	.+66     	; 0x9b2 <malloc+0xae>
 970:	28 1b       	sub	r18, r24
 972:	39 0b       	sbc	r19, r25
 974:	24 30       	cpi	r18, 0x04	; 4
 976:	31 05       	cpc	r19, r1
 978:	90 f4       	brcc	.+36     	; 0x99e <malloc+0x9a>
 97a:	12 96       	adiw	r26, 0x02	; 2
 97c:	8d 91       	ld	r24, X+
 97e:	9c 91       	ld	r25, X
 980:	13 97       	sbiw	r26, 0x03	; 3
 982:	61 15       	cp	r22, r1
 984:	71 05       	cpc	r23, r1
 986:	21 f0       	breq	.+8      	; 0x990 <malloc+0x8c>
 988:	fb 01       	movw	r30, r22
 98a:	93 83       	std	Z+3, r25	; 0x03
 98c:	82 83       	std	Z+2, r24	; 0x02
 98e:	04 c0       	rjmp	.+8      	; 0x998 <malloc+0x94>
 990:	90 93 90 01 	sts	0x0190, r25
 994:	80 93 8f 01 	sts	0x018F, r24
 998:	fd 01       	movw	r30, r26
 99a:	32 96       	adiw	r30, 0x02	; 2
 99c:	44 c0       	rjmp	.+136    	; 0xa26 <malloc+0x122>
 99e:	fd 01       	movw	r30, r26
 9a0:	e2 0f       	add	r30, r18
 9a2:	f3 1f       	adc	r31, r19
 9a4:	81 93       	st	Z+, r24
 9a6:	91 93       	st	Z+, r25
 9a8:	22 50       	subi	r18, 0x02	; 2
 9aa:	31 09       	sbc	r19, r1
 9ac:	2d 93       	st	X+, r18
 9ae:	3c 93       	st	X, r19
 9b0:	3a c0       	rjmp	.+116    	; 0xa26 <malloc+0x122>
 9b2:	20 91 8d 01 	lds	r18, 0x018D
 9b6:	30 91 8e 01 	lds	r19, 0x018E
 9ba:	23 2b       	or	r18, r19
 9bc:	41 f4       	brne	.+16     	; 0x9ce <malloc+0xca>
 9be:	20 91 02 01 	lds	r18, 0x0102
 9c2:	30 91 03 01 	lds	r19, 0x0103
 9c6:	30 93 8e 01 	sts	0x018E, r19
 9ca:	20 93 8d 01 	sts	0x018D, r18
 9ce:	20 91 00 01 	lds	r18, 0x0100
 9d2:	30 91 01 01 	lds	r19, 0x0101
 9d6:	21 15       	cp	r18, r1
 9d8:	31 05       	cpc	r19, r1
 9da:	41 f4       	brne	.+16     	; 0x9ec <malloc+0xe8>
 9dc:	2d b7       	in	r18, 0x3d	; 61
 9de:	3e b7       	in	r19, 0x3e	; 62
 9e0:	40 91 04 01 	lds	r20, 0x0104
 9e4:	50 91 05 01 	lds	r21, 0x0105
 9e8:	24 1b       	sub	r18, r20
 9ea:	35 0b       	sbc	r19, r21
 9ec:	e0 91 8d 01 	lds	r30, 0x018D
 9f0:	f0 91 8e 01 	lds	r31, 0x018E
 9f4:	e2 17       	cp	r30, r18
 9f6:	f3 07       	cpc	r31, r19
 9f8:	a0 f4       	brcc	.+40     	; 0xa22 <malloc+0x11e>
 9fa:	2e 1b       	sub	r18, r30
 9fc:	3f 0b       	sbc	r19, r31
 9fe:	28 17       	cp	r18, r24
 a00:	39 07       	cpc	r19, r25
 a02:	78 f0       	brcs	.+30     	; 0xa22 <malloc+0x11e>
 a04:	ac 01       	movw	r20, r24
 a06:	4e 5f       	subi	r20, 0xFE	; 254
 a08:	5f 4f       	sbci	r21, 0xFF	; 255
 a0a:	24 17       	cp	r18, r20
 a0c:	35 07       	cpc	r19, r21
 a0e:	48 f0       	brcs	.+18     	; 0xa22 <malloc+0x11e>
 a10:	4e 0f       	add	r20, r30
 a12:	5f 1f       	adc	r21, r31
 a14:	50 93 8e 01 	sts	0x018E, r21
 a18:	40 93 8d 01 	sts	0x018D, r20
 a1c:	81 93       	st	Z+, r24
 a1e:	91 93       	st	Z+, r25
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <malloc+0x122>
 a22:	e0 e0       	ldi	r30, 0x00	; 0
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	cf 01       	movw	r24, r30
 a28:	df 91       	pop	r29
 a2a:	cf 91       	pop	r28
 a2c:	08 95       	ret

00000a2e <free>:
 a2e:	0f 93       	push	r16
 a30:	1f 93       	push	r17
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	00 97       	sbiw	r24, 0x00	; 0
 a38:	09 f4       	brne	.+2      	; 0xa3c <free+0xe>
 a3a:	8c c0       	rjmp	.+280    	; 0xb54 <free+0x126>
 a3c:	fc 01       	movw	r30, r24
 a3e:	32 97       	sbiw	r30, 0x02	; 2
 a40:	13 82       	std	Z+3, r1	; 0x03
 a42:	12 82       	std	Z+2, r1	; 0x02
 a44:	00 91 8f 01 	lds	r16, 0x018F
 a48:	10 91 90 01 	lds	r17, 0x0190
 a4c:	01 15       	cp	r16, r1
 a4e:	11 05       	cpc	r17, r1
 a50:	81 f4       	brne	.+32     	; 0xa72 <free+0x44>
 a52:	20 81       	ld	r18, Z
 a54:	31 81       	ldd	r19, Z+1	; 0x01
 a56:	82 0f       	add	r24, r18
 a58:	93 1f       	adc	r25, r19
 a5a:	20 91 8d 01 	lds	r18, 0x018D
 a5e:	30 91 8e 01 	lds	r19, 0x018E
 a62:	28 17       	cp	r18, r24
 a64:	39 07       	cpc	r19, r25
 a66:	79 f5       	brne	.+94     	; 0xac6 <free+0x98>
 a68:	f0 93 8e 01 	sts	0x018E, r31
 a6c:	e0 93 8d 01 	sts	0x018D, r30
 a70:	71 c0       	rjmp	.+226    	; 0xb54 <free+0x126>
 a72:	d8 01       	movw	r26, r16
 a74:	40 e0       	ldi	r20, 0x00	; 0
 a76:	50 e0       	ldi	r21, 0x00	; 0
 a78:	ae 17       	cp	r26, r30
 a7a:	bf 07       	cpc	r27, r31
 a7c:	50 f4       	brcc	.+20     	; 0xa92 <free+0x64>
 a7e:	12 96       	adiw	r26, 0x02	; 2
 a80:	2d 91       	ld	r18, X+
 a82:	3c 91       	ld	r19, X
 a84:	13 97       	sbiw	r26, 0x03	; 3
 a86:	ad 01       	movw	r20, r26
 a88:	21 15       	cp	r18, r1
 a8a:	31 05       	cpc	r19, r1
 a8c:	09 f1       	breq	.+66     	; 0xad0 <free+0xa2>
 a8e:	d9 01       	movw	r26, r18
 a90:	f3 cf       	rjmp	.-26     	; 0xa78 <free+0x4a>
 a92:	9d 01       	movw	r18, r26
 a94:	da 01       	movw	r26, r20
 a96:	33 83       	std	Z+3, r19	; 0x03
 a98:	22 83       	std	Z+2, r18	; 0x02
 a9a:	60 81       	ld	r22, Z
 a9c:	71 81       	ldd	r23, Z+1	; 0x01
 a9e:	86 0f       	add	r24, r22
 aa0:	97 1f       	adc	r25, r23
 aa2:	82 17       	cp	r24, r18
 aa4:	93 07       	cpc	r25, r19
 aa6:	69 f4       	brne	.+26     	; 0xac2 <free+0x94>
 aa8:	ec 01       	movw	r28, r24
 aaa:	28 81       	ld	r18, Y
 aac:	39 81       	ldd	r19, Y+1	; 0x01
 aae:	26 0f       	add	r18, r22
 ab0:	37 1f       	adc	r19, r23
 ab2:	2e 5f       	subi	r18, 0xFE	; 254
 ab4:	3f 4f       	sbci	r19, 0xFF	; 255
 ab6:	31 83       	std	Z+1, r19	; 0x01
 ab8:	20 83       	st	Z, r18
 aba:	8a 81       	ldd	r24, Y+2	; 0x02
 abc:	9b 81       	ldd	r25, Y+3	; 0x03
 abe:	93 83       	std	Z+3, r25	; 0x03
 ac0:	82 83       	std	Z+2, r24	; 0x02
 ac2:	45 2b       	or	r20, r21
 ac4:	29 f4       	brne	.+10     	; 0xad0 <free+0xa2>
 ac6:	f0 93 90 01 	sts	0x0190, r31
 aca:	e0 93 8f 01 	sts	0x018F, r30
 ace:	42 c0       	rjmp	.+132    	; 0xb54 <free+0x126>
 ad0:	13 96       	adiw	r26, 0x03	; 3
 ad2:	fc 93       	st	X, r31
 ad4:	ee 93       	st	-X, r30
 ad6:	12 97       	sbiw	r26, 0x02	; 2
 ad8:	ed 01       	movw	r28, r26
 ada:	49 91       	ld	r20, Y+
 adc:	59 91       	ld	r21, Y+
 ade:	9e 01       	movw	r18, r28
 ae0:	24 0f       	add	r18, r20
 ae2:	35 1f       	adc	r19, r21
 ae4:	e2 17       	cp	r30, r18
 ae6:	f3 07       	cpc	r31, r19
 ae8:	71 f4       	brne	.+28     	; 0xb06 <free+0xd8>
 aea:	80 81       	ld	r24, Z
 aec:	91 81       	ldd	r25, Z+1	; 0x01
 aee:	84 0f       	add	r24, r20
 af0:	95 1f       	adc	r25, r21
 af2:	02 96       	adiw	r24, 0x02	; 2
 af4:	11 96       	adiw	r26, 0x01	; 1
 af6:	9c 93       	st	X, r25
 af8:	8e 93       	st	-X, r24
 afa:	82 81       	ldd	r24, Z+2	; 0x02
 afc:	93 81       	ldd	r25, Z+3	; 0x03
 afe:	13 96       	adiw	r26, 0x03	; 3
 b00:	9c 93       	st	X, r25
 b02:	8e 93       	st	-X, r24
 b04:	12 97       	sbiw	r26, 0x02	; 2
 b06:	e0 e0       	ldi	r30, 0x00	; 0
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	d8 01       	movw	r26, r16
 b0c:	12 96       	adiw	r26, 0x02	; 2
 b0e:	8d 91       	ld	r24, X+
 b10:	9c 91       	ld	r25, X
 b12:	13 97       	sbiw	r26, 0x03	; 3
 b14:	00 97       	sbiw	r24, 0x00	; 0
 b16:	19 f0       	breq	.+6      	; 0xb1e <free+0xf0>
 b18:	f8 01       	movw	r30, r16
 b1a:	8c 01       	movw	r16, r24
 b1c:	f6 cf       	rjmp	.-20     	; 0xb0a <free+0xdc>
 b1e:	8d 91       	ld	r24, X+
 b20:	9c 91       	ld	r25, X
 b22:	98 01       	movw	r18, r16
 b24:	2e 5f       	subi	r18, 0xFE	; 254
 b26:	3f 4f       	sbci	r19, 0xFF	; 255
 b28:	82 0f       	add	r24, r18
 b2a:	93 1f       	adc	r25, r19
 b2c:	20 91 8d 01 	lds	r18, 0x018D
 b30:	30 91 8e 01 	lds	r19, 0x018E
 b34:	28 17       	cp	r18, r24
 b36:	39 07       	cpc	r19, r25
 b38:	69 f4       	brne	.+26     	; 0xb54 <free+0x126>
 b3a:	30 97       	sbiw	r30, 0x00	; 0
 b3c:	29 f4       	brne	.+10     	; 0xb48 <free+0x11a>
 b3e:	10 92 90 01 	sts	0x0190, r1
 b42:	10 92 8f 01 	sts	0x018F, r1
 b46:	02 c0       	rjmp	.+4      	; 0xb4c <free+0x11e>
 b48:	13 82       	std	Z+3, r1	; 0x03
 b4a:	12 82       	std	Z+2, r1	; 0x02
 b4c:	10 93 8e 01 	sts	0x018E, r17
 b50:	00 93 8d 01 	sts	0x018D, r16
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	1f 91       	pop	r17
 b5a:	0f 91       	pop	r16
 b5c:	08 95       	ret

00000b5e <strnlen_P>:
 b5e:	fc 01       	movw	r30, r24
 b60:	05 90       	lpm	r0, Z+
 b62:	61 50       	subi	r22, 0x01	; 1
 b64:	70 40       	sbci	r23, 0x00	; 0
 b66:	01 10       	cpse	r0, r1
 b68:	d8 f7       	brcc	.-10     	; 0xb60 <strnlen_P+0x2>
 b6a:	80 95       	com	r24
 b6c:	90 95       	com	r25
 b6e:	8e 0f       	add	r24, r30
 b70:	9f 1f       	adc	r25, r31
 b72:	08 95       	ret

00000b74 <memset>:
 b74:	dc 01       	movw	r26, r24
 b76:	01 c0       	rjmp	.+2      	; 0xb7a <memset+0x6>
 b78:	6d 93       	st	X+, r22
 b7a:	41 50       	subi	r20, 0x01	; 1
 b7c:	50 40       	sbci	r21, 0x00	; 0
 b7e:	e0 f7       	brcc	.-8      	; 0xb78 <memset+0x4>
 b80:	08 95       	ret

00000b82 <strnlen>:
 b82:	fc 01       	movw	r30, r24
 b84:	61 50       	subi	r22, 0x01	; 1
 b86:	70 40       	sbci	r23, 0x00	; 0
 b88:	01 90       	ld	r0, Z+
 b8a:	01 10       	cpse	r0, r1
 b8c:	d8 f7       	brcc	.-10     	; 0xb84 <strnlen+0x2>
 b8e:	80 95       	com	r24
 b90:	90 95       	com	r25
 b92:	8e 0f       	add	r24, r30
 b94:	9f 1f       	adc	r25, r31
 b96:	08 95       	ret

00000b98 <fputc>:
 b98:	0f 93       	push	r16
 b9a:	1f 93       	push	r17
 b9c:	cf 93       	push	r28
 b9e:	df 93       	push	r29
 ba0:	fb 01       	movw	r30, r22
 ba2:	23 81       	ldd	r18, Z+3	; 0x03
 ba4:	21 fd       	sbrc	r18, 1
 ba6:	03 c0       	rjmp	.+6      	; 0xbae <fputc+0x16>
 ba8:	8f ef       	ldi	r24, 0xFF	; 255
 baa:	9f ef       	ldi	r25, 0xFF	; 255
 bac:	28 c0       	rjmp	.+80     	; 0xbfe <fputc+0x66>
 bae:	22 ff       	sbrs	r18, 2
 bb0:	16 c0       	rjmp	.+44     	; 0xbde <fputc+0x46>
 bb2:	46 81       	ldd	r20, Z+6	; 0x06
 bb4:	57 81       	ldd	r21, Z+7	; 0x07
 bb6:	24 81       	ldd	r18, Z+4	; 0x04
 bb8:	35 81       	ldd	r19, Z+5	; 0x05
 bba:	42 17       	cp	r20, r18
 bbc:	53 07       	cpc	r21, r19
 bbe:	44 f4       	brge	.+16     	; 0xbd0 <fputc+0x38>
 bc0:	a0 81       	ld	r26, Z
 bc2:	b1 81       	ldd	r27, Z+1	; 0x01
 bc4:	9d 01       	movw	r18, r26
 bc6:	2f 5f       	subi	r18, 0xFF	; 255
 bc8:	3f 4f       	sbci	r19, 0xFF	; 255
 bca:	31 83       	std	Z+1, r19	; 0x01
 bcc:	20 83       	st	Z, r18
 bce:	8c 93       	st	X, r24
 bd0:	26 81       	ldd	r18, Z+6	; 0x06
 bd2:	37 81       	ldd	r19, Z+7	; 0x07
 bd4:	2f 5f       	subi	r18, 0xFF	; 255
 bd6:	3f 4f       	sbci	r19, 0xFF	; 255
 bd8:	37 83       	std	Z+7, r19	; 0x07
 bda:	26 83       	std	Z+6, r18	; 0x06
 bdc:	10 c0       	rjmp	.+32     	; 0xbfe <fputc+0x66>
 bde:	eb 01       	movw	r28, r22
 be0:	09 2f       	mov	r16, r25
 be2:	18 2f       	mov	r17, r24
 be4:	00 84       	ldd	r0, Z+8	; 0x08
 be6:	f1 85       	ldd	r31, Z+9	; 0x09
 be8:	e0 2d       	mov	r30, r0
 bea:	09 95       	icall
 bec:	89 2b       	or	r24, r25
 bee:	e1 f6       	brne	.-72     	; 0xba8 <fputc+0x10>
 bf0:	8e 81       	ldd	r24, Y+6	; 0x06
 bf2:	9f 81       	ldd	r25, Y+7	; 0x07
 bf4:	01 96       	adiw	r24, 0x01	; 1
 bf6:	9f 83       	std	Y+7, r25	; 0x07
 bf8:	8e 83       	std	Y+6, r24	; 0x06
 bfa:	81 2f       	mov	r24, r17
 bfc:	90 2f       	mov	r25, r16
 bfe:	df 91       	pop	r29
 c00:	cf 91       	pop	r28
 c02:	1f 91       	pop	r17
 c04:	0f 91       	pop	r16
 c06:	08 95       	ret

00000c08 <__ultoa_invert>:
 c08:	fa 01       	movw	r30, r20
 c0a:	aa 27       	eor	r26, r26
 c0c:	28 30       	cpi	r18, 0x08	; 8
 c0e:	51 f1       	breq	.+84     	; 0xc64 <__ultoa_invert+0x5c>
 c10:	20 31       	cpi	r18, 0x10	; 16
 c12:	81 f1       	breq	.+96     	; 0xc74 <__ultoa_invert+0x6c>
 c14:	e8 94       	clt
 c16:	6f 93       	push	r22
 c18:	6e 7f       	andi	r22, 0xFE	; 254
 c1a:	6e 5f       	subi	r22, 0xFE	; 254
 c1c:	7f 4f       	sbci	r23, 0xFF	; 255
 c1e:	8f 4f       	sbci	r24, 0xFF	; 255
 c20:	9f 4f       	sbci	r25, 0xFF	; 255
 c22:	af 4f       	sbci	r26, 0xFF	; 255
 c24:	b1 e0       	ldi	r27, 0x01	; 1
 c26:	3e d0       	rcall	.+124    	; 0xca4 <__ultoa_invert+0x9c>
 c28:	b4 e0       	ldi	r27, 0x04	; 4
 c2a:	3c d0       	rcall	.+120    	; 0xca4 <__ultoa_invert+0x9c>
 c2c:	67 0f       	add	r22, r23
 c2e:	78 1f       	adc	r23, r24
 c30:	89 1f       	adc	r24, r25
 c32:	9a 1f       	adc	r25, r26
 c34:	a1 1d       	adc	r26, r1
 c36:	68 0f       	add	r22, r24
 c38:	79 1f       	adc	r23, r25
 c3a:	8a 1f       	adc	r24, r26
 c3c:	91 1d       	adc	r25, r1
 c3e:	a1 1d       	adc	r26, r1
 c40:	6a 0f       	add	r22, r26
 c42:	71 1d       	adc	r23, r1
 c44:	81 1d       	adc	r24, r1
 c46:	91 1d       	adc	r25, r1
 c48:	a1 1d       	adc	r26, r1
 c4a:	20 d0       	rcall	.+64     	; 0xc8c <__ultoa_invert+0x84>
 c4c:	09 f4       	brne	.+2      	; 0xc50 <__ultoa_invert+0x48>
 c4e:	68 94       	set
 c50:	3f 91       	pop	r19
 c52:	2a e0       	ldi	r18, 0x0A	; 10
 c54:	26 9f       	mul	r18, r22
 c56:	11 24       	eor	r1, r1
 c58:	30 19       	sub	r19, r0
 c5a:	30 5d       	subi	r19, 0xD0	; 208
 c5c:	31 93       	st	Z+, r19
 c5e:	de f6       	brtc	.-74     	; 0xc16 <__ultoa_invert+0xe>
 c60:	cf 01       	movw	r24, r30
 c62:	08 95       	ret
 c64:	46 2f       	mov	r20, r22
 c66:	47 70       	andi	r20, 0x07	; 7
 c68:	40 5d       	subi	r20, 0xD0	; 208
 c6a:	41 93       	st	Z+, r20
 c6c:	b3 e0       	ldi	r27, 0x03	; 3
 c6e:	0f d0       	rcall	.+30     	; 0xc8e <__ultoa_invert+0x86>
 c70:	c9 f7       	brne	.-14     	; 0xc64 <__ultoa_invert+0x5c>
 c72:	f6 cf       	rjmp	.-20     	; 0xc60 <__ultoa_invert+0x58>
 c74:	46 2f       	mov	r20, r22
 c76:	4f 70       	andi	r20, 0x0F	; 15
 c78:	40 5d       	subi	r20, 0xD0	; 208
 c7a:	4a 33       	cpi	r20, 0x3A	; 58
 c7c:	18 f0       	brcs	.+6      	; 0xc84 <__ultoa_invert+0x7c>
 c7e:	49 5d       	subi	r20, 0xD9	; 217
 c80:	31 fd       	sbrc	r19, 1
 c82:	40 52       	subi	r20, 0x20	; 32
 c84:	41 93       	st	Z+, r20
 c86:	02 d0       	rcall	.+4      	; 0xc8c <__ultoa_invert+0x84>
 c88:	a9 f7       	brne	.-22     	; 0xc74 <__ultoa_invert+0x6c>
 c8a:	ea cf       	rjmp	.-44     	; 0xc60 <__ultoa_invert+0x58>
 c8c:	b4 e0       	ldi	r27, 0x04	; 4
 c8e:	a6 95       	lsr	r26
 c90:	97 95       	ror	r25
 c92:	87 95       	ror	r24
 c94:	77 95       	ror	r23
 c96:	67 95       	ror	r22
 c98:	ba 95       	dec	r27
 c9a:	c9 f7       	brne	.-14     	; 0xc8e <__ultoa_invert+0x86>
 c9c:	00 97       	sbiw	r24, 0x00	; 0
 c9e:	61 05       	cpc	r22, r1
 ca0:	71 05       	cpc	r23, r1
 ca2:	08 95       	ret
 ca4:	9b 01       	movw	r18, r22
 ca6:	ac 01       	movw	r20, r24
 ca8:	0a 2e       	mov	r0, r26
 caa:	06 94       	lsr	r0
 cac:	57 95       	ror	r21
 cae:	47 95       	ror	r20
 cb0:	37 95       	ror	r19
 cb2:	27 95       	ror	r18
 cb4:	ba 95       	dec	r27
 cb6:	c9 f7       	brne	.-14     	; 0xcaa <__ultoa_invert+0xa2>
 cb8:	62 0f       	add	r22, r18
 cba:	73 1f       	adc	r23, r19
 cbc:	84 1f       	adc	r24, r20
 cbe:	95 1f       	adc	r25, r21
 cc0:	a0 1d       	adc	r26, r0
 cc2:	08 95       	ret

00000cc4 <_exit>:
 cc4:	f8 94       	cli

00000cc6 <__stop_program>:
 cc6:	ff cf       	rjmp	.-2      	; 0xcc6 <__stop_program>
