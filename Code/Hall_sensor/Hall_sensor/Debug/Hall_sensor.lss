
Hall_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000bd6  00000c6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000237  00800104  00800104  00000c6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ca0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecb  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000752  00000000  00000000  00001d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da8  00000000  00000000  0000247d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a4  00000000  00000000  00003228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000481  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001059  00000000  00000000  00003b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004ba6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	69 c1       	rjmp	.+722    	; 0x2ec <__vector_6>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	07 c3       	rjmp	.+1550   	; 0x654 <__vector_17>
  46:	00 00       	nop
  48:	43 c0       	rjmp	.+134    	; 0xd0 <__vector_18>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	ab c3       	rjmp	.+1878   	; 0x7ac <__vector_21>
  56:	00 00       	nop
  58:	d9 c3       	rjmp	.+1970   	; 0x80c <__vector_22>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0c c3       	rjmp	.+1560   	; 0x696 <__vector_31>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 ed       	ldi	r30, 0xD6	; 214
  a8:	fb e0       	ldi	r31, 0x0B	; 11
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a4 30       	cpi	r26, 0x04	; 4
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	23 e0       	ldi	r18, 0x03	; 3
  bc:	a4 e0       	ldi	r26, 0x04	; 4
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	ab 33       	cpi	r26, 0x3B	; 59
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	b3 d1       	rcall	.+870    	; 0x432 <main>
  cc:	82 c5       	rjmp	.+2820   	; 0xbd2 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <__vector_18>:
	CANCDMOB=0x80; // enable RX
	unsigned mask=1<<mob;
	CANIE2 |=  mask;
	CANIE1 |= (mask>>8);
	return FALSE;
	}
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	cf 93       	push	r28
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
  f8:	ed ee       	ldi	r30, 0xED	; 237
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	c0 81       	ld	r28, Z
  fe:	80 91 ec 00 	lds	r24, 0x00EC
 102:	68 2f       	mov	r22, r24
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	80 83       	st	Z, r24
 10a:	72 95       	swap	r23
 10c:	62 95       	swap	r22
 10e:	6f 70       	andi	r22, 0x0F	; 15
 110:	67 27       	eor	r22, r23
 112:	7f 70       	andi	r23, 0x0F	; 15
 114:	67 27       	eor	r22, r23
 116:	80 91 ee 00 	lds	r24, 0x00EE
 11a:	8f 75       	andi	r24, 0x5F	; 95
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_18+0x50>
 11e:	98 95       	break
 120:	20 91 f2 00 	lds	r18, 0x00F2
 124:	80 91 f3 00 	lds	r24, 0x00F3
 128:	e4 e0       	ldi	r30, 0x04	; 4
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	22 95       	swap	r18
 13c:	26 95       	lsr	r18
 13e:	27 70       	andi	r18, 0x07	; 7
 140:	82 2b       	or	r24, r18
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	80 83       	st	Z, r24
 146:	80 91 ef 00 	lds	r24, 0x00EF
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	82 83       	std	Z+2, r24	; 0x02
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	59 f0       	breq	.+22     	; 0x16a <__vector_18+0x9a>
 154:	e7 e0       	ldi	r30, 0x07	; 7
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	89 5f       	subi	r24, 0xF9	; 249
 15a:	9e 4f       	sbci	r25, 0xFE	; 254
 15c:	aa ef       	ldi	r26, 0xFA	; 250
 15e:	b0 e0       	ldi	r27, 0x00	; 0
 160:	2c 91       	ld	r18, X
 162:	21 93       	st	Z+, r18
 164:	e8 17       	cp	r30, r24
 166:	f9 07       	cpc	r31, r25
 168:	d9 f7       	brne	.-10     	; 0x160 <__vector_18+0x90>
 16a:	10 92 ee 00 	sts	0x00EE, r1
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 ef 00 	sts	0x00EF, r24
 174:	fb 01       	movw	r30, r22
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ed 5e       	subi	r30, 0xED	; 237
 17c:	fc 4f       	sbci	r31, 0xFC	; 252
 17e:	01 90       	ld	r0, Z+
 180:	f0 81       	ld	r31, Z
 182:	e0 2d       	mov	r30, r0
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	09 95       	icall
 18a:	c0 93 ed 00 	sts	0x00ED, r28
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	cf 91       	pop	r28
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <can_tx>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	fb 01       	movw	r30, r22
 1bc:	20 81       	ld	r18, Z
 1be:	31 81       	ldd	r19, Z+1	; 0x01
 1c0:	21 15       	cp	r18, r1
 1c2:	38 40       	sbci	r19, 0x08	; 8
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <can_tx+0x12>
 1c6:	98 95       	break
 1c8:	92 81       	ldd	r25, Z+2	; 0x02
 1ca:	99 30       	cpi	r25, 0x09	; 9
 1cc:	08 f0       	brcs	.+2      	; 0x1d0 <can_tx+0x1a>
 1ce:	98 95       	break
 1d0:	8f 30       	cpi	r24, 0x0F	; 15
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <can_tx+0x20>
 1d4:	98 95       	break
 1d6:	82 95       	swap	r24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	80 93 ed 00 	sts	0x00ED, r24
 1de:	80 91 ef 00 	lds	r24, 0x00EF
 1e2:	80 7c       	andi	r24, 0xC0	; 192
 1e4:	21 f0       	breq	.+8      	; 0x1ee <can_tx+0x38>
 1e6:	80 91 ee 00 	lds	r24, 0x00EE
 1ea:	86 ff       	sbrs	r24, 6
 1ec:	55 c0       	rjmp	.+170    	; 0x298 <can_tx+0xe2>
 1ee:	10 92 ee 00 	sts	0x00EE, r1
 1f2:	10 92 ef 00 	sts	0x00EF, r1
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	8f 3f       	cpi	r24, 0xFF	; 255
 1fa:	61 f1       	breq	.+88     	; 0x254 <can_tx+0x9e>
 1fc:	80 81       	ld	r24, Z
 1fe:	91 81       	ldd	r25, Z+1	; 0x01
 200:	96 95       	lsr	r25
 202:	87 95       	ror	r24
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	96 95       	lsr	r25
 20a:	87 95       	ror	r24
 20c:	80 93 f3 00 	sts	0x00F3, r24
 210:	80 81       	ld	r24, Z
 212:	82 95       	swap	r24
 214:	88 0f       	add	r24, r24
 216:	80 7e       	andi	r24, 0xE0	; 224
 218:	80 93 f2 00 	sts	0x00F2, r24
 21c:	10 92 f1 00 	sts	0x00F1, r1
 220:	10 92 f0 00 	sts	0x00F0, r1
 224:	22 81       	ldd	r18, Z+2	; 0x02
 226:	22 23       	and	r18, r18
 228:	79 f0       	breq	.+30     	; 0x248 <can_tx+0x92>
 22a:	df 01       	movw	r26, r30
 22c:	13 96       	adiw	r26, 0x03	; 3
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ca ef       	ldi	r28, 0xFA	; 250
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	2d 91       	ld	r18, X+
 238:	28 83       	st	Y, r18
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	22 81       	ldd	r18, Z+2	; 0x02
 23e:	42 2f       	mov	r20, r18
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	84 17       	cp	r24, r20
 244:	95 07       	cpc	r25, r21
 246:	b8 f3       	brcs	.-18     	; 0x236 <can_tx+0x80>
 248:	ef ee       	ldi	r30, 0xEF	; 239
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	28 2b       	or	r18, r24
 250:	20 83       	st	Z, r18
 252:	1b c0       	rjmp	.+54     	; 0x28a <can_tx+0xd4>
 254:	80 81       	ld	r24, Z
 256:	91 81       	ldd	r25, Z+1	; 0x01
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	80 93 f3 00 	sts	0x00F3, r24
 268:	80 81       	ld	r24, Z
 26a:	82 95       	swap	r24
 26c:	88 0f       	add	r24, r24
 26e:	80 7e       	andi	r24, 0xE0	; 224
 270:	80 93 f2 00 	sts	0x00F2, r24
 274:	10 92 f1 00 	sts	0x00F1, r1
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	80 93 f0 00 	sts	0x00F0, r24
 27e:	af ee       	ldi	r26, 0xEF	; 239
 280:	b0 e0       	ldi	r27, 0x00	; 0
 282:	9c 91       	ld	r25, X
 284:	82 81       	ldd	r24, Z+2	; 0x02
 286:	89 2b       	or	r24, r25
 288:	8c 93       	st	X, r24
 28a:	ef ee       	ldi	r30, 0xEF	; 239
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	01 c0       	rjmp	.+2      	; 0x29a <can_tx+0xe4>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <can_init>:


void can_init( void)
	{
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
	unsigned mob;
//! \bug different baudrate support not implemented yet 
#if configCPU_CLOCK_HZ==8000000l
	CANBT1=0x06;	// 8MHz, 100kbit/s
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2=0x0c;
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3=0x5a;
 2b0:	8a e5       	ldi	r24, 0x5A	; 90
 2b2:	80 93 e4 00 	sts	0x00E4, r24
 2b6:	80 e0       	ldi	r24, 0x00	; 0
	CANBT3=0x13;
#endif
	
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2b8:	cd ee       	ldi	r28, 0xED	; 237
 2ba:	d0 e0       	ldi	r29, 0x00	; 0
		CANSTMOB = 0;
 2bc:	ae ee       	ldi	r26, 0xEE	; 238
 2be:	b0 e0       	ldi	r27, 0x00	; 0
		CANCDMOB = 0;
 2c0:	ef ee       	ldi	r30, 0xEF	; 239
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
	CANBT3=0x13;
#endif
	
	for (mob = 0; mob < NO_MOBS; mob++)
		{
		CANPAGE  = (mob << 4);
 2c4:	98 2f       	mov	r25, r24
 2c6:	92 95       	swap	r25
 2c8:	90 7f       	andi	r25, 0xF0	; 240
 2ca:	98 83       	st	Y, r25
		CANSTMOB = 0;
 2cc:	1c 92       	st	X, r1
		CANCDMOB = 0;
 2ce:	10 82       	st	Z, r1
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
	CANBT1=0x26;	// 16 MHz, 100kbit/s
	CANBT2=0x04;
	CANBT3=0x13;
#endif
	
	for (mob = 0; mob < NO_MOBS; mob++)
 2d2:	8f 30       	cpi	r24, 0x0F	; 15
 2d4:	b9 f7       	brne	.-18     	; 0x2c4 <can_init+0x24>
		{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
		}
	CANGCON |= 0x02;
 2d6:	e8 ed       	ldi	r30, 0xD8	; 216
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	80 83       	st	Z, r24
	CANGIE=(1<<ENIT) | (1<< ENRX);
 2e0:	80 ea       	ldi	r24, 0xA0	; 160
 2e2:	80 93 db 00 	sts	0x00DB, r24
	}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <__vector_6>:
*/
volatile int magnet_count = 0;
double vehicleSpeed = 0;

//PE5 interrupt 
ISR(INT5_vect){
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	0b b6       	in	r0, 0x3b	; 59
 2f8:	0f 92       	push	r0
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	ef 93       	push	r30
 314:	ff 93       	push	r31
	magnet_count = magnet_count+1;
 316:	80 91 13 01 	lds	r24, 0x0113
 31a:	90 91 14 01 	lds	r25, 0x0114
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	90 93 14 01 	sts	0x0114, r25
 324:	80 93 13 01 	sts	0x0113, r24
	cHallTime = millis() - hallStopWatch;
 328:	09 d2       	rcall	.+1042   	; 0x73c <millis>
 32a:	00 91 31 03 	lds	r16, 0x0331
 32e:	10 91 32 03 	lds	r17, 0x0332
 332:	20 91 33 03 	lds	r18, 0x0333
 336:	30 91 34 03 	lds	r19, 0x0334
 33a:	dc 01       	movw	r26, r24
 33c:	cb 01       	movw	r24, r22
 33e:	80 1b       	sub	r24, r16
 340:	91 0b       	sbc	r25, r17
 342:	a2 0b       	sbc	r26, r18
 344:	b3 0b       	sbc	r27, r19
 346:	80 93 37 03 	sts	0x0337, r24
 34a:	90 93 38 03 	sts	0x0338, r25
 34e:	a0 93 39 03 	sts	0x0339, r26
 352:	b0 93 3a 03 	sts	0x033A, r27
	hallStopWatch = millis();
 356:	f2 d1       	rcall	.+996    	; 0x73c <millis>
 358:	60 93 31 03 	sts	0x0331, r22
 35c:	70 93 32 03 	sts	0x0332, r23
 360:	80 93 33 03 	sts	0x0333, r24
 364:	90 93 34 03 	sts	0x0334, r25
	if (magnet_count >1) {
 368:	80 91 13 01 	lds	r24, 0x0113
 36c:	90 91 14 01 	lds	r25, 0x0114
 370:	02 97       	sbiw	r24, 0x02	; 2
 372:	54 f0       	brlt	.+20     	; 0x388 <__vector_6+0x9c>
		magnet_count = 0;
 374:	10 92 14 01 	sts	0x0114, r1
 378:	10 92 13 01 	sts	0x0113, r1
		cHallFlagChange = 1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 36 03 	sts	0x0336, r25
 384:	80 93 35 03 	sts	0x0335, r24
	}
}
 388:	ff 91       	pop	r31
 38a:	ef 91       	pop	r30
 38c:	bf 91       	pop	r27
 38e:	af 91       	pop	r26
 390:	9f 91       	pop	r25
 392:	8f 91       	pop	r24
 394:	7f 91       	pop	r23
 396:	6f 91       	pop	r22
 398:	5f 91       	pop	r21
 39a:	4f 91       	pop	r20
 39c:	3f 91       	pop	r19
 39e:	2f 91       	pop	r18
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	0f 90       	pop	r0
 3a6:	0b be       	out	0x3b, r0	; 59
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <send_speed_data>:
    }
}


void send_speed_data(double vehicle_speed)
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	2b 97       	sbiw	r28, 0x0b	; 11
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
	CAN_packet send;
	BOOL ret = FALSE;
		
	uint16_t toSend = (uint16_t)(vehicle_speed*100);
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	48 ec       	ldi	r20, 0xC8	; 200
 3cc:	52 e4       	ldi	r21, 0x42	; 66
 3ce:	77 d3       	rcall	.+1774   	; 0xabe <__mulsf3>
 3d0:	bc d2       	rcall	.+1400   	; 0x94a <__fixunssfsi>
	send.id = ID_hallSensor;
 3d2:	89 e0       	ldi	r24, 0x09	; 9
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	9a 83       	std	Y+2, r25	; 0x02
 3d8:	89 83       	std	Y+1, r24	; 0x01
	send.length = 2;
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	8b 83       	std	Y+3, r24	; 0x03
	
	send.data[1] = toSend & 0xff;
 3de:	6d 83       	std	Y+5, r22	; 0x05
	send.data[0] = (toSend >> 8) & 0xff;
 3e0:	7c 83       	std	Y+4, r23	; 0x04
		
	cli();
 3e2:	f8 94       	cli
	ret = can_tx(0x01, &send);
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	e4 de       	rcall	.-568    	; 0x1b6 <can_tx>
	if (ret) {
 3ee:	88 23       	and	r24, r24
 3f0:	11 f0       	breq	.+4      	; 0x3f6 <send_speed_data+0x44>
		set_bit(DDRB, DDB7);
 3f2:	27 9a       	sbi	0x04, 7	; 4
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <send_speed_data+0x46>
		ret = FALSE;
	} else
	clear_bit(DDRB, DDB7);
 3f6:	27 98       	cbi	0x04, 7	; 4
	sei();
 3f8:	78 94       	sei
}
 3fa:	2b 96       	adiw	r28, 0x0b	; 11
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	f8 94       	cli
 400:	de bf       	out	0x3e, r29	; 62
 402:	0f be       	out	0x3f, r0	; 63
 404:	cd bf       	out	0x3d, r28	; 61
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <init_front_module>:


void init_front_module( void )
{
	//internal pull-up resistor
	PORTE |= (1 << PE5);
 40c:	75 9a       	sbi	0x0e, 5	; 14
	
	//Set interrupt, change HIGT to LOW and LOW to HIGH on PE5
	EICRB = (1 << 2);
 40e:	84 e0       	ldi	r24, 0x04	; 4
 410:	80 93 6a 00 	sts	0x006A, r24
	EIMSK = (1 << 5);
 414:	80 e2       	ldi	r24, 0x20	; 32
 416:	8d bb       	out	0x1d, r24	; 29
	
	init_USB_USART();
 418:	9a d1       	rcall	.+820    	; 0x74e <init_USB_USART>
	init_RGB_driver();
 41a:	d8 d0       	rcall	.+432    	; 0x5cc <init_RGB_driver>
	can_init();
 41c:	41 df       	rcall	.-382    	; 0x2a0 <can_init>
	init_timer();
 41e:	06 d1       	rcall	.+524    	; 0x62c <init_timer>
	set_RGB(0, 255, 0);
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	6f ef       	ldi	r22, 0xFF	; 255
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	f5 d0       	rcall	.+490    	; 0x618 <set_RGB>
				
	sei();	
 42e:	78 94       	sei
 430:	08 95       	ret

00000432 <main>:
	}
}

int main(void)
{
	init_front_module();
 432:	ec df       	rcall	.-40     	; 0x40c <init_front_module>
	unsigned long speedTimeout = 0;
 434:	c1 2c       	mov	r12, r1
 436:	d1 2c       	mov	r13, r1
 438:	76 01       	movw	r14, r12
	
    while(1)
    {
		uint32_t hallTime;
		//Get interrupt data
		if (cHallFlagChange){
 43a:	80 91 35 03 	lds	r24, 0x0335
 43e:	90 91 36 03 	lds	r25, 0x0336
 442:	89 2b       	or	r24, r25
 444:	51 f1       	breq	.+84     	; 0x49a <main+0x68>
			//set_RGB(255, 255, 0);
			cli();
 446:	f8 94       	cli
			hallTime = cHallTime;
 448:	80 90 37 03 	lds	r8, 0x0337
 44c:	90 90 38 03 	lds	r9, 0x0338
 450:	a0 90 39 03 	lds	r10, 0x0339
 454:	b0 90 3a 03 	lds	r11, 0x033A
			cHallFlagChange = 0;
 458:	10 92 36 03 	sts	0x0336, r1
 45c:	10 92 35 03 	sts	0x0335, r1
			speedTimeout = millis();
 460:	6d d1       	rcall	.+730    	; 0x73c <millis>
 462:	6b 01       	movw	r12, r22
 464:	7c 01       	movw	r14, r24
			sei();
 466:	78 94       	sei
			
			//calculate speed, in mm/ms (aka m/s)
			vehicleSpeed = (WHEEL_CIRCUMFERENCE_MM)/(double)(MEASURE_POINTS * hallTime);
 468:	c5 01       	movw	r24, r10
 46a:	b4 01       	movw	r22, r8
 46c:	9a d2       	rcall	.+1332   	; 0x9a2 <__floatunsisf>
 46e:	9b 01       	movw	r18, r22
 470:	ac 01       	movw	r20, r24
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	70 ec       	ldi	r23, 0xC0	; 192
 476:	8a ed       	ldi	r24, 0xDA	; 218
 478:	94 e4       	ldi	r25, 0x44	; 68
 47a:	ff d1       	rcall	.+1022   	; 0x87a <__divsf3>
 47c:	60 93 0f 01 	sts	0x010F, r22
 480:	70 93 10 01 	sts	0x0110, r23
 484:	80 93 11 01 	sts	0x0111, r24
 488:	90 93 12 01 	sts	0x0112, r25
			
			printInt(hallTime,2);
 48c:	62 e0       	ldi	r22, 0x02	; 2
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	c4 01       	movw	r24, r8
 492:	27 d0       	rcall	.+78     	; 0x4e2 <printInt>
			printString("\n\r");
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	16 d0       	rcall	.+44     	; 0x4c6 <printString>
// 			
// 			set_RGB(0, 255, 0);
		}
		
		//Set speed to zero if no magnet has passed the sensor within 2s.
		if (speedTimeout + 2000 < millis()){
 49a:	50 d1       	rcall	.+672    	; 0x73c <millis>
 49c:	97 01       	movw	r18, r14
 49e:	86 01       	movw	r16, r12
 4a0:	00 53       	subi	r16, 0x30	; 48
 4a2:	18 4f       	sbci	r17, 0xF8	; 248
 4a4:	2f 4f       	sbci	r18, 0xFF	; 255
 4a6:	3f 4f       	sbci	r19, 0xFF	; 255
 4a8:	06 17       	cp	r16, r22
 4aa:	17 07       	cpc	r17, r23
 4ac:	28 07       	cpc	r18, r24
 4ae:	39 07       	cpc	r19, r25
 4b0:	08 f0       	brcs	.+2      	; 0x4b4 <main+0x82>
 4b2:	c3 cf       	rjmp	.-122    	; 0x43a <main+0x8>
			vehicleSpeed = 0.0;
 4b4:	10 92 0f 01 	sts	0x010F, r1
 4b8:	10 92 10 01 	sts	0x0110, r1
 4bc:	10 92 11 01 	sts	0x0111, r1
 4c0:	10 92 12 01 	sts	0x0112, r1
 4c4:	ba cf       	rjmp	.-140    	; 0x43a <main+0x8>

000004c6 <printString>:
	for(i = 0; i < 8; i++)
	{
		(byte & 0b10000000) ? uloadChar_USB('1') : uloadChar_USB('0');
		byte <<= 1;
	}
}
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	ec 01       	movw	r28, r24
 4cc:	88 81       	ld	r24, Y
 4ce:	88 23       	and	r24, r24
 4d0:	29 f0       	breq	.+10     	; 0x4dc <printString+0x16>
 4d2:	21 96       	adiw	r28, 0x01	; 1
 4d4:	50 d1       	rcall	.+672    	; 0x776 <uloadChar_USB>
 4d6:	89 91       	ld	r24, Y+
 4d8:	81 11       	cpse	r24, r1
 4da:	fc cf       	rjmp	.-8      	; 0x4d4 <printString+0xe>
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <printInt>:

// Print int as definable length character string
void printInt(int nr, int with)
{
 4e2:	af 92       	push	r10
 4e4:	bf 92       	push	r11
 4e6:	cf 92       	push	r12
 4e8:	df 92       	push	r13
 4ea:	ef 92       	push	r14
 4ec:	ff 92       	push	r15
 4ee:	0f 93       	push	r16
 4f0:	1f 93       	push	r17
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	cd b7       	in	r28, 0x3d	; 61
 4f8:	de b7       	in	r29, 0x3e	; 62
 4fa:	64 97       	sbiw	r28, 0x14	; 20
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	f8 94       	cli
 500:	de bf       	out	0x3e, r29	; 62
 502:	0f be       	out	0x3f, r0	; 63
 504:	cd bf       	out	0x3d, r28	; 61
 506:	5c 01       	movw	r10, r24
 508:	6b 01       	movw	r12, r22
 50a:	9c 01       	movw	r18, r24
 50c:	99 23       	and	r25, r25
 50e:	24 f4       	brge	.+8      	; 0x518 <printInt+0x36>
 510:	22 27       	eor	r18, r18
 512:	33 27       	eor	r19, r19
 514:	28 1b       	sub	r18, r24
 516:	39 0b       	sbc	r19, r25
 518:	c9 01       	movw	r24, r18
 51a:	9e 01       	movw	r18, r28
 51c:	2f 5f       	subi	r18, 0xFF	; 255
 51e:	3f 4f       	sbci	r19, 0xFF	; 255
 520:	79 01       	movw	r14, r18
 522:	f9 01       	movw	r30, r18
 524:	00 e0       	ldi	r16, 0x00	; 0
 526:	10 e0       	ldi	r17, 0x00	; 0
		nr = -nr;
	
	i = 0;
	do
	{
		str[i++] = nr % 10 + '0';
 528:	2a e0       	ldi	r18, 0x0A	; 10
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	0f 5f       	subi	r16, 0xFF	; 255
 52e:	1f 4f       	sbci	r17, 0xFF	; 255
 530:	b9 01       	movw	r22, r18
 532:	28 d3       	rcall	.+1616   	; 0xb84 <__divmodhi4>
 534:	80 5d       	subi	r24, 0xD0	; 208
 536:	81 93       	st	Z+, r24
	}
	while((nr /= 10) > 0);
 538:	86 2f       	mov	r24, r22
 53a:	97 2f       	mov	r25, r23
 53c:	18 16       	cp	r1, r24
 53e:	19 06       	cpc	r1, r25
 540:	ac f3       	brlt	.-22     	; 0x52c <printInt+0x4a>
		nr = -nr;
	
	i = 0;
	do
	{
		str[i++] = nr % 10 + '0';
 542:	c8 01       	movw	r24, r16
	}
	while((nr /= 10) > 0);
	
	if(sign < 0)
 544:	bb 20       	and	r11, r11
 546:	3c f4       	brge	.+14     	; 0x556 <printInt+0x74>
		str[i++] = '-';
 548:	0f 5f       	subi	r16, 0xFF	; 255
 54a:	1f 4f       	sbci	r17, 0xFF	; 255
 54c:	fe 01       	movw	r30, r28
 54e:	e8 0f       	add	r30, r24
 550:	f9 1f       	adc	r31, r25
 552:	2d e2       	ldi	r18, 0x2D	; 45
 554:	21 83       	std	Z+1, r18	; 0x01
	str[i] = '\0';
 556:	fe 01       	movw	r30, r28
 558:	e0 0f       	add	r30, r16
 55a:	f1 1f       	adc	r31, r17
 55c:	11 82       	std	Z+1, r1	; 0x01
	
	if(i < with)
 55e:	0c 15       	cp	r16, r12
 560:	1d 05       	cpc	r17, r13
 562:	1c f0       	brlt	.+6      	; 0x56a <printInt+0x88>
				uloadChar_USB(str[with]);
		}
	}
	else
	{
		for( ; i >= 0; i--)
 564:	11 23       	and	r17, r17
 566:	b4 f4       	brge	.+44     	; 0x594 <printInt+0xb2>
 568:	20 c0       	rjmp	.+64     	; 0x5aa <printInt+0xc8>
		str[i++] = '-';
	str[i] = '\0';
	
	if(i < with)
	{
		for( ; with >= 0; with--)
 56a:	dd 20       	and	r13, r13
 56c:	f4 f0       	brlt	.+60     	; 0x5aa <printInt+0xc8>
		{
			if(with > i)
 56e:	0c 15       	cp	r16, r12
 570:	1d 05       	cpc	r17, r13
 572:	1c f4       	brge	.+6      	; 0x57a <printInt+0x98>
				uloadChar_USB(' ');
 574:	80 e2       	ldi	r24, 0x20	; 32
 576:	ff d0       	rcall	.+510    	; 0x776 <uloadChar_USB>
 578:	08 c0       	rjmp	.+16     	; 0x58a <printInt+0xa8>
 57a:	e1 e0       	ldi	r30, 0x01	; 1
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	ec 0f       	add	r30, r28
 580:	fd 1f       	adc	r31, r29
 582:	ec 0d       	add	r30, r12
 584:	fd 1d       	adc	r31, r13
			else
				uloadChar_USB(str[with]);
 586:	80 81       	ld	r24, Z
 588:	f6 d0       	rcall	.+492    	; 0x776 <uloadChar_USB>
		str[i++] = '-';
	str[i] = '\0';
	
	if(i < with)
	{
		for( ; with >= 0; with--)
 58a:	31 e0       	ldi	r19, 0x01	; 1
 58c:	c3 1a       	sub	r12, r19
 58e:	d1 08       	sbc	r13, r1
 590:	70 f7       	brcc	.-36     	; 0x56e <printInt+0x8c>
 592:	0b c0       	rjmp	.+22     	; 0x5aa <printInt+0xc8>
 594:	0c 0f       	add	r16, r28
 596:	1d 1f       	adc	r17, r29
 598:	0e 5f       	subi	r16, 0xFE	; 254
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}
	else
	{
		for( ; i >= 0; i--)
			uloadChar_USB(str[i]);
 59c:	f8 01       	movw	r30, r16
 59e:	82 91       	ld	r24, -Z
 5a0:	8f 01       	movw	r16, r30
 5a2:	e9 d0       	rcall	.+466    	; 0x776 <uloadChar_USB>
				uloadChar_USB(str[with]);
		}
	}
	else
	{
		for( ; i >= 0; i--)
 5a4:	0e 15       	cp	r16, r14
 5a6:	1f 05       	cpc	r17, r15
 5a8:	c9 f7       	brne	.-14     	; 0x59c <printInt+0xba>
			uloadChar_USB(str[i]);
	}	
}
 5aa:	64 96       	adiw	r28, 0x14	; 20
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	f8 94       	cli
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	cd bf       	out	0x3d, r28	; 61
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	ff 90       	pop	r15
 5c0:	ef 90       	pop	r14
 5c2:	df 90       	pop	r13
 5c4:	cf 90       	pop	r12
 5c6:	bf 90       	pop	r11
 5c8:	af 90       	pop	r10
 5ca:	08 95       	ret

000005cc <init_RGB_driver>:
void init_RGB_driver()
{
		// Timer/Counter 1 ..............................................
		
		// Set respective PWM ports as outputs
		PORTB &= ~((1<<PB5)|(1<<PB6)|(1<<PB7));
 5cc:	85 b1       	in	r24, 0x05	; 5
 5ce:	8f 71       	andi	r24, 0x1F	; 31
 5d0:	85 b9       	out	0x05, r24	; 5
		DDRB |= (1<<PB5)|(1<<PB6)|(1<<PB7);
 5d2:	84 b1       	in	r24, 0x04	; 4
 5d4:	80 6e       	ori	r24, 0xE0	; 224
 5d6:	84 b9       	out	0x04, r24	; 4

		// Initialize 16 bit timer to use fast PWM
		TCCR1A = (1<<WGM11) &~(1<<WGM10);
 5d8:	e0 e8       	ldi	r30, 0x80	; 128
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12) | (1<<WGM13);
 5e0:	a1 e8       	ldi	r26, 0x81	; 129
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	88 e1       	ldi	r24, 0x18	; 24
 5e6:	8c 93       	st	X, r24
		
		// Set PWM output low on compare match for OC1A, OC1B, OC1C
		TCCR1A |= (1<<COM1A1) &~ (1<<COM1A0);
 5e8:	80 81       	ld	r24, Z
 5ea:	80 68       	ori	r24, 0x80	; 128
 5ec:	80 83       	st	Z, r24
		TCCR1A |= (1<<COM1B1) &~ (1<<COM1B0);
 5ee:	80 81       	ld	r24, Z
 5f0:	80 62       	ori	r24, 0x20	; 32
 5f2:	80 83       	st	Z, r24
		TCCR1A |= (1<<COM1C1) &~ (1<<COM1C0);
 5f4:	80 81       	ld	r24, Z
 5f6:	88 60       	ori	r24, 0x08	; 8
 5f8:	80 83       	st	Z, r24

		// Set prescaler to clk/256
		TCCR1B |= (1<<CS12) &~ (1<<CS11) &~ (1<<CS10);
 5fa:	8c 91       	ld	r24, X
 5fc:	84 60       	ori	r24, 0x04	; 4
 5fe:	8c 93       	st	X, r24
		
		// Set counter top value to 256
		ICR1H = 0;
 600:	10 92 87 00 	sts	0x0087, r1
		ICR1L =  0xff;
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	80 93 86 00 	sts	0x0086, r24

		// Set off
		OCR1AL = 0xFF;
 60a:	80 93 88 00 	sts	0x0088, r24
		OCR1BL = 0xFF;
 60e:	80 93 8a 00 	sts	0x008A, r24
		OCR1CL = 0xFF;
 612:	80 93 8c 00 	sts	0x008C, r24
 616:	08 95       	ret

00000618 <set_RGB>:
}


void set_RGB( int R, int G, int B )
{
	OCR1AL = (0xFF - R);
 618:	80 95       	com	r24
 61a:	80 93 88 00 	sts	0x0088, r24
	OCR1BL = (0xFF - G);
 61e:	60 95       	com	r22
 620:	60 93 8a 00 	sts	0x008A, r22
	OCR1CL = (0xFF - B);
 624:	40 95       	com	r20
 626:	40 93 8c 00 	sts	0x008C, r20
 62a:	08 95       	ret

0000062c <init_timer>:

int clk_ticks = 0;

void init_timer(void)
{
	TCCR3B = 0x02; //Set divider
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	80 93 91 00 	sts	0x0091, r24
	TCNT3 = 0xFC1A; //Apprx. 1ms to counter overflow
 632:	8a e1       	ldi	r24, 0x1A	; 26
 634:	9c ef       	ldi	r25, 0xFC	; 252
 636:	90 93 95 00 	sts	0x0095, r25
 63a:	80 93 94 00 	sts	0x0094, r24
	TIMSK3 = 0x01; //Set counter overflow interrupt
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	80 93 71 00 	sts	0x0071, r24
	
    // Initialize 8bit Timer0.	
	TCCR0A = (1 << CS02);
 644:	84 e0       	ldi	r24, 0x04	; 4
 646:	84 bd       	out	0x24, r24	; 36
	ENABLE_TM0OVF_INT; 
 648:	ee e6       	ldi	r30, 0x6E	; 110
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	81 60       	ori	r24, 0x01	; 1
 650:	80 83       	st	Z, r24
 652:	08 95       	ret

00000654 <__vector_17>:
}

ISR(TIMER0_OVF_vect)
{
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	8f 93       	push	r24
 660:	9f 93       	push	r25
	cli();
 662:	f8 94       	cli
	
	if (clk_ticks >= 120)
 664:	80 91 15 01 	lds	r24, 0x0115
 668:	90 91 16 01 	lds	r25, 0x0116
 66c:	88 37       	cpi	r24, 0x78	; 120
 66e:	91 05       	cpc	r25, r1
 670:	2c f0       	brlt	.+10     	; 0x67c <__vector_17+0x28>
	{
		clk_ticks = 0;
 672:	10 92 16 01 	sts	0x0116, r1
 676:	10 92 15 01 	sts	0x0115, r1
 67a:	05 c0       	rjmp	.+10     	; 0x686 <__vector_17+0x32>
	}
	else
	{
		clk_ticks++;
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	90 93 16 01 	sts	0x0116, r25
 682:	80 93 15 01 	sts	0x0115, r24
	}
	
	sei();
 686:	78 94       	sei
}
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__vector_31>:

ISR(TIMER3_OVF_vect){
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	0b b6       	in	r0, 0x3b	; 59
 6a2:	0f 92       	push	r0
 6a4:	2f 93       	push	r18
 6a6:	3f 93       	push	r19
 6a8:	4f 93       	push	r20
 6aa:	5f 93       	push	r21
 6ac:	6f 93       	push	r22
 6ae:	7f 93       	push	r23
 6b0:	8f 93       	push	r24
 6b2:	9f 93       	push	r25
 6b4:	af 93       	push	r26
 6b6:	bf 93       	push	r27
 6b8:	ef 93       	push	r30
 6ba:	ff 93       	push	r31
	cli();
 6bc:	f8 94       	cli
	TCNT3 = 0xFC1A; //Apprx. 1ms to counter overflow
 6be:	8a e1       	ldi	r24, 0x1A	; 26
 6c0:	9c ef       	ldi	r25, 0xFC	; 252
 6c2:	90 93 95 00 	sts	0x0095, r25
 6c6:	80 93 94 00 	sts	0x0094, r24
	milliseconds = milliseconds + 1;
 6ca:	80 91 17 01 	lds	r24, 0x0117
 6ce:	90 91 18 01 	lds	r25, 0x0118
 6d2:	a0 91 19 01 	lds	r26, 0x0119
 6d6:	b0 91 1a 01 	lds	r27, 0x011A
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	a1 1d       	adc	r26, r1
 6de:	b1 1d       	adc	r27, r1
 6e0:	80 93 17 01 	sts	0x0117, r24
 6e4:	90 93 18 01 	sts	0x0118, r25
 6e8:	a0 93 19 01 	sts	0x0119, r26
 6ec:	b0 93 1a 01 	sts	0x011A, r27
	// Send CAN messages
	if (!(clk_ticks % 1000)) {
 6f0:	80 91 15 01 	lds	r24, 0x0115
 6f4:	90 91 16 01 	lds	r25, 0x0116
 6f8:	68 ee       	ldi	r22, 0xE8	; 232
 6fa:	73 e0       	ldi	r23, 0x03	; 3
 6fc:	43 d2       	rcall	.+1158   	; 0xb84 <__divmodhi4>
 6fe:	89 2b       	or	r24, r25
 700:	49 f4       	brne	.+18     	; 0x714 <__vector_31+0x7e>
		send_speed_data(vehicleSpeed);
 702:	60 91 0f 01 	lds	r22, 0x010F
 706:	70 91 10 01 	lds	r23, 0x0110
 70a:	80 91 11 01 	lds	r24, 0x0111
 70e:	90 91 12 01 	lds	r25, 0x0112
 712:	4f de       	rcall	.-866    	; 0x3b2 <send_speed_data>
		//Debugging
		/*printString("Speeeeeeeed:");
		printDouble(vehicleSpeed, 1);
		printString("\n\r");*/
	}
	sei();
 714:	78 94       	sei
}
 716:	ff 91       	pop	r31
 718:	ef 91       	pop	r30
 71a:	bf 91       	pop	r27
 71c:	af 91       	pop	r26
 71e:	9f 91       	pop	r25
 720:	8f 91       	pop	r24
 722:	7f 91       	pop	r23
 724:	6f 91       	pop	r22
 726:	5f 91       	pop	r21
 728:	4f 91       	pop	r20
 72a:	3f 91       	pop	r19
 72c:	2f 91       	pop	r18
 72e:	0f 90       	pop	r0
 730:	0b be       	out	0x3b, r0	; 59
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <millis>:

unsigned long millis(void){
	//cli();
	return milliseconds;
 73c:	60 91 17 01 	lds	r22, 0x0117
 740:	70 91 18 01 	lds	r23, 0x0118
 744:	80 91 19 01 	lds	r24, 0x0119
 748:	90 91 1a 01 	lds	r25, 0x011A
	//sei();
}
 74c:	08 95       	ret

0000074e <init_USB_USART>:


void rx_flush_USB( void )
{
	while(ugetChar_USB() != UART_NO_DATA);
}
 74e:	10 92 c5 00 	sts	0x00C5, r1
 752:	83 e3       	ldi	r24, 0x33	; 51
 754:	80 93 c4 00 	sts	0x00C4, r24
 758:	88 e9       	ldi	r24, 0x98	; 152
 75a:	80 93 c1 00 	sts	0x00C1, r24
 75e:	86 e0       	ldi	r24, 0x06	; 6
 760:	80 93 c2 00 	sts	0x00C2, r24
 764:	10 92 18 02 	sts	0x0218, r1
 768:	10 92 17 02 	sts	0x0217, r1
 76c:	10 92 1c 01 	sts	0x011C, r1
 770:	10 92 1b 01 	sts	0x011B, r1
 774:	08 95       	ret

00000776 <uloadChar_USB>:
 776:	90 91 1c 01 	lds	r25, 0x011C
 77a:	9f 5f       	subi	r25, 0xFF	; 255
 77c:	9a 3f       	cpi	r25, 0xFA	; 250
 77e:	08 f0       	brcs	.+2      	; 0x782 <uloadChar_USB+0xc>
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	20 91 1b 01 	lds	r18, 0x011B
 786:	92 13       	cpse	r25, r18
 788:	03 c0       	rjmp	.+6      	; 0x790 <uloadChar_USB+0x1a>
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	9f ef       	ldi	r25, 0xFF	; 255
 78e:	08 95       	ret
 790:	e1 ec       	ldi	r30, 0xC1	; 193
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	20 81       	ld	r18, Z
 796:	20 62       	ori	r18, 0x20	; 32
 798:	20 83       	st	Z, r18
 79a:	e0 91 1c 01 	lds	r30, 0x011C
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	e3 5e       	subi	r30, 0xE3	; 227
 7a2:	fe 4f       	sbci	r31, 0xFE	; 254
 7a4:	80 83       	st	Z, r24
 7a6:	90 93 1c 01 	sts	0x011C, r25
 7aa:	08 95       	ret

000007ac <__vector_21>:


//Interrupt driven USART receive. Checks if buffer contains complete messages
ISR(USART0_RX_vect )
{
 7ac:	1f 92       	push	r1
 7ae:	0f 92       	push	r0
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	0f 92       	push	r0
 7b4:	11 24       	eor	r1, r1
 7b6:	0b b6       	in	r0, 0x3b	; 59
 7b8:	0f 92       	push	r0
 7ba:	8f 93       	push	r24
 7bc:	9f 93       	push	r25
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
	unsigned char i = rx_USB_in;
 7c2:	80 91 18 02 	lds	r24, 0x0218

	ROLLOVER( i, TX0_SIZE );
 7c6:	8f 5f       	subi	r24, 0xFF	; 255
 7c8:	8a 3f       	cpi	r24, 0xFA	; 250
 7ca:	08 f0       	brcs	.+2      	; 0x7ce <__vector_21+0x22>
 7cc:	80 e0       	ldi	r24, 0x00	; 0
	
	if( i == rx_USB_out )			// buffer overflow
 7ce:	90 91 17 02 	lds	r25, 0x0217
 7d2:	89 13       	cpse	r24, r25
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <__vector_21+0x36>
	{			
		UCSR0B &= ~(1<<RXCIE0);		// disable RX interrupt
 7d6:	e1 ec       	ldi	r30, 0xC1	; 193
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	8f 77       	andi	r24, 0x7F	; 127
 7de:	80 83       	st	Z, r24
		return;
 7e0:	0a c0       	rjmp	.+20     	; 0x7f6 <__vector_21+0x4a>
	}
	
	rx_USB_buff[rx_USB_in] = UDR0;
 7e2:	e0 91 18 02 	lds	r30, 0x0218
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	90 91 c6 00 	lds	r25, 0x00C6
 7ec:	e7 5e       	subi	r30, 0xE7	; 231
 7ee:	fd 4f       	sbci	r31, 0xFD	; 253
 7f0:	90 83       	st	Z, r25
	rx_USB_in = i;
 7f2:	80 93 18 02 	sts	0x0218, r24
}
 7f6:	ff 91       	pop	r31
 7f8:	ef 91       	pop	r30
 7fa:	9f 91       	pop	r25
 7fc:	8f 91       	pop	r24
 7fe:	0f 90       	pop	r0
 800:	0b be       	out	0x3b, r0	; 59
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <__vector_22>:


// Interrupt driven USART send. Sends data from TX-buffer when ready.
ISR(USART0_UDRE_vect)
{
 80c:	1f 92       	push	r1
 80e:	0f 92       	push	r0
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	0f 92       	push	r0
 814:	11 24       	eor	r1, r1
 816:	0b b6       	in	r0, 0x3b	; 59
 818:	0f 92       	push	r0
 81a:	8f 93       	push	r24
 81c:	9f 93       	push	r25
 81e:	ef 93       	push	r30
 820:	ff 93       	push	r31
	if( tx_USB_in == tx_USB_out )	// nothing to sent
 822:	90 91 1c 01 	lds	r25, 0x011C
 826:	80 91 1b 01 	lds	r24, 0x011B
 82a:	98 13       	cpse	r25, r24
 82c:	06 c0       	rjmp	.+12     	; 0x83a <__vector_22+0x2e>
	{		
		UCSR0B &= ~(1<<UDRIE0);		// disable TX interrupt
 82e:	e1 ec       	ldi	r30, 0xC1	; 193
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	8f 7d       	andi	r24, 0xDF	; 223
 836:	80 83       	st	Z, r24
		return;
 838:	15 c0       	rjmp	.+42     	; 0x864 <__vector_22+0x58>
	}
	
	UDR0 = tx_USB_buff[tx_USB_out];
 83a:	e0 91 1b 01 	lds	r30, 0x011B
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	e3 5e       	subi	r30, 0xE3	; 227
 842:	fe 4f       	sbci	r31, 0xFE	; 254
 844:	80 81       	ld	r24, Z
 846:	80 93 c6 00 	sts	0x00C6, r24
	
	ROLLOVER(tx_USB_out, TX0_SIZE );
 84a:	80 91 1b 01 	lds	r24, 0x011B
 84e:	8f 5f       	subi	r24, 0xFF	; 255
 850:	80 93 1b 01 	sts	0x011B, r24
 854:	8a 3f       	cpi	r24, 0xFA	; 250
 856:	18 f4       	brcc	.+6      	; 0x85e <__vector_22+0x52>
 858:	80 91 1b 01 	lds	r24, 0x011B
 85c:	01 c0       	rjmp	.+2      	; 0x860 <__vector_22+0x54>
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	80 93 1b 01 	sts	0x011B, r24
 864:	ff 91       	pop	r31
 866:	ef 91       	pop	r30
 868:	9f 91       	pop	r25
 86a:	8f 91       	pop	r24
 86c:	0f 90       	pop	r0
 86e:	0b be       	out	0x3b, r0	; 59
 870:	0f 90       	pop	r0
 872:	0f be       	out	0x3f, r0	; 63
 874:	0f 90       	pop	r0
 876:	1f 90       	pop	r1
 878:	18 95       	reti

0000087a <__divsf3>:
 87a:	0c d0       	rcall	.+24     	; 0x894 <__divsf3x>
 87c:	e6 c0       	rjmp	.+460    	; 0xa4a <__fp_round>
 87e:	de d0       	rcall	.+444    	; 0xa3c <__fp_pscB>
 880:	40 f0       	brcs	.+16     	; 0x892 <__divsf3+0x18>
 882:	d5 d0       	rcall	.+426    	; 0xa2e <__fp_pscA>
 884:	30 f0       	brcs	.+12     	; 0x892 <__divsf3+0x18>
 886:	21 f4       	brne	.+8      	; 0x890 <__divsf3+0x16>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	19 f0       	breq	.+6      	; 0x892 <__divsf3+0x18>
 88c:	c7 c0       	rjmp	.+398    	; 0xa1c <__fp_inf>
 88e:	51 11       	cpse	r21, r1
 890:	10 c1       	rjmp	.+544    	; 0xab2 <__fp_szero>
 892:	ca c0       	rjmp	.+404    	; 0xa28 <__fp_nan>

00000894 <__divsf3x>:
 894:	eb d0       	rcall	.+470    	; 0xa6c <__fp_split3>
 896:	98 f3       	brcs	.-26     	; 0x87e <__divsf3+0x4>

00000898 <__divsf3_pse>:
 898:	99 23       	and	r25, r25
 89a:	c9 f3       	breq	.-14     	; 0x88e <__divsf3+0x14>
 89c:	55 23       	and	r21, r21
 89e:	b1 f3       	breq	.-20     	; 0x88c <__divsf3+0x12>
 8a0:	95 1b       	sub	r25, r21
 8a2:	55 0b       	sbc	r21, r21
 8a4:	bb 27       	eor	r27, r27
 8a6:	aa 27       	eor	r26, r26
 8a8:	62 17       	cp	r22, r18
 8aa:	73 07       	cpc	r23, r19
 8ac:	84 07       	cpc	r24, r20
 8ae:	38 f0       	brcs	.+14     	; 0x8be <__divsf3_pse+0x26>
 8b0:	9f 5f       	subi	r25, 0xFF	; 255
 8b2:	5f 4f       	sbci	r21, 0xFF	; 255
 8b4:	22 0f       	add	r18, r18
 8b6:	33 1f       	adc	r19, r19
 8b8:	44 1f       	adc	r20, r20
 8ba:	aa 1f       	adc	r26, r26
 8bc:	a9 f3       	breq	.-22     	; 0x8a8 <__divsf3_pse+0x10>
 8be:	33 d0       	rcall	.+102    	; 0x926 <__divsf3_pse+0x8e>
 8c0:	0e 2e       	mov	r0, r30
 8c2:	3a f0       	brmi	.+14     	; 0x8d2 <__divsf3_pse+0x3a>
 8c4:	e0 e8       	ldi	r30, 0x80	; 128
 8c6:	30 d0       	rcall	.+96     	; 0x928 <__divsf3_pse+0x90>
 8c8:	91 50       	subi	r25, 0x01	; 1
 8ca:	50 40       	sbci	r21, 0x00	; 0
 8cc:	e6 95       	lsr	r30
 8ce:	00 1c       	adc	r0, r0
 8d0:	ca f7       	brpl	.-14     	; 0x8c4 <__divsf3_pse+0x2c>
 8d2:	29 d0       	rcall	.+82     	; 0x926 <__divsf3_pse+0x8e>
 8d4:	fe 2f       	mov	r31, r30
 8d6:	27 d0       	rcall	.+78     	; 0x926 <__divsf3_pse+0x8e>
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	bb 1f       	adc	r27, r27
 8e0:	26 17       	cp	r18, r22
 8e2:	37 07       	cpc	r19, r23
 8e4:	48 07       	cpc	r20, r24
 8e6:	ab 07       	cpc	r26, r27
 8e8:	b0 e8       	ldi	r27, 0x80	; 128
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__divsf3_pse+0x56>
 8ec:	bb 0b       	sbc	r27, r27
 8ee:	80 2d       	mov	r24, r0
 8f0:	bf 01       	movw	r22, r30
 8f2:	ff 27       	eor	r31, r31
 8f4:	93 58       	subi	r25, 0x83	; 131
 8f6:	5f 4f       	sbci	r21, 0xFF	; 255
 8f8:	2a f0       	brmi	.+10     	; 0x904 <__divsf3_pse+0x6c>
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	51 05       	cpc	r21, r1
 8fe:	68 f0       	brcs	.+26     	; 0x91a <__divsf3_pse+0x82>
 900:	8d c0       	rjmp	.+282    	; 0xa1c <__fp_inf>
 902:	d7 c0       	rjmp	.+430    	; 0xab2 <__fp_szero>
 904:	5f 3f       	cpi	r21, 0xFF	; 255
 906:	ec f3       	brlt	.-6      	; 0x902 <__divsf3_pse+0x6a>
 908:	98 3e       	cpi	r25, 0xE8	; 232
 90a:	dc f3       	brlt	.-10     	; 0x902 <__divsf3_pse+0x6a>
 90c:	86 95       	lsr	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	b7 95       	ror	r27
 914:	f7 95       	ror	r31
 916:	9f 5f       	subi	r25, 0xFF	; 255
 918:	c9 f7       	brne	.-14     	; 0x90c <__divsf3_pse+0x74>
 91a:	88 0f       	add	r24, r24
 91c:	91 1d       	adc	r25, r1
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret
 926:	e1 e0       	ldi	r30, 0x01	; 1
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	bb 1f       	adc	r27, r27
 930:	62 17       	cp	r22, r18
 932:	73 07       	cpc	r23, r19
 934:	84 07       	cpc	r24, r20
 936:	ba 07       	cpc	r27, r26
 938:	20 f0       	brcs	.+8      	; 0x942 <__divsf3_pse+0xaa>
 93a:	62 1b       	sub	r22, r18
 93c:	73 0b       	sbc	r23, r19
 93e:	84 0b       	sbc	r24, r20
 940:	ba 0b       	sbc	r27, r26
 942:	ee 1f       	adc	r30, r30
 944:	88 f7       	brcc	.-30     	; 0x928 <__divsf3_pse+0x90>
 946:	e0 95       	com	r30
 948:	08 95       	ret

0000094a <__fixunssfsi>:
 94a:	98 d0       	rcall	.+304    	; 0xa7c <__fp_splitA>
 94c:	88 f0       	brcs	.+34     	; 0x970 <__fixunssfsi+0x26>
 94e:	9f 57       	subi	r25, 0x7F	; 127
 950:	90 f0       	brcs	.+36     	; 0x976 <__fixunssfsi+0x2c>
 952:	b9 2f       	mov	r27, r25
 954:	99 27       	eor	r25, r25
 956:	b7 51       	subi	r27, 0x17	; 23
 958:	a0 f0       	brcs	.+40     	; 0x982 <__fixunssfsi+0x38>
 95a:	d1 f0       	breq	.+52     	; 0x990 <__fixunssfsi+0x46>
 95c:	66 0f       	add	r22, r22
 95e:	77 1f       	adc	r23, r23
 960:	88 1f       	adc	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	1a f0       	brmi	.+6      	; 0x96c <__fixunssfsi+0x22>
 966:	ba 95       	dec	r27
 968:	c9 f7       	brne	.-14     	; 0x95c <__fixunssfsi+0x12>
 96a:	12 c0       	rjmp	.+36     	; 0x990 <__fixunssfsi+0x46>
 96c:	b1 30       	cpi	r27, 0x01	; 1
 96e:	81 f0       	breq	.+32     	; 0x990 <__fixunssfsi+0x46>
 970:	9f d0       	rcall	.+318    	; 0xab0 <__fp_zero>
 972:	b1 e0       	ldi	r27, 0x01	; 1
 974:	08 95       	ret
 976:	9c c0       	rjmp	.+312    	; 0xab0 <__fp_zero>
 978:	67 2f       	mov	r22, r23
 97a:	78 2f       	mov	r23, r24
 97c:	88 27       	eor	r24, r24
 97e:	b8 5f       	subi	r27, 0xF8	; 248
 980:	39 f0       	breq	.+14     	; 0x990 <__fixunssfsi+0x46>
 982:	b9 3f       	cpi	r27, 0xF9	; 249
 984:	cc f3       	brlt	.-14     	; 0x978 <__fixunssfsi+0x2e>
 986:	86 95       	lsr	r24
 988:	77 95       	ror	r23
 98a:	67 95       	ror	r22
 98c:	b3 95       	inc	r27
 98e:	d9 f7       	brne	.-10     	; 0x986 <__fixunssfsi+0x3c>
 990:	3e f4       	brtc	.+14     	; 0x9a0 <__fixunssfsi+0x56>
 992:	90 95       	com	r25
 994:	80 95       	com	r24
 996:	70 95       	com	r23
 998:	61 95       	neg	r22
 99a:	7f 4f       	sbci	r23, 0xFF	; 255
 99c:	8f 4f       	sbci	r24, 0xFF	; 255
 99e:	9f 4f       	sbci	r25, 0xFF	; 255
 9a0:	08 95       	ret

000009a2 <__floatunsisf>:
 9a2:	e8 94       	clt
 9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <__floatsisf+0x12>

000009a6 <__floatsisf>:
 9a6:	97 fb       	bst	r25, 7
 9a8:	3e f4       	brtc	.+14     	; 0x9b8 <__floatsisf+0x12>
 9aa:	90 95       	com	r25
 9ac:	80 95       	com	r24
 9ae:	70 95       	com	r23
 9b0:	61 95       	neg	r22
 9b2:	7f 4f       	sbci	r23, 0xFF	; 255
 9b4:	8f 4f       	sbci	r24, 0xFF	; 255
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	99 23       	and	r25, r25
 9ba:	a9 f0       	breq	.+42     	; 0x9e6 <__floatsisf+0x40>
 9bc:	f9 2f       	mov	r31, r25
 9be:	96 e9       	ldi	r25, 0x96	; 150
 9c0:	bb 27       	eor	r27, r27
 9c2:	93 95       	inc	r25
 9c4:	f6 95       	lsr	r31
 9c6:	87 95       	ror	r24
 9c8:	77 95       	ror	r23
 9ca:	67 95       	ror	r22
 9cc:	b7 95       	ror	r27
 9ce:	f1 11       	cpse	r31, r1
 9d0:	f8 cf       	rjmp	.-16     	; 0x9c2 <__floatsisf+0x1c>
 9d2:	fa f4       	brpl	.+62     	; 0xa12 <__floatsisf+0x6c>
 9d4:	bb 0f       	add	r27, r27
 9d6:	11 f4       	brne	.+4      	; 0x9dc <__floatsisf+0x36>
 9d8:	60 ff       	sbrs	r22, 0
 9da:	1b c0       	rjmp	.+54     	; 0xa12 <__floatsisf+0x6c>
 9dc:	6f 5f       	subi	r22, 0xFF	; 255
 9de:	7f 4f       	sbci	r23, 0xFF	; 255
 9e0:	8f 4f       	sbci	r24, 0xFF	; 255
 9e2:	9f 4f       	sbci	r25, 0xFF	; 255
 9e4:	16 c0       	rjmp	.+44     	; 0xa12 <__floatsisf+0x6c>
 9e6:	88 23       	and	r24, r24
 9e8:	11 f0       	breq	.+4      	; 0x9ee <__floatsisf+0x48>
 9ea:	96 e9       	ldi	r25, 0x96	; 150
 9ec:	11 c0       	rjmp	.+34     	; 0xa10 <__floatsisf+0x6a>
 9ee:	77 23       	and	r23, r23
 9f0:	21 f0       	breq	.+8      	; 0x9fa <__floatsisf+0x54>
 9f2:	9e e8       	ldi	r25, 0x8E	; 142
 9f4:	87 2f       	mov	r24, r23
 9f6:	76 2f       	mov	r23, r22
 9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__floatsisf+0x5e>
 9fa:	66 23       	and	r22, r22
 9fc:	71 f0       	breq	.+28     	; 0xa1a <__floatsisf+0x74>
 9fe:	96 e8       	ldi	r25, 0x86	; 134
 a00:	86 2f       	mov	r24, r22
 a02:	70 e0       	ldi	r23, 0x00	; 0
 a04:	60 e0       	ldi	r22, 0x00	; 0
 a06:	2a f0       	brmi	.+10     	; 0xa12 <__floatsisf+0x6c>
 a08:	9a 95       	dec	r25
 a0a:	66 0f       	add	r22, r22
 a0c:	77 1f       	adc	r23, r23
 a0e:	88 1f       	adc	r24, r24
 a10:	da f7       	brpl	.-10     	; 0xa08 <__floatsisf+0x62>
 a12:	88 0f       	add	r24, r24
 a14:	96 95       	lsr	r25
 a16:	87 95       	ror	r24
 a18:	97 f9       	bld	r25, 7
 a1a:	08 95       	ret

00000a1c <__fp_inf>:
 a1c:	97 f9       	bld	r25, 7
 a1e:	9f 67       	ori	r25, 0x7F	; 127
 a20:	80 e8       	ldi	r24, 0x80	; 128
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	08 95       	ret

00000a28 <__fp_nan>:
 a28:	9f ef       	ldi	r25, 0xFF	; 255
 a2a:	80 ec       	ldi	r24, 0xC0	; 192
 a2c:	08 95       	ret

00000a2e <__fp_pscA>:
 a2e:	00 24       	eor	r0, r0
 a30:	0a 94       	dec	r0
 a32:	16 16       	cp	r1, r22
 a34:	17 06       	cpc	r1, r23
 a36:	18 06       	cpc	r1, r24
 a38:	09 06       	cpc	r0, r25
 a3a:	08 95       	ret

00000a3c <__fp_pscB>:
 a3c:	00 24       	eor	r0, r0
 a3e:	0a 94       	dec	r0
 a40:	12 16       	cp	r1, r18
 a42:	13 06       	cpc	r1, r19
 a44:	14 06       	cpc	r1, r20
 a46:	05 06       	cpc	r0, r21
 a48:	08 95       	ret

00000a4a <__fp_round>:
 a4a:	09 2e       	mov	r0, r25
 a4c:	03 94       	inc	r0
 a4e:	00 0c       	add	r0, r0
 a50:	11 f4       	brne	.+4      	; 0xa56 <__fp_round+0xc>
 a52:	88 23       	and	r24, r24
 a54:	52 f0       	brmi	.+20     	; 0xa6a <__fp_round+0x20>
 a56:	bb 0f       	add	r27, r27
 a58:	40 f4       	brcc	.+16     	; 0xa6a <__fp_round+0x20>
 a5a:	bf 2b       	or	r27, r31
 a5c:	11 f4       	brne	.+4      	; 0xa62 <__fp_round+0x18>
 a5e:	60 ff       	sbrs	r22, 0
 a60:	04 c0       	rjmp	.+8      	; 0xa6a <__fp_round+0x20>
 a62:	6f 5f       	subi	r22, 0xFF	; 255
 a64:	7f 4f       	sbci	r23, 0xFF	; 255
 a66:	8f 4f       	sbci	r24, 0xFF	; 255
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	08 95       	ret

00000a6c <__fp_split3>:
 a6c:	57 fd       	sbrc	r21, 7
 a6e:	90 58       	subi	r25, 0x80	; 128
 a70:	44 0f       	add	r20, r20
 a72:	55 1f       	adc	r21, r21
 a74:	59 f0       	breq	.+22     	; 0xa8c <__fp_splitA+0x10>
 a76:	5f 3f       	cpi	r21, 0xFF	; 255
 a78:	71 f0       	breq	.+28     	; 0xa96 <__fp_splitA+0x1a>
 a7a:	47 95       	ror	r20

00000a7c <__fp_splitA>:
 a7c:	88 0f       	add	r24, r24
 a7e:	97 fb       	bst	r25, 7
 a80:	99 1f       	adc	r25, r25
 a82:	61 f0       	breq	.+24     	; 0xa9c <__fp_splitA+0x20>
 a84:	9f 3f       	cpi	r25, 0xFF	; 255
 a86:	79 f0       	breq	.+30     	; 0xaa6 <__fp_splitA+0x2a>
 a88:	87 95       	ror	r24
 a8a:	08 95       	ret
 a8c:	12 16       	cp	r1, r18
 a8e:	13 06       	cpc	r1, r19
 a90:	14 06       	cpc	r1, r20
 a92:	55 1f       	adc	r21, r21
 a94:	f2 cf       	rjmp	.-28     	; 0xa7a <__fp_split3+0xe>
 a96:	46 95       	lsr	r20
 a98:	f1 df       	rcall	.-30     	; 0xa7c <__fp_splitA>
 a9a:	08 c0       	rjmp	.+16     	; 0xaac <__fp_splitA+0x30>
 a9c:	16 16       	cp	r1, r22
 a9e:	17 06       	cpc	r1, r23
 aa0:	18 06       	cpc	r1, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	f1 cf       	rjmp	.-30     	; 0xa88 <__fp_splitA+0xc>
 aa6:	86 95       	lsr	r24
 aa8:	71 05       	cpc	r23, r1
 aaa:	61 05       	cpc	r22, r1
 aac:	08 94       	sec
 aae:	08 95       	ret

00000ab0 <__fp_zero>:
 ab0:	e8 94       	clt

00000ab2 <__fp_szero>:
 ab2:	bb 27       	eor	r27, r27
 ab4:	66 27       	eor	r22, r22
 ab6:	77 27       	eor	r23, r23
 ab8:	cb 01       	movw	r24, r22
 aba:	97 f9       	bld	r25, 7
 abc:	08 95       	ret

00000abe <__mulsf3>:
 abe:	0b d0       	rcall	.+22     	; 0xad6 <__mulsf3x>
 ac0:	c4 cf       	rjmp	.-120    	; 0xa4a <__fp_round>
 ac2:	b5 df       	rcall	.-150    	; 0xa2e <__fp_pscA>
 ac4:	28 f0       	brcs	.+10     	; 0xad0 <__mulsf3+0x12>
 ac6:	ba df       	rcall	.-140    	; 0xa3c <__fp_pscB>
 ac8:	18 f0       	brcs	.+6      	; 0xad0 <__mulsf3+0x12>
 aca:	95 23       	and	r25, r21
 acc:	09 f0       	breq	.+2      	; 0xad0 <__mulsf3+0x12>
 ace:	a6 cf       	rjmp	.-180    	; 0xa1c <__fp_inf>
 ad0:	ab cf       	rjmp	.-170    	; 0xa28 <__fp_nan>
 ad2:	11 24       	eor	r1, r1
 ad4:	ee cf       	rjmp	.-36     	; 0xab2 <__fp_szero>

00000ad6 <__mulsf3x>:
 ad6:	ca df       	rcall	.-108    	; 0xa6c <__fp_split3>
 ad8:	a0 f3       	brcs	.-24     	; 0xac2 <__mulsf3+0x4>

00000ada <__mulsf3_pse>:
 ada:	95 9f       	mul	r25, r21
 adc:	d1 f3       	breq	.-12     	; 0xad2 <__mulsf3+0x14>
 ade:	95 0f       	add	r25, r21
 ae0:	50 e0       	ldi	r21, 0x00	; 0
 ae2:	55 1f       	adc	r21, r21
 ae4:	62 9f       	mul	r22, r18
 ae6:	f0 01       	movw	r30, r0
 ae8:	72 9f       	mul	r23, r18
 aea:	bb 27       	eor	r27, r27
 aec:	f0 0d       	add	r31, r0
 aee:	b1 1d       	adc	r27, r1
 af0:	63 9f       	mul	r22, r19
 af2:	aa 27       	eor	r26, r26
 af4:	f0 0d       	add	r31, r0
 af6:	b1 1d       	adc	r27, r1
 af8:	aa 1f       	adc	r26, r26
 afa:	64 9f       	mul	r22, r20
 afc:	66 27       	eor	r22, r22
 afe:	b0 0d       	add	r27, r0
 b00:	a1 1d       	adc	r26, r1
 b02:	66 1f       	adc	r22, r22
 b04:	82 9f       	mul	r24, r18
 b06:	22 27       	eor	r18, r18
 b08:	b0 0d       	add	r27, r0
 b0a:	a1 1d       	adc	r26, r1
 b0c:	62 1f       	adc	r22, r18
 b0e:	73 9f       	mul	r23, r19
 b10:	b0 0d       	add	r27, r0
 b12:	a1 1d       	adc	r26, r1
 b14:	62 1f       	adc	r22, r18
 b16:	83 9f       	mul	r24, r19
 b18:	a0 0d       	add	r26, r0
 b1a:	61 1d       	adc	r22, r1
 b1c:	22 1f       	adc	r18, r18
 b1e:	74 9f       	mul	r23, r20
 b20:	33 27       	eor	r19, r19
 b22:	a0 0d       	add	r26, r0
 b24:	61 1d       	adc	r22, r1
 b26:	23 1f       	adc	r18, r19
 b28:	84 9f       	mul	r24, r20
 b2a:	60 0d       	add	r22, r0
 b2c:	21 1d       	adc	r18, r1
 b2e:	82 2f       	mov	r24, r18
 b30:	76 2f       	mov	r23, r22
 b32:	6a 2f       	mov	r22, r26
 b34:	11 24       	eor	r1, r1
 b36:	9f 57       	subi	r25, 0x7F	; 127
 b38:	50 40       	sbci	r21, 0x00	; 0
 b3a:	8a f0       	brmi	.+34     	; 0xb5e <__mulsf3_pse+0x84>
 b3c:	e1 f0       	breq	.+56     	; 0xb76 <__mulsf3_pse+0x9c>
 b3e:	88 23       	and	r24, r24
 b40:	4a f0       	brmi	.+18     	; 0xb54 <__mulsf3_pse+0x7a>
 b42:	ee 0f       	add	r30, r30
 b44:	ff 1f       	adc	r31, r31
 b46:	bb 1f       	adc	r27, r27
 b48:	66 1f       	adc	r22, r22
 b4a:	77 1f       	adc	r23, r23
 b4c:	88 1f       	adc	r24, r24
 b4e:	91 50       	subi	r25, 0x01	; 1
 b50:	50 40       	sbci	r21, 0x00	; 0
 b52:	a9 f7       	brne	.-22     	; 0xb3e <__mulsf3_pse+0x64>
 b54:	9e 3f       	cpi	r25, 0xFE	; 254
 b56:	51 05       	cpc	r21, r1
 b58:	70 f0       	brcs	.+28     	; 0xb76 <__mulsf3_pse+0x9c>
 b5a:	60 cf       	rjmp	.-320    	; 0xa1c <__fp_inf>
 b5c:	aa cf       	rjmp	.-172    	; 0xab2 <__fp_szero>
 b5e:	5f 3f       	cpi	r21, 0xFF	; 255
 b60:	ec f3       	brlt	.-6      	; 0xb5c <__mulsf3_pse+0x82>
 b62:	98 3e       	cpi	r25, 0xE8	; 232
 b64:	dc f3       	brlt	.-10     	; 0xb5c <__mulsf3_pse+0x82>
 b66:	86 95       	lsr	r24
 b68:	77 95       	ror	r23
 b6a:	67 95       	ror	r22
 b6c:	b7 95       	ror	r27
 b6e:	f7 95       	ror	r31
 b70:	e7 95       	ror	r30
 b72:	9f 5f       	subi	r25, 0xFF	; 255
 b74:	c1 f7       	brne	.-16     	; 0xb66 <__mulsf3_pse+0x8c>
 b76:	fe 2b       	or	r31, r30
 b78:	88 0f       	add	r24, r24
 b7a:	91 1d       	adc	r25, r1
 b7c:	96 95       	lsr	r25
 b7e:	87 95       	ror	r24
 b80:	97 f9       	bld	r25, 7
 b82:	08 95       	ret

00000b84 <__divmodhi4>:
 b84:	97 fb       	bst	r25, 7
 b86:	07 2e       	mov	r0, r23
 b88:	16 f4       	brtc	.+4      	; 0xb8e <__divmodhi4+0xa>
 b8a:	00 94       	com	r0
 b8c:	06 d0       	rcall	.+12     	; 0xb9a <__divmodhi4_neg1>
 b8e:	77 fd       	sbrc	r23, 7
 b90:	08 d0       	rcall	.+16     	; 0xba2 <__divmodhi4_neg2>
 b92:	0b d0       	rcall	.+22     	; 0xbaa <__udivmodhi4>
 b94:	07 fc       	sbrc	r0, 7
 b96:	05 d0       	rcall	.+10     	; 0xba2 <__divmodhi4_neg2>
 b98:	3e f4       	brtc	.+14     	; 0xba8 <__divmodhi4_exit>

00000b9a <__divmodhi4_neg1>:
 b9a:	90 95       	com	r25
 b9c:	81 95       	neg	r24
 b9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ba0:	08 95       	ret

00000ba2 <__divmodhi4_neg2>:
 ba2:	70 95       	com	r23
 ba4:	61 95       	neg	r22
 ba6:	7f 4f       	sbci	r23, 0xFF	; 255

00000ba8 <__divmodhi4_exit>:
 ba8:	08 95       	ret

00000baa <__udivmodhi4>:
 baa:	aa 1b       	sub	r26, r26
 bac:	bb 1b       	sub	r27, r27
 bae:	51 e1       	ldi	r21, 0x11	; 17
 bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <__udivmodhi4_ep>

00000bb2 <__udivmodhi4_loop>:
 bb2:	aa 1f       	adc	r26, r26
 bb4:	bb 1f       	adc	r27, r27
 bb6:	a6 17       	cp	r26, r22
 bb8:	b7 07       	cpc	r27, r23
 bba:	10 f0       	brcs	.+4      	; 0xbc0 <__udivmodhi4_ep>
 bbc:	a6 1b       	sub	r26, r22
 bbe:	b7 0b       	sbc	r27, r23

00000bc0 <__udivmodhi4_ep>:
 bc0:	88 1f       	adc	r24, r24
 bc2:	99 1f       	adc	r25, r25
 bc4:	5a 95       	dec	r21
 bc6:	a9 f7       	brne	.-22     	; 0xbb2 <__udivmodhi4_loop>
 bc8:	80 95       	com	r24
 bca:	90 95       	com	r25
 bcc:	bc 01       	movw	r22, r24
 bce:	cd 01       	movw	r24, r26
 bd0:	08 95       	ret

00000bd2 <_exit>:
 bd2:	f8 94       	cli

00000bd4 <__stop_program>:
 bd4:	ff cf       	rjmp	.-2      	; 0xbd4 <__stop_program>
